run:
  skip-files:
    - internal/web/data.go
    - pkg/msqp/*
    - pkg/mm/*

linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    #- cyclop
    - decorder
    #- depguard
    - dogsled
    #- dupl
    #- dupword
    #- durationcheck
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - execinquery
    #- exhaustive
    #- exhaustruct
    - exportloopref
    - forbidigo
    - forcetypeassert
    #- funlen
    - gci
    - ginkgolinter
    - gocheckcompilerdirectives
    - gochecknoglobals
    #- gochecknoinits
    #- gocognit
    #- goconst
    - gocritic
    #- gocyclo
    - godot
    #- godox
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    #- gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - grouper
    - importas
    - ineffassign
    - interfacebloat
    - ireturn
    #- lll
    - loggercheck
    - maintidx
    - makezero
    - misspell
    - musttag
    - nakedret
    #- nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    #- nolintlint
    - nonamedreturns
    - nosprintfhostport
    #- paralleltest
    - prealloc
    - predeclared
    - promlinter
    - reassign
    #- revive
    - rowserrcheck
    - sqlclosecheck
    #- staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testableexamples
    - testpackage
    - thelper
    #- tparallel
    - typecheck
    - unconvert
    #- unparam
    #- unused
    - usestdlibvars
    - varnamelen
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl
    #- zerologlint

linters-settings:
  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    # Default: [".Errorf(", "errors.New(", "errors.Unwrap(", "errors.Join(", ".Wrap(", ".Wrapf(", ".WithMessage(", ".WithMessagef(", ".WithStack("]
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - errors.Join(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
      - errs.DBErr(
    # An array of strings that specify regular expressions of signatures to ignore.
    # Default: []
    #ignoreSigRegexps:
    #  - \.New.*Error\(
    # An array of strings that specify globs of packages to ignore.
    # Default: []
    ignorePackageGlobs:
    #  - encoding/*
      - github.com/leighmacdonald/gbans/pkg/util
      - github.com/leighmacdonald/gbans/internal
    # An array of strings that specify regular expressions of interfaces to ignore.
    # Default: []
    #ignoreInterfaceRegexps:
    #  - ^(?i)c(?-i)ach(ing|e)
  interfacebloat:
    max: 26
  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: snake
        yaml: snake
    depguard:
      # Rules to apply.
      #
      # Variables:
      # - File Variables
      #   you can still use and exclamation mark ! in front of a variable to say not to use it.
      #   Example !$test will match any file that is not a go test file.
      #
      #   `$all` - matches all go files
      #   `$test` - matches all go test files
      #
      # - Package Variables
      #
      #  `$gostd` - matches all of go's standard library (Pulled from `GOROOT`)
      #
      # Default: Only allow $gostd in all files.
      rules:
        errors:
          deny:
            - pkg: "github.com/pkg/errors"
              desc: Should be replaced by standard lib errors package
  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 100
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: -1
