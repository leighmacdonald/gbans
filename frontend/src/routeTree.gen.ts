/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ChatlogsImport } from './routes/chatlogs'

// Create Virtual Routes

const WikiLazyImport = createFileRoute('/wiki')()
const StvLazyImport = createFileRoute('/stv')()
const StatsLazyImport = createFileRoute('/stats')()
const SettingsLazyImport = createFileRoute('/settings')()
const ServersLazyImport = createFileRoute('/servers')()
const ProfileLazyImport = createFileRoute('/profile')()
const PrivacyPolicyLazyImport = createFileRoute('/privacy-policy')()
const PatreonLazyImport = createFileRoute('/patreon')()
const PageNotFoundLazyImport = createFileRoute('/page-not-found')()
const NotificationsLazyImport = createFileRoute('/notifications')()
const MatchLazyImport = createFileRoute('/match')()
const LogoutLazyImport = createFileRoute('/logout')()
const LoginLazyImport = createFileRoute('/login')()
const ContestsLazyImport = createFileRoute('/contests')()
const BanLazyImport = createFileRoute('/ban')()
const IndexLazyImport = createFileRoute('/')()
const ReportIndexLazyImport = createFileRoute('/report/')()
const ForumsIndexLazyImport = createFileRoute('/forums/')()
const WikiSlugLazyImport = createFileRoute('/wiki/$slug')()
const ReportReportidLazyImport = createFileRoute('/report/$report_id')()
const LogsMatchidLazyImport = createFileRoute('/logs/$match_id')()
const LoginSuccessLazyImport = createFileRoute('/login/success')()
const LoginDiscordLazyImport = createFileRoute('/login/discord')()
const ForumsForumidLazyImport = createFileRoute('/forums/$forum_id')()
const ContestsContestidLazyImport = createFileRoute('/contests/$contest_id')()
const AdminVotesLazyImport = createFileRoute('/admin/votes')()
const AdminServersLazyImport = createFileRoute('/admin/servers')()
const AdminReportsLazyImport = createFileRoute('/admin/reports')()
const AdminPeopleLazyImport = createFileRoute('/admin/people')()
const AdminNewsLazyImport = createFileRoute('/admin/news')()
const AdminNetworkLazyImport = createFileRoute('/admin/network')()
const AdminFiltersLazyImport = createFileRoute('/admin/filters')()
const AdminContestsLazyImport = createFileRoute('/admin/contests')()
const AdminAppealsLazyImport = createFileRoute('/admin/appeals')()
const StatsWeaponWeaponidLazyImport = createFileRoute(
  '/stats/weapon/$weapon_id',
)()
const StatsPlayerSteamidLazyImport = createFileRoute(
  '/stats/player/$steam_id',
)()
const ForumsThreadForumthreadidLazyImport = createFileRoute(
  '/forums/thread/$forum_thread_id',
)()
const AdminNetworkPlayersbyipLazyImport = createFileRoute(
  '/admin/network/players_by_ip',
)()
const AdminNetworkIphistLazyImport = createFileRoute('/admin/network/ip_hist')()
const AdminNetworkIpInfoLazyImport = createFileRoute('/admin/network/ip_Info')()
const AdminNetworkCidrblocksLazyImport = createFileRoute(
  '/admin/network/cidr_blocks',
)()
const AdminBanSteamLazyImport = createFileRoute('/admin/ban/steam')()
const AdminBanGroupLazyImport = createFileRoute('/admin/ban/group')()
const AdminBanCidrLazyImport = createFileRoute('/admin/ban/cidr')()
const AdminBanAsnLazyImport = createFileRoute('/admin/ban/asn')()

// Create/Update Routes

const WikiLazyRoute = WikiLazyImport.update({
  path: '/wiki',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/wiki.lazy').then((d) => d.Route))

const StvLazyRoute = StvLazyImport.update({
  path: '/stv',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/stv.lazy').then((d) => d.Route))

const StatsLazyRoute = StatsLazyImport.update({
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/stats.lazy').then((d) => d.Route))

const SettingsLazyRoute = SettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const ServersLazyRoute = ServersLazyImport.update({
  path: '/servers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/servers.lazy').then((d) => d.Route))

const ProfileLazyRoute = ProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const PrivacyPolicyLazyRoute = PrivacyPolicyLazyImport.update({
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy-policy.lazy').then((d) => d.Route),
)

const PatreonLazyRoute = PatreonLazyImport.update({
  path: '/patreon',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/patreon.lazy').then((d) => d.Route))

const PageNotFoundLazyRoute = PageNotFoundLazyImport.update({
  path: '/page-not-found',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/page-not-found.lazy').then((d) => d.Route),
)

const NotificationsLazyRoute = NotificationsLazyImport.update({
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/notifications.lazy').then((d) => d.Route))

const MatchLazyRoute = MatchLazyImport.update({
  path: '/match',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/match.lazy').then((d) => d.Route))

const LogoutLazyRoute = LogoutLazyImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/logout.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const ContestsLazyRoute = ContestsLazyImport.update({
  path: '/contests',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contests.lazy').then((d) => d.Route))

const BanLazyRoute = BanLazyImport.update({
  path: '/ban',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ban.lazy').then((d) => d.Route))

const ChatlogsRoute = ChatlogsImport.update({
  path: '/chatlogs',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ReportIndexLazyRoute = ReportIndexLazyImport.update({
  path: '/report/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/report.index.lazy').then((d) => d.Route))

const ForumsIndexLazyRoute = ForumsIndexLazyImport.update({
  path: '/forums/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/forums.index.lazy').then((d) => d.Route))

const WikiSlugLazyRoute = WikiSlugLazyImport.update({
  path: '/$slug',
  getParentRoute: () => WikiLazyRoute,
} as any).lazy(() => import('./routes/wiki.$slug.lazy').then((d) => d.Route))

const ReportReportidLazyRoute = ReportReportidLazyImport.update({
  path: '/report/$report_id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/report.$report_id.lazy').then((d) => d.Route),
)

const LogsMatchidLazyRoute = LogsMatchidLazyImport.update({
  path: '/logs/$match_id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/logs.$match_id.lazy').then((d) => d.Route),
)

const LoginSuccessLazyRoute = LoginSuccessLazyImport.update({
  path: '/success',
  getParentRoute: () => LoginLazyRoute,
} as any).lazy(() => import('./routes/login.success.lazy').then((d) => d.Route))

const LoginDiscordLazyRoute = LoginDiscordLazyImport.update({
  path: '/discord',
  getParentRoute: () => LoginLazyRoute,
} as any).lazy(() => import('./routes/login.discord.lazy').then((d) => d.Route))

const ForumsForumidLazyRoute = ForumsForumidLazyImport.update({
  path: '/forums/$forum_id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forums.$forum_id.lazy').then((d) => d.Route),
)

const ContestsContestidLazyRoute = ContestsContestidLazyImport.update({
  path: '/$contest_id',
  getParentRoute: () => ContestsLazyRoute,
} as any).lazy(() =>
  import('./routes/contests.$contest_id.lazy').then((d) => d.Route),
)

const AdminVotesLazyRoute = AdminVotesLazyImport.update({
  path: '/admin/votes',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.votes.lazy').then((d) => d.Route))

const AdminServersLazyRoute = AdminServersLazyImport.update({
  path: '/admin/servers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.servers.lazy').then((d) => d.Route))

const AdminReportsLazyRoute = AdminReportsLazyImport.update({
  path: '/admin/reports',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.reports.lazy').then((d) => d.Route))

const AdminPeopleLazyRoute = AdminPeopleLazyImport.update({
  path: '/admin/people',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.people.lazy').then((d) => d.Route))

const AdminNewsLazyRoute = AdminNewsLazyImport.update({
  path: '/admin/news',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.news.lazy').then((d) => d.Route))

const AdminNetworkLazyRoute = AdminNetworkLazyImport.update({
  path: '/admin/network',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.network.lazy').then((d) => d.Route))

const AdminFiltersLazyRoute = AdminFiltersLazyImport.update({
  path: '/admin/filters',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.filters.lazy').then((d) => d.Route))

const AdminContestsLazyRoute = AdminContestsLazyImport.update({
  path: '/admin/contests',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin.contests.lazy').then((d) => d.Route),
)

const AdminAppealsLazyRoute = AdminAppealsLazyImport.update({
  path: '/admin/appeals',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.appeals.lazy').then((d) => d.Route))

const StatsWeaponWeaponidLazyRoute = StatsWeaponWeaponidLazyImport.update({
  path: '/weapon/$weapon_id',
  getParentRoute: () => StatsLazyRoute,
} as any).lazy(() =>
  import('./routes/stats.weapon.$weapon_id.lazy').then((d) => d.Route),
)

const StatsPlayerSteamidLazyRoute = StatsPlayerSteamidLazyImport.update({
  path: '/player/$steam_id',
  getParentRoute: () => StatsLazyRoute,
} as any).lazy(() =>
  import('./routes/stats.player.$steam_id.lazy').then((d) => d.Route),
)

const ForumsThreadForumthreadidLazyRoute =
  ForumsThreadForumthreadidLazyImport.update({
    path: '/forums/thread/$forum_thread_id',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/forums.thread.$forum_thread_id.lazy').then((d) => d.Route),
  )

const AdminNetworkPlayersbyipLazyRoute =
  AdminNetworkPlayersbyipLazyImport.update({
    path: '/players_by_ip',
    getParentRoute: () => AdminNetworkLazyRoute,
  } as any).lazy(() =>
    import('./routes/admin.network.players_by_ip.lazy').then((d) => d.Route),
  )

const AdminNetworkIphistLazyRoute = AdminNetworkIphistLazyImport.update({
  path: '/ip_hist',
  getParentRoute: () => AdminNetworkLazyRoute,
} as any).lazy(() =>
  import('./routes/admin.network.ip_hist.lazy').then((d) => d.Route),
)

const AdminNetworkIpInfoLazyRoute = AdminNetworkIpInfoLazyImport.update({
  path: '/ip_Info',
  getParentRoute: () => AdminNetworkLazyRoute,
} as any).lazy(() =>
  import('./routes/admin.network.ip_Info.lazy').then((d) => d.Route),
)

const AdminNetworkCidrblocksLazyRoute = AdminNetworkCidrblocksLazyImport.update(
  {
    path: '/cidr_blocks',
    getParentRoute: () => AdminNetworkLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/admin.network.cidr_blocks.lazy').then((d) => d.Route),
)

const AdminBanSteamLazyRoute = AdminBanSteamLazyImport.update({
  path: '/admin/ban/steam',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin.ban.steam.lazy').then((d) => d.Route),
)

const AdminBanGroupLazyRoute = AdminBanGroupLazyImport.update({
  path: '/admin/ban/group',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin.ban.group.lazy').then((d) => d.Route),
)

const AdminBanCidrLazyRoute = AdminBanCidrLazyImport.update({
  path: '/admin/ban/cidr',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin.ban.cidr.lazy').then((d) => d.Route),
)

const AdminBanAsnLazyRoute = AdminBanAsnLazyImport.update({
  path: '/admin/ban/asn',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.ban.asn.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/chatlogs': {
      preLoaderRoute: typeof ChatlogsImport
      parentRoute: typeof rootRoute
    }
    '/ban': {
      preLoaderRoute: typeof BanLazyImport
      parentRoute: typeof rootRoute
    }
    '/contests': {
      preLoaderRoute: typeof ContestsLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      preLoaderRoute: typeof LogoutLazyImport
      parentRoute: typeof rootRoute
    }
    '/match': {
      preLoaderRoute: typeof MatchLazyImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      preLoaderRoute: typeof NotificationsLazyImport
      parentRoute: typeof rootRoute
    }
    '/page-not-found': {
      preLoaderRoute: typeof PageNotFoundLazyImport
      parentRoute: typeof rootRoute
    }
    '/patreon': {
      preLoaderRoute: typeof PatreonLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      preLoaderRoute: typeof PrivacyPolicyLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/servers': {
      preLoaderRoute: typeof ServersLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      preLoaderRoute: typeof StatsLazyImport
      parentRoute: typeof rootRoute
    }
    '/stv': {
      preLoaderRoute: typeof StvLazyImport
      parentRoute: typeof rootRoute
    }
    '/wiki': {
      preLoaderRoute: typeof WikiLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/appeals': {
      preLoaderRoute: typeof AdminAppealsLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/contests': {
      preLoaderRoute: typeof AdminContestsLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/filters': {
      preLoaderRoute: typeof AdminFiltersLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/network': {
      preLoaderRoute: typeof AdminNetworkLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/news': {
      preLoaderRoute: typeof AdminNewsLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/people': {
      preLoaderRoute: typeof AdminPeopleLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/reports': {
      preLoaderRoute: typeof AdminReportsLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/servers': {
      preLoaderRoute: typeof AdminServersLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/votes': {
      preLoaderRoute: typeof AdminVotesLazyImport
      parentRoute: typeof rootRoute
    }
    '/contests/$contest_id': {
      preLoaderRoute: typeof ContestsContestidLazyImport
      parentRoute: typeof ContestsLazyImport
    }
    '/forums/$forum_id': {
      preLoaderRoute: typeof ForumsForumidLazyImport
      parentRoute: typeof rootRoute
    }
    '/login/discord': {
      preLoaderRoute: typeof LoginDiscordLazyImport
      parentRoute: typeof LoginLazyImport
    }
    '/login/success': {
      preLoaderRoute: typeof LoginSuccessLazyImport
      parentRoute: typeof LoginLazyImport
    }
    '/logs/$match_id': {
      preLoaderRoute: typeof LogsMatchidLazyImport
      parentRoute: typeof rootRoute
    }
    '/report/$report_id': {
      preLoaderRoute: typeof ReportReportidLazyImport
      parentRoute: typeof rootRoute
    }
    '/wiki/$slug': {
      preLoaderRoute: typeof WikiSlugLazyImport
      parentRoute: typeof WikiLazyImport
    }
    '/forums/': {
      preLoaderRoute: typeof ForumsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/report/': {
      preLoaderRoute: typeof ReportIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/ban/asn': {
      preLoaderRoute: typeof AdminBanAsnLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/ban/cidr': {
      preLoaderRoute: typeof AdminBanCidrLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/ban/group': {
      preLoaderRoute: typeof AdminBanGroupLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/ban/steam': {
      preLoaderRoute: typeof AdminBanSteamLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/network/cidr_blocks': {
      preLoaderRoute: typeof AdminNetworkCidrblocksLazyImport
      parentRoute: typeof AdminNetworkLazyImport
    }
    '/admin/network/ip_Info': {
      preLoaderRoute: typeof AdminNetworkIpInfoLazyImport
      parentRoute: typeof AdminNetworkLazyImport
    }
    '/admin/network/ip_hist': {
      preLoaderRoute: typeof AdminNetworkIphistLazyImport
      parentRoute: typeof AdminNetworkLazyImport
    }
    '/admin/network/players_by_ip': {
      preLoaderRoute: typeof AdminNetworkPlayersbyipLazyImport
      parentRoute: typeof AdminNetworkLazyImport
    }
    '/forums/thread/$forum_thread_id': {
      preLoaderRoute: typeof ForumsThreadForumthreadidLazyImport
      parentRoute: typeof rootRoute
    }
    '/stats/player/$steam_id': {
      preLoaderRoute: typeof StatsPlayerSteamidLazyImport
      parentRoute: typeof StatsLazyImport
    }
    '/stats/weapon/$weapon_id': {
      preLoaderRoute: typeof StatsWeaponWeaponidLazyImport
      parentRoute: typeof StatsLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  ChatlogsRoute,
  BanLazyRoute,
  ContestsLazyRoute.addChildren([ContestsContestidLazyRoute]),
  LoginLazyRoute.addChildren([LoginDiscordLazyRoute, LoginSuccessLazyRoute]),
  LogoutLazyRoute,
  MatchLazyRoute,
  NotificationsLazyRoute,
  PageNotFoundLazyRoute,
  PatreonLazyRoute,
  PrivacyPolicyLazyRoute,
  ProfileLazyRoute,
  ServersLazyRoute,
  SettingsLazyRoute,
  StatsLazyRoute.addChildren([
    StatsPlayerSteamidLazyRoute,
    StatsWeaponWeaponidLazyRoute,
  ]),
  StvLazyRoute,
  WikiLazyRoute.addChildren([WikiSlugLazyRoute]),
  AdminAppealsLazyRoute,
  AdminContestsLazyRoute,
  AdminFiltersLazyRoute,
  AdminNetworkLazyRoute.addChildren([
    AdminNetworkCidrblocksLazyRoute,
    AdminNetworkIpInfoLazyRoute,
    AdminNetworkIphistLazyRoute,
    AdminNetworkPlayersbyipLazyRoute,
  ]),
  AdminNewsLazyRoute,
  AdminPeopleLazyRoute,
  AdminReportsLazyRoute,
  AdminServersLazyRoute,
  AdminVotesLazyRoute,
  ForumsForumidLazyRoute,
  LogsMatchidLazyRoute,
  ReportReportidLazyRoute,
  ForumsIndexLazyRoute,
  ReportIndexLazyRoute,
  AdminBanAsnLazyRoute,
  AdminBanCidrLazyRoute,
  AdminBanGroupLazyRoute,
  AdminBanSteamLazyRoute,
  ForumsThreadForumthreadidLazyRoute,
])

/* prettier-ignore-end */
