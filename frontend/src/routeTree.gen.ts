/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ChatlogsImport } from './routes/chatlogs'
import { Route as AuthoptionalImport } from './routes/_authoptional'
import { Route as AuthImport } from './routes/_auth'
import { Route as LoginIndexImport } from './routes/login.index'
import { Route as LoginSuccessImport } from './routes/login.success'

// Create Virtual Routes

const ServersLazyImport = createFileRoute('/servers')()
const PrivacyPolicyLazyImport = createFileRoute('/privacy-policy')()
const PatreonLazyImport = createFileRoute('/patreon')()
const PageNotFoundLazyImport = createFileRoute('/page-not-found')()
const AuthoptionalIndexLazyImport = createFileRoute('/_authoptional/')()
const LoginDiscordLazyImport = createFileRoute('/login/discord')()
const AuthoptionalWikiLazyImport = createFileRoute('/_authoptional/wiki')()
const AuthoptionalStvLazyImport = createFileRoute('/_authoptional/stv')()
const AuthoptionalProfileLazyImport = createFileRoute(
  '/_authoptional/profile',
)()
const AuthoptionalContestsLazyImport = createFileRoute(
  '/_authoptional/contests',
)()
const AuthStatsLazyImport = createFileRoute('/_auth/stats')()
const AuthSettingsLazyImport = createFileRoute('/_auth/settings')()
const AuthNotificationsLazyImport = createFileRoute('/_auth/notifications')()
const AuthLogoutLazyImport = createFileRoute('/_auth/logout')()
const AuthoptionalForumsIndexLazyImport = createFileRoute(
  '/_authoptional/forums/',
)()
const AuthReportIndexLazyImport = createFileRoute('/_auth/report/')()
const AuthoptionalWikiSlugLazyImport = createFileRoute(
  '/_authoptional/wiki/$slug',
)()
const AuthoptionalForumsForumidLazyImport = createFileRoute(
  '/_authoptional/forums/$forum_id',
)()
const AuthoptionalContestsContestidLazyImport = createFileRoute(
  '/_authoptional/contests/$contest_id',
)()
const AuthReportReportidLazyImport = createFileRoute(
  '/_auth/report/$report_id',
)()
const AuthMatchMatchidLazyImport = createFileRoute('/_auth/match/$match_id')()
const AuthLogsMatchidLazyImport = createFileRoute('/_auth/logs/$match_id')()
const AuthBanBanidLazyImport = createFileRoute('/_auth/ban/$ban_id')()
const AuthAdminVotesLazyImport = createFileRoute('/_auth/admin/votes')()
const AuthAdminServersLazyImport = createFileRoute('/_auth/admin/servers')()
const AuthAdminReportsLazyImport = createFileRoute('/_auth/admin/reports')()
const AuthAdminPeopleLazyImport = createFileRoute('/_auth/admin/people')()
const AuthAdminNewsLazyImport = createFileRoute('/_auth/admin/news')()
const AuthAdminNetworkLazyImport = createFileRoute('/_auth/admin/network')()
const AuthAdminFiltersLazyImport = createFileRoute('/_auth/admin/filters')()
const AuthAdminContestsLazyImport = createFileRoute('/_auth/admin/contests')()
const AuthAdminAppealsLazyImport = createFileRoute('/_auth/admin/appeals')()
const AuthoptionalForumsThreadForumthreadidLazyImport = createFileRoute(
  '/_authoptional/forums/thread/$forum_thread_id',
)()
const AuthStatsWeaponWeaponidLazyImport = createFileRoute(
  '/_auth/stats/weapon/$weapon_id',
)()
const AuthStatsPlayerSteamidLazyImport = createFileRoute(
  '/_auth/stats/player/$steam_id',
)()
const AuthAdminNetworkPlayersbyipLazyImport = createFileRoute(
  '/_auth/admin/network/players_by_ip',
)()
const AuthAdminNetworkIphistLazyImport = createFileRoute(
  '/_auth/admin/network/ip_hist',
)()
const AuthAdminNetworkIpInfoLazyImport = createFileRoute(
  '/_auth/admin/network/ip_Info',
)()
const AuthAdminNetworkCidrblocksLazyImport = createFileRoute(
  '/_auth/admin/network/cidr_blocks',
)()
const AuthAdminBanSteamLazyImport = createFileRoute('/_auth/admin/ban/steam')()
const AuthAdminBanGroupLazyImport = createFileRoute('/_auth/admin/ban/group')()
const AuthAdminBanCidrLazyImport = createFileRoute('/_auth/admin/ban/cidr')()
const AuthAdminBanAsnLazyImport = createFileRoute('/_auth/admin/ban/asn')()

// Create/Update Routes

const ServersLazyRoute = ServersLazyImport.update({
  path: '/servers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/servers.lazy').then((d) => d.Route))

const PrivacyPolicyLazyRoute = PrivacyPolicyLazyImport.update({
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy-policy.lazy').then((d) => d.Route),
)

const PatreonLazyRoute = PatreonLazyImport.update({
  path: '/patreon',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/patreon.lazy').then((d) => d.Route))

const PageNotFoundLazyRoute = PageNotFoundLazyImport.update({
  path: '/page-not-found',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/page-not-found.lazy').then((d) => d.Route),
)

const ChatlogsRoute = ChatlogsImport.update({
  path: '/chatlogs',
  getParentRoute: () => rootRoute,
} as any)

const AuthoptionalRoute = AuthoptionalImport.update({
  id: '/_authoptional',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthoptionalIndexLazyRoute = AuthoptionalIndexLazyImport.update({
  path: '/',
  getParentRoute: () => AuthoptionalRoute,
} as any).lazy(() =>
  import('./routes/_authoptional/index.lazy').then((d) => d.Route),
)

const LoginIndexRoute = LoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const LoginDiscordLazyRoute = LoginDiscordLazyImport.update({
  path: '/login/discord',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.discord.lazy').then((d) => d.Route))

const AuthoptionalWikiLazyRoute = AuthoptionalWikiLazyImport.update({
  path: '/wiki',
  getParentRoute: () => AuthoptionalRoute,
} as any).lazy(() =>
  import('./routes/_authoptional/wiki.lazy').then((d) => d.Route),
)

const AuthoptionalStvLazyRoute = AuthoptionalStvLazyImport.update({
  path: '/stv',
  getParentRoute: () => AuthoptionalRoute,
} as any).lazy(() =>
  import('./routes/_authoptional/stv.lazy').then((d) => d.Route),
)

const AuthoptionalProfileLazyRoute = AuthoptionalProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => AuthoptionalRoute,
} as any).lazy(() =>
  import('./routes/_authoptional/profile.lazy').then((d) => d.Route),
)

const AuthoptionalContestsLazyRoute = AuthoptionalContestsLazyImport.update({
  path: '/contests',
  getParentRoute: () => AuthoptionalRoute,
} as any).lazy(() =>
  import('./routes/_authoptional/contests.lazy').then((d) => d.Route),
)

const AuthStatsLazyRoute = AuthStatsLazyImport.update({
  path: '/stats',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/stats.lazy').then((d) => d.Route))

const AuthSettingsLazyRoute = AuthSettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/settings.lazy').then((d) => d.Route),
)

const AuthNotificationsLazyRoute = AuthNotificationsLazyImport.update({
  path: '/notifications',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/notifications.lazy').then((d) => d.Route),
)

const AuthLogoutLazyRoute = AuthLogoutLazyImport.update({
  path: '/logout',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/logout.lazy').then((d) => d.Route))

const LoginSuccessRoute = LoginSuccessImport.update({
  path: '/login/success',
  getParentRoute: () => rootRoute,
} as any)

const AuthoptionalForumsIndexLazyRoute =
  AuthoptionalForumsIndexLazyImport.update({
    path: '/forums/',
    getParentRoute: () => AuthoptionalRoute,
  } as any).lazy(() =>
    import('./routes/_authoptional/forums.index.lazy').then((d) => d.Route),
  )

const AuthReportIndexLazyRoute = AuthReportIndexLazyImport.update({
  path: '/report/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/report.index.lazy').then((d) => d.Route),
)

const AuthoptionalWikiSlugLazyRoute = AuthoptionalWikiSlugLazyImport.update({
  path: '/$slug',
  getParentRoute: () => AuthoptionalWikiLazyRoute,
} as any).lazy(() =>
  import('./routes/_authoptional/wiki.$slug.lazy').then((d) => d.Route),
)

const AuthoptionalForumsForumidLazyRoute =
  AuthoptionalForumsForumidLazyImport.update({
    path: '/forums/$forum_id',
    getParentRoute: () => AuthoptionalRoute,
  } as any).lazy(() =>
    import('./routes/_authoptional/forums.$forum_id.lazy').then((d) => d.Route),
  )

const AuthoptionalContestsContestidLazyRoute =
  AuthoptionalContestsContestidLazyImport.update({
    path: '/$contest_id',
    getParentRoute: () => AuthoptionalContestsLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authoptional/contests.$contest_id.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthReportReportidLazyRoute = AuthReportReportidLazyImport.update({
  path: '/report/$report_id',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/report.$report_id.lazy').then((d) => d.Route),
)

const AuthMatchMatchidLazyRoute = AuthMatchMatchidLazyImport.update({
  path: '/match/$match_id',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/match.$match_id.lazy').then((d) => d.Route),
)

const AuthLogsMatchidLazyRoute = AuthLogsMatchidLazyImport.update({
  path: '/logs/$match_id',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/logs.$match_id.lazy').then((d) => d.Route),
)

const AuthBanBanidLazyRoute = AuthBanBanidLazyImport.update({
  path: '/ban/$ban_id',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/ban.$ban_id.lazy').then((d) => d.Route),
)

const AuthAdminVotesLazyRoute = AuthAdminVotesLazyImport.update({
  path: '/admin/votes',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.votes.lazy').then((d) => d.Route),
)

const AuthAdminServersLazyRoute = AuthAdminServersLazyImport.update({
  path: '/admin/servers',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.servers.lazy').then((d) => d.Route),
)

const AuthAdminReportsLazyRoute = AuthAdminReportsLazyImport.update({
  path: '/admin/reports',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.reports.lazy').then((d) => d.Route),
)

const AuthAdminPeopleLazyRoute = AuthAdminPeopleLazyImport.update({
  path: '/admin/people',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.people.lazy').then((d) => d.Route),
)

const AuthAdminNewsLazyRoute = AuthAdminNewsLazyImport.update({
  path: '/admin/news',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.news.lazy').then((d) => d.Route),
)

const AuthAdminNetworkLazyRoute = AuthAdminNetworkLazyImport.update({
  path: '/admin/network',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.network.lazy').then((d) => d.Route),
)

const AuthAdminFiltersLazyRoute = AuthAdminFiltersLazyImport.update({
  path: '/admin/filters',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.filters.lazy').then((d) => d.Route),
)

const AuthAdminContestsLazyRoute = AuthAdminContestsLazyImport.update({
  path: '/admin/contests',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.contests.lazy').then((d) => d.Route),
)

const AuthAdminAppealsLazyRoute = AuthAdminAppealsLazyImport.update({
  path: '/admin/appeals',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.appeals.lazy').then((d) => d.Route),
)

const AuthoptionalForumsThreadForumthreadidLazyRoute =
  AuthoptionalForumsThreadForumthreadidLazyImport.update({
    path: '/forums/thread/$forum_thread_id',
    getParentRoute: () => AuthoptionalRoute,
  } as any).lazy(() =>
    import('./routes/_authoptional/forums.thread.$forum_thread_id.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthStatsWeaponWeaponidLazyRoute =
  AuthStatsWeaponWeaponidLazyImport.update({
    path: '/weapon/$weapon_id',
    getParentRoute: () => AuthStatsLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/stats.weapon.$weapon_id.lazy').then((d) => d.Route),
  )

const AuthStatsPlayerSteamidLazyRoute = AuthStatsPlayerSteamidLazyImport.update(
  {
    path: '/player/$steam_id',
    getParentRoute: () => AuthStatsLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/_auth/stats.player.$steam_id.lazy').then((d) => d.Route),
)

const AuthAdminNetworkPlayersbyipLazyRoute =
  AuthAdminNetworkPlayersbyipLazyImport.update({
    path: '/players_by_ip',
    getParentRoute: () => AuthAdminNetworkLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/admin.network.players_by_ip.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthAdminNetworkIphistLazyRoute = AuthAdminNetworkIphistLazyImport.update(
  {
    path: '/ip_hist',
    getParentRoute: () => AuthAdminNetworkLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/_auth/admin.network.ip_hist.lazy').then((d) => d.Route),
)

const AuthAdminNetworkIpInfoLazyRoute = AuthAdminNetworkIpInfoLazyImport.update(
  {
    path: '/ip_Info',
    getParentRoute: () => AuthAdminNetworkLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/_auth/admin.network.ip_Info.lazy').then((d) => d.Route),
)

const AuthAdminNetworkCidrblocksLazyRoute =
  AuthAdminNetworkCidrblocksLazyImport.update({
    path: '/cidr_blocks',
    getParentRoute: () => AuthAdminNetworkLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/admin.network.cidr_blocks.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthAdminBanSteamLazyRoute = AuthAdminBanSteamLazyImport.update({
  path: '/admin/ban/steam',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.ban.steam.lazy').then((d) => d.Route),
)

const AuthAdminBanGroupLazyRoute = AuthAdminBanGroupLazyImport.update({
  path: '/admin/ban/group',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.ban.group.lazy').then((d) => d.Route),
)

const AuthAdminBanCidrLazyRoute = AuthAdminBanCidrLazyImport.update({
  path: '/admin/ban/cidr',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.ban.cidr.lazy').then((d) => d.Route),
)

const AuthAdminBanAsnLazyRoute = AuthAdminBanAsnLazyImport.update({
  path: '/admin/ban/asn',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/admin.ban.asn.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_authoptional': {
      preLoaderRoute: typeof AuthoptionalImport
      parentRoute: typeof rootRoute
    }
    '/chatlogs': {
      preLoaderRoute: typeof ChatlogsImport
      parentRoute: typeof rootRoute
    }
    '/page-not-found': {
      preLoaderRoute: typeof PageNotFoundLazyImport
      parentRoute: typeof rootRoute
    }
    '/patreon': {
      preLoaderRoute: typeof PatreonLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      preLoaderRoute: typeof PrivacyPolicyLazyImport
      parentRoute: typeof rootRoute
    }
    '/servers': {
      preLoaderRoute: typeof ServersLazyImport
      parentRoute: typeof rootRoute
    }
    '/login/success': {
      preLoaderRoute: typeof LoginSuccessImport
      parentRoute: typeof rootRoute
    }
    '/_auth/logout': {
      preLoaderRoute: typeof AuthLogoutLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/notifications': {
      preLoaderRoute: typeof AuthNotificationsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/settings': {
      preLoaderRoute: typeof AuthSettingsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/stats': {
      preLoaderRoute: typeof AuthStatsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_authoptional/contests': {
      preLoaderRoute: typeof AuthoptionalContestsLazyImport
      parentRoute: typeof AuthoptionalImport
    }
    '/_authoptional/profile': {
      preLoaderRoute: typeof AuthoptionalProfileLazyImport
      parentRoute: typeof AuthoptionalImport
    }
    '/_authoptional/stv': {
      preLoaderRoute: typeof AuthoptionalStvLazyImport
      parentRoute: typeof AuthoptionalImport
    }
    '/_authoptional/wiki': {
      preLoaderRoute: typeof AuthoptionalWikiLazyImport
      parentRoute: typeof AuthoptionalImport
    }
    '/login/discord': {
      preLoaderRoute: typeof LoginDiscordLazyImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authoptional/': {
      preLoaderRoute: typeof AuthoptionalIndexLazyImport
      parentRoute: typeof AuthoptionalImport
    }
    '/_auth/admin/appeals': {
      preLoaderRoute: typeof AuthAdminAppealsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/contests': {
      preLoaderRoute: typeof AuthAdminContestsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/filters': {
      preLoaderRoute: typeof AuthAdminFiltersLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/network': {
      preLoaderRoute: typeof AuthAdminNetworkLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/news': {
      preLoaderRoute: typeof AuthAdminNewsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/people': {
      preLoaderRoute: typeof AuthAdminPeopleLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/reports': {
      preLoaderRoute: typeof AuthAdminReportsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/servers': {
      preLoaderRoute: typeof AuthAdminServersLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/votes': {
      preLoaderRoute: typeof AuthAdminVotesLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/ban/$ban_id': {
      preLoaderRoute: typeof AuthBanBanidLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/logs/$match_id': {
      preLoaderRoute: typeof AuthLogsMatchidLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/match/$match_id': {
      preLoaderRoute: typeof AuthMatchMatchidLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/report/$report_id': {
      preLoaderRoute: typeof AuthReportReportidLazyImport
      parentRoute: typeof AuthImport
    }
    '/_authoptional/contests/$contest_id': {
      preLoaderRoute: typeof AuthoptionalContestsContestidLazyImport
      parentRoute: typeof AuthoptionalContestsLazyImport
    }
    '/_authoptional/forums/$forum_id': {
      preLoaderRoute: typeof AuthoptionalForumsForumidLazyImport
      parentRoute: typeof AuthoptionalImport
    }
    '/_authoptional/wiki/$slug': {
      preLoaderRoute: typeof AuthoptionalWikiSlugLazyImport
      parentRoute: typeof AuthoptionalWikiLazyImport
    }
    '/_auth/report/': {
      preLoaderRoute: typeof AuthReportIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_authoptional/forums/': {
      preLoaderRoute: typeof AuthoptionalForumsIndexLazyImport
      parentRoute: typeof AuthoptionalImport
    }
    '/_auth/admin/ban/asn': {
      preLoaderRoute: typeof AuthAdminBanAsnLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/ban/cidr': {
      preLoaderRoute: typeof AuthAdminBanCidrLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/ban/group': {
      preLoaderRoute: typeof AuthAdminBanGroupLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/ban/steam': {
      preLoaderRoute: typeof AuthAdminBanSteamLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/admin/network/cidr_blocks': {
      preLoaderRoute: typeof AuthAdminNetworkCidrblocksLazyImport
      parentRoute: typeof AuthAdminNetworkLazyImport
    }
    '/_auth/admin/network/ip_Info': {
      preLoaderRoute: typeof AuthAdminNetworkIpInfoLazyImport
      parentRoute: typeof AuthAdminNetworkLazyImport
    }
    '/_auth/admin/network/ip_hist': {
      preLoaderRoute: typeof AuthAdminNetworkIphistLazyImport
      parentRoute: typeof AuthAdminNetworkLazyImport
    }
    '/_auth/admin/network/players_by_ip': {
      preLoaderRoute: typeof AuthAdminNetworkPlayersbyipLazyImport
      parentRoute: typeof AuthAdminNetworkLazyImport
    }
    '/_auth/stats/player/$steam_id': {
      preLoaderRoute: typeof AuthStatsPlayerSteamidLazyImport
      parentRoute: typeof AuthStatsLazyImport
    }
    '/_auth/stats/weapon/$weapon_id': {
      preLoaderRoute: typeof AuthStatsWeaponWeaponidLazyImport
      parentRoute: typeof AuthStatsLazyImport
    }
    '/_authoptional/forums/thread/$forum_thread_id': {
      preLoaderRoute: typeof AuthoptionalForumsThreadForumthreadidLazyImport
      parentRoute: typeof AuthoptionalImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthRoute.addChildren([
    AuthLogoutLazyRoute,
    AuthNotificationsLazyRoute,
    AuthSettingsLazyRoute,
    AuthStatsLazyRoute.addChildren([
      AuthStatsPlayerSteamidLazyRoute,
      AuthStatsWeaponWeaponidLazyRoute,
    ]),
    AuthAdminAppealsLazyRoute,
    AuthAdminContestsLazyRoute,
    AuthAdminFiltersLazyRoute,
    AuthAdminNetworkLazyRoute.addChildren([
      AuthAdminNetworkCidrblocksLazyRoute,
      AuthAdminNetworkIpInfoLazyRoute,
      AuthAdminNetworkIphistLazyRoute,
      AuthAdminNetworkPlayersbyipLazyRoute,
    ]),
    AuthAdminNewsLazyRoute,
    AuthAdminPeopleLazyRoute,
    AuthAdminReportsLazyRoute,
    AuthAdminServersLazyRoute,
    AuthAdminVotesLazyRoute,
    AuthBanBanidLazyRoute,
    AuthLogsMatchidLazyRoute,
    AuthMatchMatchidLazyRoute,
    AuthReportReportidLazyRoute,
    AuthReportIndexLazyRoute,
    AuthAdminBanAsnLazyRoute,
    AuthAdminBanCidrLazyRoute,
    AuthAdminBanGroupLazyRoute,
    AuthAdminBanSteamLazyRoute,
  ]),
  AuthoptionalRoute.addChildren([
    AuthoptionalContestsLazyRoute.addChildren([
      AuthoptionalContestsContestidLazyRoute,
    ]),
    AuthoptionalProfileLazyRoute,
    AuthoptionalStvLazyRoute,
    AuthoptionalWikiLazyRoute.addChildren([AuthoptionalWikiSlugLazyRoute]),
    AuthoptionalIndexLazyRoute,
    AuthoptionalForumsForumidLazyRoute,
    AuthoptionalForumsIndexLazyRoute,
    AuthoptionalForumsThreadForumthreadidLazyRoute,
  ]),
  ChatlogsRoute,
  PageNotFoundLazyRoute,
  PatreonLazyRoute,
  PrivacyPolicyLazyRoute,
  ServersLazyRoute,
  LoginSuccessRoute,
  LoginDiscordLazyRoute,
  LoginIndexRoute,
])

/* prettier-ignore-end */
