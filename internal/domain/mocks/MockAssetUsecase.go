// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	domain "github.com/leighmacdonald/gbans/internal/domain"

	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"

	uuid "github.com/gofrs/uuid/v5"
)

// MockAssetUsecase is an autogenerated mock type for the AssetUsecase type
type MockAssetUsecase struct {
	mock.Mock
}

type MockAssetUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetUsecase) EXPECT() *MockAssetUsecase_Expecter {
	return &MockAssetUsecase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, author, bucket, fileName, content
func (_m *MockAssetUsecase) Create(ctx context.Context, author steamid.SteamID, bucket string, fileName string, content io.ReadSeeker) (domain.Asset, error) {
	ret := _m.Called(ctx, author, bucket, fileName, content)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, string, string, io.ReadSeeker) (domain.Asset, error)); ok {
		return rf(ctx, author, bucket, fileName, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, string, string, io.ReadSeeker) domain.Asset); ok {
		r0 = rf(ctx, author, bucket, fileName, content)
	} else {
		r0 = ret.Get(0).(domain.Asset)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID, string, string, io.ReadSeeker) error); ok {
		r1 = rf(ctx, author, bucket, fileName, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAssetUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - author steamid.SteamID
//   - bucket string
//   - fileName string
//   - content io.ReadSeeker
func (_e *MockAssetUsecase_Expecter) Create(ctx interface{}, author interface{}, bucket interface{}, fileName interface{}, content interface{}) *MockAssetUsecase_Create_Call {
	return &MockAssetUsecase_Create_Call{Call: _e.mock.On("Create", ctx, author, bucket, fileName, content)}
}

func (_c *MockAssetUsecase_Create_Call) Run(run func(ctx context.Context, author steamid.SteamID, bucket string, fileName string, content io.ReadSeeker)) *MockAssetUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID), args[2].(string), args[3].(string), args[4].(io.ReadSeeker))
	})
	return _c
}

func (_c *MockAssetUsecase_Create_Call) Return(_a0 domain.Asset, _a1 error) *MockAssetUsecase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetUsecase_Create_Call) RunAndReturn(run func(context.Context, steamid.SteamID, string, string, io.ReadSeeker) (domain.Asset, error)) *MockAssetUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, assetID
func (_m *MockAssetUsecase) Delete(ctx context.Context, assetID uuid.UUID) error {
	ret := _m.Called(ctx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, assetID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAssetUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - assetID uuid.UUID
func (_e *MockAssetUsecase_Expecter) Delete(ctx interface{}, assetID interface{}) *MockAssetUsecase_Delete_Call {
	return &MockAssetUsecase_Delete_Call{Call: _e.mock.On("Delete", ctx, assetID)}
}

func (_c *MockAssetUsecase_Delete_Call) Run(run func(ctx context.Context, assetID uuid.UUID)) *MockAssetUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAssetUsecase_Delete_Call) Return(_a0 error) *MockAssetUsecase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetUsecase_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockAssetUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, assetID
func (_m *MockAssetUsecase) Get(ctx context.Context, assetID uuid.UUID) (domain.Asset, io.ReadSeeker, error) {
	ret := _m.Called(ctx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Asset
	var r1 io.ReadSeeker
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.Asset, io.ReadSeeker, error)); ok {
		return rf(ctx, assetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Asset); ok {
		r0 = rf(ctx, assetID)
	} else {
		r0 = ret.Get(0).(domain.Asset)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) io.ReadSeeker); ok {
		r1 = rf(ctx, assetID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.ReadSeeker)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID) error); ok {
		r2 = rf(ctx, assetID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAssetUsecase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAssetUsecase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - assetID uuid.UUID
func (_e *MockAssetUsecase_Expecter) Get(ctx interface{}, assetID interface{}) *MockAssetUsecase_Get_Call {
	return &MockAssetUsecase_Get_Call{Call: _e.mock.On("Get", ctx, assetID)}
}

func (_c *MockAssetUsecase_Get_Call) Run(run func(ctx context.Context, assetID uuid.UUID)) *MockAssetUsecase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAssetUsecase_Get_Call) Return(_a0 domain.Asset, _a1 io.ReadSeeker, _a2 error) *MockAssetUsecase_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAssetUsecase_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (domain.Asset, io.ReadSeeker, error)) *MockAssetUsecase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssetUsecase creates a new instance of MockAssetUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetUsecase {
	mock := &MockAssetUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
