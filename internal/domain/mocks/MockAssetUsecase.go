// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	domain "github.com/leighmacdonald/gbans/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid/v5"
)

// MockAssetUsecase is an autogenerated mock type for the AssetUsecase type
type MockAssetUsecase struct {
	mock.Mock
}

type MockAssetUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetUsecase) EXPECT() *MockAssetUsecase_Expecter {
	return &MockAssetUsecase_Expecter{mock: &_m.Mock}
}

// DropAsset provides a mock function with given fields: ctx, asset
func (_m *MockAssetUsecase) DropAsset(ctx context.Context, asset *domain.Asset) error {
	ret := _m.Called(ctx, asset)

	if len(ret) == 0 {
		panic("no return value specified for DropAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Asset) error); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetUsecase_DropAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAsset'
type MockAssetUsecase_DropAsset_Call struct {
	*mock.Call
}

// DropAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - asset *domain.Asset
func (_e *MockAssetUsecase_Expecter) DropAsset(ctx interface{}, asset interface{}) *MockAssetUsecase_DropAsset_Call {
	return &MockAssetUsecase_DropAsset_Call{Call: _e.mock.On("DropAsset", ctx, asset)}
}

func (_c *MockAssetUsecase_DropAsset_Call) Run(run func(ctx context.Context, asset *domain.Asset)) *MockAssetUsecase_DropAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Asset))
	})
	return _c
}

func (_c *MockAssetUsecase_DropAsset_Call) Return(_a0 error) *MockAssetUsecase_DropAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetUsecase_DropAsset_Call) RunAndReturn(run func(context.Context, *domain.Asset) error) *MockAssetUsecase_DropAsset_Call {
	_c.Call.Return(run)
	return _c
}

// GetAsset provides a mock function with given fields: ctx, _a1
func (_m *MockAssetUsecase) GetAsset(ctx context.Context, _a1 uuid.UUID) (domain.Asset, io.Reader, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 domain.Asset
	var r1 io.Reader
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.Asset, io.Reader, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Asset); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(domain.Asset)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) io.Reader); ok {
		r1 = rf(ctx, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Reader)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID) error); ok {
		r2 = rf(ctx, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAssetUsecase_GetAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAsset'
type MockAssetUsecase_GetAsset_Call struct {
	*mock.Call
}

// GetAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 uuid.UUID
func (_e *MockAssetUsecase_Expecter) GetAsset(ctx interface{}, _a1 interface{}) *MockAssetUsecase_GetAsset_Call {
	return &MockAssetUsecase_GetAsset_Call{Call: _e.mock.On("GetAsset", ctx, _a1)}
}

func (_c *MockAssetUsecase_GetAsset_Call) Run(run func(ctx context.Context, _a1 uuid.UUID)) *MockAssetUsecase_GetAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAssetUsecase_GetAsset_Call) Return(_a0 domain.Asset, _a1 io.Reader, _a2 error) *MockAssetUsecase_GetAsset_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAssetUsecase_GetAsset_Call) RunAndReturn(run func(context.Context, uuid.UUID) (domain.Asset, io.Reader, error)) *MockAssetUsecase_GetAsset_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAsset provides a mock function with given fields: ctx, bucket, asset, content
func (_m *MockAssetUsecase) SaveAsset(ctx context.Context, bucket string, asset *domain.Asset, content []byte) error {
	ret := _m.Called(ctx, bucket, asset, content)

	if len(ret) == 0 {
		panic("no return value specified for SaveAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Asset, []byte) error); ok {
		r0 = rf(ctx, bucket, asset, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetUsecase_SaveAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAsset'
type MockAssetUsecase_SaveAsset_Call struct {
	*mock.Call
}

// SaveAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - asset *domain.Asset
//   - content []byte
func (_e *MockAssetUsecase_Expecter) SaveAsset(ctx interface{}, bucket interface{}, asset interface{}, content interface{}) *MockAssetUsecase_SaveAsset_Call {
	return &MockAssetUsecase_SaveAsset_Call{Call: _e.mock.On("SaveAsset", ctx, bucket, asset, content)}
}

func (_c *MockAssetUsecase_SaveAsset_Call) Run(run func(ctx context.Context, bucket string, asset *domain.Asset, content []byte)) *MockAssetUsecase_SaveAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.Asset), args[3].([]byte))
	})
	return _c
}

func (_c *MockAssetUsecase_SaveAsset_Call) Return(_a0 error) *MockAssetUsecase_SaveAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetUsecase_SaveAsset_Call) RunAndReturn(run func(context.Context, string, *domain.Asset, []byte) error) *MockAssetUsecase_SaveAsset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssetUsecase creates a new instance of MockAssetUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetUsecase {
	mock := &MockAssetUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
