// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v3/steamid"
)

// MockBanGroupUsecase is an autogenerated mock type for the BanGroupUsecase type
type MockBanGroupUsecase struct {
	mock.Mock
}

type MockBanGroupUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBanGroupUsecase) EXPECT() *MockBanGroupUsecase_Expecter {
	return &MockBanGroupUsecase_Expecter{mock: &_m.Mock}
}

// Ban provides a mock function with given fields: ctx, banGroup
func (_m *MockBanGroupUsecase) Ban(ctx context.Context, banGroup *domain.BanGroup) error {
	ret := _m.Called(ctx, banGroup)

	if len(ret) == 0 {
		panic("no return value specified for Ban")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanGroup) error); ok {
		r0 = rf(ctx, banGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanGroupUsecase_Ban_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ban'
type MockBanGroupUsecase_Ban_Call struct {
	*mock.Call
}

// Ban is a helper method to define mock.On call
//   - ctx context.Context
//   - banGroup *domain.BanGroup
func (_e *MockBanGroupUsecase_Expecter) Ban(ctx interface{}, banGroup interface{}) *MockBanGroupUsecase_Ban_Call {
	return &MockBanGroupUsecase_Ban_Call{Call: _e.mock.On("Ban", ctx, banGroup)}
}

func (_c *MockBanGroupUsecase_Ban_Call) Run(run func(ctx context.Context, banGroup *domain.BanGroup)) *MockBanGroupUsecase_Ban_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanGroup))
	})
	return _c
}

func (_c *MockBanGroupUsecase_Ban_Call) Return(_a0 error) *MockBanGroupUsecase_Ban_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanGroupUsecase_Ban_Call) RunAndReturn(run func(context.Context, *domain.BanGroup) error) *MockBanGroupUsecase_Ban_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, banGroup
func (_m *MockBanGroupUsecase) Delete(ctx context.Context, banGroup *domain.BanGroup) error {
	ret := _m.Called(ctx, banGroup)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanGroup) error); ok {
		r0 = rf(ctx, banGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanGroupUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBanGroupUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - banGroup *domain.BanGroup
func (_e *MockBanGroupUsecase_Expecter) Delete(ctx interface{}, banGroup interface{}) *MockBanGroupUsecase_Delete_Call {
	return &MockBanGroupUsecase_Delete_Call{Call: _e.mock.On("Delete", ctx, banGroup)}
}

func (_c *MockBanGroupUsecase_Delete_Call) Run(run func(ctx context.Context, banGroup *domain.BanGroup)) *MockBanGroupUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanGroup))
	})
	return _c
}

func (_c *MockBanGroupUsecase_Delete_Call) Return(_a0 error) *MockBanGroupUsecase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanGroupUsecase_Delete_Call) RunAndReturn(run func(context.Context, *domain.BanGroup) error) *MockBanGroupUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, filter
func (_m *MockBanGroupUsecase) Get(ctx context.Context, filter domain.GroupBansQueryFilter) ([]domain.BannedGroupPerson, int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.BannedGroupPerson
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GroupBansQueryFilter) ([]domain.BannedGroupPerson, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GroupBansQueryFilter) []domain.BannedGroupPerson); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BannedGroupPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GroupBansQueryFilter) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.GroupBansQueryFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBanGroupUsecase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBanGroupUsecase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.GroupBansQueryFilter
func (_e *MockBanGroupUsecase_Expecter) Get(ctx interface{}, filter interface{}) *MockBanGroupUsecase_Get_Call {
	return &MockBanGroupUsecase_Get_Call{Call: _e.mock.On("Get", ctx, filter)}
}

func (_c *MockBanGroupUsecase_Get_Call) Run(run func(ctx context.Context, filter domain.GroupBansQueryFilter)) *MockBanGroupUsecase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.GroupBansQueryFilter))
	})
	return _c
}

func (_c *MockBanGroupUsecase_Get_Call) Return(_a0 []domain.BannedGroupPerson, _a1 int64, _a2 error) *MockBanGroupUsecase_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBanGroupUsecase_Get_Call) RunAndReturn(run func(context.Context, domain.GroupBansQueryFilter) ([]domain.BannedGroupPerson, int64, error)) *MockBanGroupUsecase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByGID provides a mock function with given fields: ctx, groupID, banGroup
func (_m *MockBanGroupUsecase) GetByGID(ctx context.Context, groupID steamid.GID, banGroup *domain.BanGroup) error {
	ret := _m.Called(ctx, groupID, banGroup)

	if len(ret) == 0 {
		panic("no return value specified for GetByGID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.GID, *domain.BanGroup) error); ok {
		r0 = rf(ctx, groupID, banGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanGroupUsecase_GetByGID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByGID'
type MockBanGroupUsecase_GetByGID_Call struct {
	*mock.Call
}

// GetByGID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID steamid.GID
//   - banGroup *domain.BanGroup
func (_e *MockBanGroupUsecase_Expecter) GetByGID(ctx interface{}, groupID interface{}, banGroup interface{}) *MockBanGroupUsecase_GetByGID_Call {
	return &MockBanGroupUsecase_GetByGID_Call{Call: _e.mock.On("GetByGID", ctx, groupID, banGroup)}
}

func (_c *MockBanGroupUsecase_GetByGID_Call) Run(run func(ctx context.Context, groupID steamid.GID, banGroup *domain.BanGroup)) *MockBanGroupUsecase_GetByGID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.GID), args[2].(*domain.BanGroup))
	})
	return _c
}

func (_c *MockBanGroupUsecase_GetByGID_Call) Return(_a0 error) *MockBanGroupUsecase_GetByGID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanGroupUsecase_GetByGID_Call) RunAndReturn(run func(context.Context, steamid.GID, *domain.BanGroup) error) *MockBanGroupUsecase_GetByGID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, banGroupID, banGroup
func (_m *MockBanGroupUsecase) GetByID(ctx context.Context, banGroupID int64, banGroup *domain.BanGroup) error {
	ret := _m.Called(ctx, banGroupID, banGroup)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.BanGroup) error); ok {
		r0 = rf(ctx, banGroupID, banGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanGroupUsecase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockBanGroupUsecase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - banGroupID int64
//   - banGroup *domain.BanGroup
func (_e *MockBanGroupUsecase_Expecter) GetByID(ctx interface{}, banGroupID interface{}, banGroup interface{}) *MockBanGroupUsecase_GetByID_Call {
	return &MockBanGroupUsecase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, banGroupID, banGroup)}
}

func (_c *MockBanGroupUsecase_GetByID_Call) Run(run func(ctx context.Context, banGroupID int64, banGroup *domain.BanGroup)) *MockBanGroupUsecase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.BanGroup))
	})
	return _c
}

func (_c *MockBanGroupUsecase_GetByID_Call) Return(_a0 error) *MockBanGroupUsecase_GetByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanGroupUsecase_GetByID_Call) RunAndReturn(run func(context.Context, int64, *domain.BanGroup) error) *MockBanGroupUsecase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMembersList provides a mock function with given fields: ctx, parentID, list
func (_m *MockBanGroupUsecase) GetMembersList(ctx context.Context, parentID int64, list *domain.MembersList) error {
	ret := _m.Called(ctx, parentID, list)

	if len(ret) == 0 {
		panic("no return value specified for GetMembersList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.MembersList) error); ok {
		r0 = rf(ctx, parentID, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanGroupUsecase_GetMembersList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMembersList'
type MockBanGroupUsecase_GetMembersList_Call struct {
	*mock.Call
}

// GetMembersList is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - list *domain.MembersList
func (_e *MockBanGroupUsecase_Expecter) GetMembersList(ctx interface{}, parentID interface{}, list interface{}) *MockBanGroupUsecase_GetMembersList_Call {
	return &MockBanGroupUsecase_GetMembersList_Call{Call: _e.mock.On("GetMembersList", ctx, parentID, list)}
}

func (_c *MockBanGroupUsecase_GetMembersList_Call) Run(run func(ctx context.Context, parentID int64, list *domain.MembersList)) *MockBanGroupUsecase_GetMembersList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.MembersList))
	})
	return _c
}

func (_c *MockBanGroupUsecase_GetMembersList_Call) Return(_a0 error) *MockBanGroupUsecase_GetMembersList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanGroupUsecase_GetMembersList_Call) RunAndReturn(run func(context.Context, int64, *domain.MembersList) error) *MockBanGroupUsecase_GetMembersList_Call {
	_c.Call.Return(run)
	return _c
}

// IsMember provides a mock function with given fields: steamID
func (_m *MockBanGroupUsecase) IsMember(steamID steamid.SID64) (steamid.GID, bool) {
	ret := _m.Called(steamID)

	if len(ret) == 0 {
		panic("no return value specified for IsMember")
	}

	var r0 steamid.GID
	var r1 bool
	if rf, ok := ret.Get(0).(func(steamid.SID64) (steamid.GID, bool)); ok {
		return rf(steamID)
	}
	if rf, ok := ret.Get(0).(func(steamid.SID64) steamid.GID); ok {
		r0 = rf(steamID)
	} else {
		r0 = ret.Get(0).(steamid.GID)
	}

	if rf, ok := ret.Get(1).(func(steamid.SID64) bool); ok {
		r1 = rf(steamID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBanGroupUsecase_IsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMember'
type MockBanGroupUsecase_IsMember_Call struct {
	*mock.Call
}

// IsMember is a helper method to define mock.On call
//   - steamID steamid.SID64
func (_e *MockBanGroupUsecase_Expecter) IsMember(steamID interface{}) *MockBanGroupUsecase_IsMember_Call {
	return &MockBanGroupUsecase_IsMember_Call{Call: _e.mock.On("IsMember", steamID)}
}

func (_c *MockBanGroupUsecase_IsMember_Call) Run(run func(steamID steamid.SID64)) *MockBanGroupUsecase_IsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(steamid.SID64))
	})
	return _c
}

func (_c *MockBanGroupUsecase_IsMember_Call) Return(_a0 steamid.GID, _a1 bool) *MockBanGroupUsecase_IsMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanGroupUsecase_IsMember_Call) RunAndReturn(run func(steamid.SID64) (steamid.GID, bool)) *MockBanGroupUsecase_IsMember_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, banGroup
func (_m *MockBanGroupUsecase) Save(ctx context.Context, banGroup *domain.BanGroup) error {
	ret := _m.Called(ctx, banGroup)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanGroup) error); ok {
		r0 = rf(ctx, banGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanGroupUsecase_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBanGroupUsecase_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - banGroup *domain.BanGroup
func (_e *MockBanGroupUsecase_Expecter) Save(ctx interface{}, banGroup interface{}) *MockBanGroupUsecase_Save_Call {
	return &MockBanGroupUsecase_Save_Call{Call: _e.mock.On("Save", ctx, banGroup)}
}

func (_c *MockBanGroupUsecase_Save_Call) Run(run func(ctx context.Context, banGroup *domain.BanGroup)) *MockBanGroupUsecase_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanGroup))
	})
	return _c
}

func (_c *MockBanGroupUsecase_Save_Call) Return(_a0 error) *MockBanGroupUsecase_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanGroupUsecase_Save_Call) RunAndReturn(run func(context.Context, *domain.BanGroup) error) *MockBanGroupUsecase_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMembersList provides a mock function with given fields: ctx, list
func (_m *MockBanGroupUsecase) SaveMembersList(ctx context.Context, list *domain.MembersList) error {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for SaveMembersList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.MembersList) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanGroupUsecase_SaveMembersList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMembersList'
type MockBanGroupUsecase_SaveMembersList_Call struct {
	*mock.Call
}

// SaveMembersList is a helper method to define mock.On call
//   - ctx context.Context
//   - list *domain.MembersList
func (_e *MockBanGroupUsecase_Expecter) SaveMembersList(ctx interface{}, list interface{}) *MockBanGroupUsecase_SaveMembersList_Call {
	return &MockBanGroupUsecase_SaveMembersList_Call{Call: _e.mock.On("SaveMembersList", ctx, list)}
}

func (_c *MockBanGroupUsecase_SaveMembersList_Call) Run(run func(ctx context.Context, list *domain.MembersList)) *MockBanGroupUsecase_SaveMembersList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.MembersList))
	})
	return _c
}

func (_c *MockBanGroupUsecase_SaveMembersList_Call) Return(_a0 error) *MockBanGroupUsecase_SaveMembersList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanGroupUsecase_SaveMembersList_Call) RunAndReturn(run func(context.Context, *domain.MembersList) error) *MockBanGroupUsecase_SaveMembersList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBanGroupUsecase creates a new instance of MockBanGroupUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBanGroupUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBanGroupUsecase {
	mock := &MockBanGroupUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
