// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"
)

// MockDiscordOAuthRepository is an autogenerated mock type for the DiscordOAuthRepository type
type MockDiscordOAuthRepository struct {
	mock.Mock
}

type MockDiscordOAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscordOAuthRepository) EXPECT() *MockDiscordOAuthRepository_Expecter {
	return &MockDiscordOAuthRepository_Expecter{mock: &_m.Mock}
}

// DeleteTokens provides a mock function with given fields: ctx, steamID
func (_m *MockDiscordOAuthRepository) DeleteTokens(ctx context.Context, steamID steamid.SteamID) error {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) error); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscordOAuthRepository_DeleteTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTokens'
type MockDiscordOAuthRepository_DeleteTokens_Call struct {
	*mock.Call
}

// DeleteTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockDiscordOAuthRepository_Expecter) DeleteTokens(ctx interface{}, steamID interface{}) *MockDiscordOAuthRepository_DeleteTokens_Call {
	return &MockDiscordOAuthRepository_DeleteTokens_Call{Call: _e.mock.On("DeleteTokens", ctx, steamID)}
}

func (_c *MockDiscordOAuthRepository_DeleteTokens_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockDiscordOAuthRepository_DeleteTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockDiscordOAuthRepository_DeleteTokens_Call) Return(_a0 error) *MockDiscordOAuthRepository_DeleteTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscordOAuthRepository_DeleteTokens_Call) RunAndReturn(run func(context.Context, steamid.SteamID) error) *MockDiscordOAuthRepository_DeleteTokens_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserDetail provides a mock function with given fields: ctx, steamID
func (_m *MockDiscordOAuthRepository) DeleteUserDetail(ctx context.Context, steamID steamid.SteamID) error {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) error); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscordOAuthRepository_DeleteUserDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserDetail'
type MockDiscordOAuthRepository_DeleteUserDetail_Call struct {
	*mock.Call
}

// DeleteUserDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockDiscordOAuthRepository_Expecter) DeleteUserDetail(ctx interface{}, steamID interface{}) *MockDiscordOAuthRepository_DeleteUserDetail_Call {
	return &MockDiscordOAuthRepository_DeleteUserDetail_Call{Call: _e.mock.On("DeleteUserDetail", ctx, steamID)}
}

func (_c *MockDiscordOAuthRepository_DeleteUserDetail_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockDiscordOAuthRepository_DeleteUserDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockDiscordOAuthRepository_DeleteUserDetail_Call) Return(_a0 error) *MockDiscordOAuthRepository_DeleteUserDetail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscordOAuthRepository_DeleteUserDetail_Call) RunAndReturn(run func(context.Context, steamid.SteamID) error) *MockDiscordOAuthRepository_DeleteUserDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokens provides a mock function with given fields: ctx, steamID
func (_m *MockDiscordOAuthRepository) GetTokens(ctx context.Context, steamID steamid.SteamID) (domain.DiscordCredential, error) {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for GetTokens")
	}

	var r0 domain.DiscordCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) (domain.DiscordCredential, error)); ok {
		return rf(ctx, steamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) domain.DiscordCredential); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Get(0).(domain.DiscordCredential)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscordOAuthRepository_GetTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokens'
type MockDiscordOAuthRepository_GetTokens_Call struct {
	*mock.Call
}

// GetTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockDiscordOAuthRepository_Expecter) GetTokens(ctx interface{}, steamID interface{}) *MockDiscordOAuthRepository_GetTokens_Call {
	return &MockDiscordOAuthRepository_GetTokens_Call{Call: _e.mock.On("GetTokens", ctx, steamID)}
}

func (_c *MockDiscordOAuthRepository_GetTokens_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockDiscordOAuthRepository_GetTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockDiscordOAuthRepository_GetTokens_Call) Return(_a0 domain.DiscordCredential, _a1 error) *MockDiscordOAuthRepository_GetTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscordOAuthRepository_GetTokens_Call) RunAndReturn(run func(context.Context, steamid.SteamID) (domain.DiscordCredential, error)) *MockDiscordOAuthRepository_GetTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDetail provides a mock function with given fields: ctx, id
func (_m *MockDiscordOAuthRepository) GetUserDetail(ctx context.Context, id steamid.SteamID) (domain.DiscordUserDetail, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDetail")
	}

	var r0 domain.DiscordUserDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) (domain.DiscordUserDetail, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) domain.DiscordUserDetail); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.DiscordUserDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscordOAuthRepository_GetUserDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDetail'
type MockDiscordOAuthRepository_GetUserDetail_Call struct {
	*mock.Call
}

// GetUserDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - id steamid.SteamID
func (_e *MockDiscordOAuthRepository_Expecter) GetUserDetail(ctx interface{}, id interface{}) *MockDiscordOAuthRepository_GetUserDetail_Call {
	return &MockDiscordOAuthRepository_GetUserDetail_Call{Call: _e.mock.On("GetUserDetail", ctx, id)}
}

func (_c *MockDiscordOAuthRepository_GetUserDetail_Call) Run(run func(ctx context.Context, id steamid.SteamID)) *MockDiscordOAuthRepository_GetUserDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockDiscordOAuthRepository_GetUserDetail_Call) Return(_a0 domain.DiscordUserDetail, _a1 error) *MockDiscordOAuthRepository_GetUserDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscordOAuthRepository_GetUserDetail_Call) RunAndReturn(run func(context.Context, steamid.SteamID) (domain.DiscordUserDetail, error)) *MockDiscordOAuthRepository_GetUserDetail_Call {
	_c.Call.Return(run)
	return _c
}

// OldAuths provides a mock function with given fields: ctx
func (_m *MockDiscordOAuthRepository) OldAuths(ctx context.Context) ([]domain.DiscordCredential, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OldAuths")
	}

	var r0 []domain.DiscordCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.DiscordCredential, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.DiscordCredential); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DiscordCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscordOAuthRepository_OldAuths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OldAuths'
type MockDiscordOAuthRepository_OldAuths_Call struct {
	*mock.Call
}

// OldAuths is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDiscordOAuthRepository_Expecter) OldAuths(ctx interface{}) *MockDiscordOAuthRepository_OldAuths_Call {
	return &MockDiscordOAuthRepository_OldAuths_Call{Call: _e.mock.On("OldAuths", ctx)}
}

func (_c *MockDiscordOAuthRepository_OldAuths_Call) Run(run func(ctx context.Context)) *MockDiscordOAuthRepository_OldAuths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDiscordOAuthRepository_OldAuths_Call) Return(_a0 []domain.DiscordCredential, _a1 error) *MockDiscordOAuthRepository_OldAuths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscordOAuthRepository_OldAuths_Call) RunAndReturn(run func(context.Context) ([]domain.DiscordCredential, error)) *MockDiscordOAuthRepository_OldAuths_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTokens provides a mock function with given fields: ctx, creds
func (_m *MockDiscordOAuthRepository) SaveTokens(ctx context.Context, creds domain.DiscordCredential) error {
	ret := _m.Called(ctx, creds)

	if len(ret) == 0 {
		panic("no return value specified for SaveTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.DiscordCredential) error); ok {
		r0 = rf(ctx, creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscordOAuthRepository_SaveTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTokens'
type MockDiscordOAuthRepository_SaveTokens_Call struct {
	*mock.Call
}

// SaveTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - creds domain.DiscordCredential
func (_e *MockDiscordOAuthRepository_Expecter) SaveTokens(ctx interface{}, creds interface{}) *MockDiscordOAuthRepository_SaveTokens_Call {
	return &MockDiscordOAuthRepository_SaveTokens_Call{Call: _e.mock.On("SaveTokens", ctx, creds)}
}

func (_c *MockDiscordOAuthRepository_SaveTokens_Call) Run(run func(ctx context.Context, creds domain.DiscordCredential)) *MockDiscordOAuthRepository_SaveTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.DiscordCredential))
	})
	return _c
}

func (_c *MockDiscordOAuthRepository_SaveTokens_Call) Return(_a0 error) *MockDiscordOAuthRepository_SaveTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscordOAuthRepository_SaveTokens_Call) RunAndReturn(run func(context.Context, domain.DiscordCredential) error) *MockDiscordOAuthRepository_SaveTokens_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUserDetail provides a mock function with given fields: ctx, detail
func (_m *MockDiscordOAuthRepository) SaveUserDetail(ctx context.Context, detail domain.DiscordUserDetail) error {
	ret := _m.Called(ctx, detail)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.DiscordUserDetail) error); ok {
		r0 = rf(ctx, detail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscordOAuthRepository_SaveUserDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUserDetail'
type MockDiscordOAuthRepository_SaveUserDetail_Call struct {
	*mock.Call
}

// SaveUserDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - detail domain.DiscordUserDetail
func (_e *MockDiscordOAuthRepository_Expecter) SaveUserDetail(ctx interface{}, detail interface{}) *MockDiscordOAuthRepository_SaveUserDetail_Call {
	return &MockDiscordOAuthRepository_SaveUserDetail_Call{Call: _e.mock.On("SaveUserDetail", ctx, detail)}
}

func (_c *MockDiscordOAuthRepository_SaveUserDetail_Call) Run(run func(ctx context.Context, detail domain.DiscordUserDetail)) *MockDiscordOAuthRepository_SaveUserDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.DiscordUserDetail))
	})
	return _c
}

func (_c *MockDiscordOAuthRepository_SaveUserDetail_Call) Return(_a0 error) *MockDiscordOAuthRepository_SaveUserDetail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscordOAuthRepository_SaveUserDetail_Call) RunAndReturn(run func(context.Context, domain.DiscordUserDetail) error) *MockDiscordOAuthRepository_SaveUserDetail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscordOAuthRepository creates a new instance of MockDiscordOAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscordOAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscordOAuthRepository {
	mock := &MockDiscordOAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
