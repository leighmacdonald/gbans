// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockStateRepository is an autogenerated mock type for the StateRepository type
type MockStateRepository struct {
	mock.Mock
}

type MockStateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateRepository) EXPECT() *MockStateRepository_Expecter {
	return &MockStateRepository_Expecter{mock: &_m.Mock}
}

// Configs provides a mock function with given fields:
func (_m *MockStateRepository) Configs() []domain.ServerConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Configs")
	}

	var r0 []domain.ServerConfig
	if rf, ok := ret.Get(0).(func() []domain.ServerConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ServerConfig)
		}
	}

	return r0
}

// MockStateRepository_Configs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configs'
type MockStateRepository_Configs_Call struct {
	*mock.Call
}

// Configs is a helper method to define mock.On call
func (_e *MockStateRepository_Expecter) Configs() *MockStateRepository_Configs_Call {
	return &MockStateRepository_Configs_Call{Call: _e.mock.On("Configs")}
}

func (_c *MockStateRepository_Configs_Call) Run(run func()) *MockStateRepository_Configs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateRepository_Configs_Call) Return(_a0 []domain.ServerConfig) *MockStateRepository_Configs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateRepository_Configs_Call) RunAndReturn(run func() []domain.ServerConfig) *MockStateRepository_Configs_Call {
	_c.Call.Return(run)
	return _c
}

// Current provides a mock function with given fields:
func (_m *MockStateRepository) Current() []domain.ServerState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Current")
	}

	var r0 []domain.ServerState
	if rf, ok := ret.Get(0).(func() []domain.ServerState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ServerState)
		}
	}

	return r0
}

// MockStateRepository_Current_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Current'
type MockStateRepository_Current_Call struct {
	*mock.Call
}

// Current is a helper method to define mock.On call
func (_e *MockStateRepository_Expecter) Current() *MockStateRepository_Current_Call {
	return &MockStateRepository_Current_Call{Call: _e.mock.On("Current")}
}

func (_c *MockStateRepository_Current_Call) Run(run func()) *MockStateRepository_Current_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateRepository_Current_Call) Return(_a0 []domain.ServerState) *MockStateRepository_Current_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateRepository_Current_Call) RunAndReturn(run func() []domain.ServerState) *MockStateRepository_Current_Call {
	_c.Call.Return(run)
	return _c
}

// ExecRaw provides a mock function with given fields: ctx, addr, password, cmd
func (_m *MockStateRepository) ExecRaw(ctx context.Context, addr string, password string, cmd string) (string, error) {
	ret := _m.Called(ctx, addr, password, cmd)

	if len(ret) == 0 {
		panic("no return value specified for ExecRaw")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, addr, password, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, addr, password, cmd)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, addr, password, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateRepository_ExecRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecRaw'
type MockStateRepository_ExecRaw_Call struct {
	*mock.Call
}

// ExecRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - addr string
//   - password string
//   - cmd string
func (_e *MockStateRepository_Expecter) ExecRaw(ctx interface{}, addr interface{}, password interface{}, cmd interface{}) *MockStateRepository_ExecRaw_Call {
	return &MockStateRepository_ExecRaw_Call{Call: _e.mock.On("ExecRaw", ctx, addr, password, cmd)}
}

func (_c *MockStateRepository_ExecRaw_Call) Run(run func(ctx context.Context, addr string, password string, cmd string)) *MockStateRepository_ExecRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStateRepository_ExecRaw_Call) Return(_a0 string, _a1 error) *MockStateRepository_ExecRaw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateRepository_ExecRaw_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *MockStateRepository_ExecRaw_Call {
	_c.Call.Return(run)
	return _c
}

// GetServer provides a mock function with given fields: serverID
func (_m *MockStateRepository) GetServer(serverID int) (domain.ServerConfig, error) {
	ret := _m.Called(serverID)

	if len(ret) == 0 {
		panic("no return value specified for GetServer")
	}

	var r0 domain.ServerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.ServerConfig, error)); ok {
		return rf(serverID)
	}
	if rf, ok := ret.Get(0).(func(int) domain.ServerConfig); ok {
		r0 = rf(serverID)
	} else {
		r0 = ret.Get(0).(domain.ServerConfig)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(serverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateRepository_GetServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServer'
type MockStateRepository_GetServer_Call struct {
	*mock.Call
}

// GetServer is a helper method to define mock.On call
//   - serverID int
func (_e *MockStateRepository_Expecter) GetServer(serverID interface{}) *MockStateRepository_GetServer_Call {
	return &MockStateRepository_GetServer_Call{Call: _e.mock.On("GetServer", serverID)}
}

func (_c *MockStateRepository_GetServer_Call) Run(run func(serverID int)) *MockStateRepository_GetServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockStateRepository_GetServer_Call) Return(_a0 domain.ServerConfig, _a1 error) *MockStateRepository_GetServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateRepository_GetServer_Call) RunAndReturn(run func(int) (domain.ServerConfig, error)) *MockStateRepository_GetServer_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockStateRepository) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockStateRepository_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockStateRepository_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStateRepository_Expecter) Start(ctx interface{}) *MockStateRepository_Start_Call {
	return &MockStateRepository_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockStateRepository_Start_Call) Run(run func(ctx context.Context)) *MockStateRepository_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStateRepository_Start_Call) Return() *MockStateRepository_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStateRepository_Start_Call) RunAndReturn(run func(context.Context)) *MockStateRepository_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: serverID, update
func (_m *MockStateRepository) Update(serverID int, update domain.PartialStateUpdate) error {
	ret := _m.Called(serverID, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain.PartialStateUpdate) error); ok {
		r0 = rf(serverID, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStateRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - serverID int
//   - update domain.PartialStateUpdate
func (_e *MockStateRepository_Expecter) Update(serverID interface{}, update interface{}) *MockStateRepository_Update_Call {
	return &MockStateRepository_Update_Call{Call: _e.mock.On("Update", serverID, update)}
}

func (_c *MockStateRepository_Update_Call) Run(run func(serverID int, update domain.PartialStateUpdate)) *MockStateRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(domain.PartialStateUpdate))
	})
	return _c
}

func (_c *MockStateRepository_Update_Call) Return(_a0 error) *MockStateRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateRepository_Update_Call) RunAndReturn(run func(int, domain.PartialStateUpdate) error) *MockStateRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateRepository creates a new instance of MockStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateRepository {
	mock := &MockStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
