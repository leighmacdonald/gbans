// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockAppealRepository is an autogenerated mock type for the AppealRepository type
type MockAppealRepository struct {
	mock.Mock
}

type MockAppealRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppealRepository) EXPECT() *MockAppealRepository_Expecter {
	return &MockAppealRepository_Expecter{mock: &_m.Mock}
}

// DropBanMessage provides a mock function with given fields: ctx, message
func (_m *MockAppealRepository) DropBanMessage(ctx context.Context, message *domain.BanAppealMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for DropBanMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanAppealMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppealRepository_DropBanMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropBanMessage'
type MockAppealRepository_DropBanMessage_Call struct {
	*mock.Call
}

// DropBanMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *domain.BanAppealMessage
func (_e *MockAppealRepository_Expecter) DropBanMessage(ctx interface{}, message interface{}) *MockAppealRepository_DropBanMessage_Call {
	return &MockAppealRepository_DropBanMessage_Call{Call: _e.mock.On("DropBanMessage", ctx, message)}
}

func (_c *MockAppealRepository_DropBanMessage_Call) Run(run func(ctx context.Context, message *domain.BanAppealMessage)) *MockAppealRepository_DropBanMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanAppealMessage))
	})
	return _c
}

func (_c *MockAppealRepository_DropBanMessage_Call) Return(_a0 error) *MockAppealRepository_DropBanMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppealRepository_DropBanMessage_Call) RunAndReturn(run func(context.Context, *domain.BanAppealMessage) error) *MockAppealRepository_DropBanMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppealsByActivity provides a mock function with given fields: ctx, opts
func (_m *MockAppealRepository) GetAppealsByActivity(ctx context.Context, opts domain.AppealQueryFilter) ([]domain.AppealOverview, int64, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAppealsByActivity")
	}

	var r0 []domain.AppealOverview
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppealQueryFilter) ([]domain.AppealOverview, int64, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppealQueryFilter) []domain.AppealOverview); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AppealOverview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.AppealQueryFilter) int64); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.AppealQueryFilter) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAppealRepository_GetAppealsByActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppealsByActivity'
type MockAppealRepository_GetAppealsByActivity_Call struct {
	*mock.Call
}

// GetAppealsByActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - opts domain.AppealQueryFilter
func (_e *MockAppealRepository_Expecter) GetAppealsByActivity(ctx interface{}, opts interface{}) *MockAppealRepository_GetAppealsByActivity_Call {
	return &MockAppealRepository_GetAppealsByActivity_Call{Call: _e.mock.On("GetAppealsByActivity", ctx, opts)}
}

func (_c *MockAppealRepository_GetAppealsByActivity_Call) Run(run func(ctx context.Context, opts domain.AppealQueryFilter)) *MockAppealRepository_GetAppealsByActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.AppealQueryFilter))
	})
	return _c
}

func (_c *MockAppealRepository_GetAppealsByActivity_Call) Return(_a0 []domain.AppealOverview, _a1 int64, _a2 error) *MockAppealRepository_GetAppealsByActivity_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAppealRepository_GetAppealsByActivity_Call) RunAndReturn(run func(context.Context, domain.AppealQueryFilter) ([]domain.AppealOverview, int64, error)) *MockAppealRepository_GetAppealsByActivity_Call {
	_c.Call.Return(run)
	return _c
}

// GetBanMessageByID provides a mock function with given fields: ctx, banMessageID
func (_m *MockAppealRepository) GetBanMessageByID(ctx context.Context, banMessageID int64) (domain.BanAppealMessage, error) {
	ret := _m.Called(ctx, banMessageID)

	if len(ret) == 0 {
		panic("no return value specified for GetBanMessageByID")
	}

	var r0 domain.BanAppealMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.BanAppealMessage, error)); ok {
		return rf(ctx, banMessageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.BanAppealMessage); ok {
		r0 = rf(ctx, banMessageID)
	} else {
		r0 = ret.Get(0).(domain.BanAppealMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, banMessageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppealRepository_GetBanMessageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBanMessageByID'
type MockAppealRepository_GetBanMessageByID_Call struct {
	*mock.Call
}

// GetBanMessageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - banMessageID int64
func (_e *MockAppealRepository_Expecter) GetBanMessageByID(ctx interface{}, banMessageID interface{}) *MockAppealRepository_GetBanMessageByID_Call {
	return &MockAppealRepository_GetBanMessageByID_Call{Call: _e.mock.On("GetBanMessageByID", ctx, banMessageID)}
}

func (_c *MockAppealRepository_GetBanMessageByID_Call) Run(run func(ctx context.Context, banMessageID int64)) *MockAppealRepository_GetBanMessageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAppealRepository_GetBanMessageByID_Call) Return(_a0 domain.BanAppealMessage, _a1 error) *MockAppealRepository_GetBanMessageByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppealRepository_GetBanMessageByID_Call) RunAndReturn(run func(context.Context, int64) (domain.BanAppealMessage, error)) *MockAppealRepository_GetBanMessageByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBanMessages provides a mock function with given fields: ctx, banID
func (_m *MockAppealRepository) GetBanMessages(ctx context.Context, banID int64) ([]domain.BanAppealMessage, error) {
	ret := _m.Called(ctx, banID)

	if len(ret) == 0 {
		panic("no return value specified for GetBanMessages")
	}

	var r0 []domain.BanAppealMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.BanAppealMessage, error)); ok {
		return rf(ctx, banID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.BanAppealMessage); ok {
		r0 = rf(ctx, banID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BanAppealMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, banID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppealRepository_GetBanMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBanMessages'
type MockAppealRepository_GetBanMessages_Call struct {
	*mock.Call
}

// GetBanMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - banID int64
func (_e *MockAppealRepository_Expecter) GetBanMessages(ctx interface{}, banID interface{}) *MockAppealRepository_GetBanMessages_Call {
	return &MockAppealRepository_GetBanMessages_Call{Call: _e.mock.On("GetBanMessages", ctx, banID)}
}

func (_c *MockAppealRepository_GetBanMessages_Call) Run(run func(ctx context.Context, banID int64)) *MockAppealRepository_GetBanMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAppealRepository_GetBanMessages_Call) Return(_a0 []domain.BanAppealMessage, _a1 error) *MockAppealRepository_GetBanMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppealRepository_GetBanMessages_Call) RunAndReturn(run func(context.Context, int64) ([]domain.BanAppealMessage, error)) *MockAppealRepository_GetBanMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBanMessage provides a mock function with given fields: ctx, message
func (_m *MockAppealRepository) SaveBanMessage(ctx context.Context, message *domain.BanAppealMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SaveBanMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanAppealMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppealRepository_SaveBanMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBanMessage'
type MockAppealRepository_SaveBanMessage_Call struct {
	*mock.Call
}

// SaveBanMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *domain.BanAppealMessage
func (_e *MockAppealRepository_Expecter) SaveBanMessage(ctx interface{}, message interface{}) *MockAppealRepository_SaveBanMessage_Call {
	return &MockAppealRepository_SaveBanMessage_Call{Call: _e.mock.On("SaveBanMessage", ctx, message)}
}

func (_c *MockAppealRepository_SaveBanMessage_Call) Run(run func(ctx context.Context, message *domain.BanAppealMessage)) *MockAppealRepository_SaveBanMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanAppealMessage))
	})
	return _c
}

func (_c *MockAppealRepository_SaveBanMessage_Call) Return(_a0 error) *MockAppealRepository_SaveBanMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppealRepository_SaveBanMessage_Call) RunAndReturn(run func(context.Context, *domain.BanAppealMessage) error) *MockAppealRepository_SaveBanMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppealRepository creates a new instance of MockAppealRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppealRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppealRepository {
	mock := &MockAppealRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
