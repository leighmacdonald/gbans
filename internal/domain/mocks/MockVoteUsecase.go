// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockVoteUsecase is an autogenerated mock type for the VoteUsecase type
type MockVoteUsecase struct {
	mock.Mock
}

type MockVoteUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteUsecase) EXPECT() *MockVoteUsecase_Expecter {
	return &MockVoteUsecase_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with given fields: ctx, filter
func (_m *MockVoteUsecase) Query(ctx context.Context, filter domain.VoteQueryFilter) ([]domain.VoteResult, int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []domain.VoteResult
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.VoteQueryFilter) ([]domain.VoteResult, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.VoteQueryFilter) []domain.VoteResult); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.VoteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.VoteQueryFilter) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.VoteQueryFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVoteUsecase_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockVoteUsecase_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.VoteQueryFilter
func (_e *MockVoteUsecase_Expecter) Query(ctx interface{}, filter interface{}) *MockVoteUsecase_Query_Call {
	return &MockVoteUsecase_Query_Call{Call: _e.mock.On("Query", ctx, filter)}
}

func (_c *MockVoteUsecase_Query_Call) Run(run func(ctx context.Context, filter domain.VoteQueryFilter)) *MockVoteUsecase_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.VoteQueryFilter))
	})
	return _c
}

func (_c *MockVoteUsecase_Query_Call) Return(_a0 []domain.VoteResult, _a1 int64, _a2 error) *MockVoteUsecase_Query_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVoteUsecase_Query_Call) RunAndReturn(run func(context.Context, domain.VoteQueryFilter) ([]domain.VoteResult, int64, error)) *MockVoteUsecase_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockVoteUsecase) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockVoteUsecase_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockVoteUsecase_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVoteUsecase_Expecter) Start(ctx interface{}) *MockVoteUsecase_Start_Call {
	return &MockVoteUsecase_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockVoteUsecase_Start_Call) Run(run func(ctx context.Context)) *MockVoteUsecase_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVoteUsecase_Start_Call) Return() *MockVoteUsecase_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteUsecase_Start_Call) RunAndReturn(run func(context.Context)) *MockVoteUsecase_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVoteUsecase creates a new instance of MockVoteUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteUsecase {
	mock := &MockVoteUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
