// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigRepository is an autogenerated mock type for the ConfigRepository type
type MockConfigRepository struct {
	mock.Mock
}

type MockConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigRepository) EXPECT() *MockConfigRepository_Expecter {
	return &MockConfigRepository_Expecter{mock: &_m.Mock}
}

// Config provides a mock function with given fields:
func (_m *MockConfigRepository) Config() domain.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 domain.Config
	if rf, ok := ret.Get(0).(func() domain.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Config)
	}

	return r0
}

// MockConfigRepository_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockConfigRepository_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *MockConfigRepository_Expecter) Config() *MockConfigRepository_Config_Call {
	return &MockConfigRepository_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *MockConfigRepository_Config_Call) Run(run func()) *MockConfigRepository_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigRepository_Config_Call) Return(_a0 domain.Config) *MockConfigRepository_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigRepository_Config_Call) RunAndReturn(run func() domain.Config) *MockConfigRepository_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: noFileOk
func (_m *MockConfigRepository) Read(noFileOk bool) error {
	ret := _m.Called(noFileOk)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(noFileOk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockConfigRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - noFileOk bool
func (_e *MockConfigRepository_Expecter) Read(noFileOk interface{}) *MockConfigRepository_Read_Call {
	return &MockConfigRepository_Read_Call{Call: _e.mock.On("Read", noFileOk)}
}

func (_c *MockConfigRepository_Read_Call) Run(run func(noFileOk bool)) *MockConfigRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockConfigRepository_Read_Call) Return(_a0 error) *MockConfigRepository_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigRepository_Read_Call) RunAndReturn(run func(bool) error) *MockConfigRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigRepository creates a new instance of MockConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigRepository {
	mock := &MockConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
