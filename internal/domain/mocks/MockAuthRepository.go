// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// DeletePersonAuth provides a mock function with given fields: ctx, authID
func (_m *MockAuthRepository) DeletePersonAuth(ctx context.Context, authID int64) error {
	ret := _m.Called(ctx, authID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, authID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_DeletePersonAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonAuth'
type MockAuthRepository_DeletePersonAuth_Call struct {
	*mock.Call
}

// DeletePersonAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - authID int64
func (_e *MockAuthRepository_Expecter) DeletePersonAuth(ctx interface{}, authID interface{}) *MockAuthRepository_DeletePersonAuth_Call {
	return &MockAuthRepository_DeletePersonAuth_Call{Call: _e.mock.On("DeletePersonAuth", ctx, authID)}
}

func (_c *MockAuthRepository_DeletePersonAuth_Call) Run(run func(ctx context.Context, authID int64)) *MockAuthRepository_DeletePersonAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAuthRepository_DeletePersonAuth_Call) Return(_a0 error) *MockAuthRepository_DeletePersonAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_DeletePersonAuth_Call) RunAndReturn(run func(context.Context, int64) error) *MockAuthRepository_DeletePersonAuth_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonAuthByFingerprint provides a mock function with given fields: ctx, fingerprint, auth
func (_m *MockAuthRepository) GetPersonAuthByFingerprint(ctx context.Context, fingerprint string, auth *domain.PersonAuth) error {
	ret := _m.Called(ctx, fingerprint, auth)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonAuthByFingerprint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PersonAuth) error); ok {
		r0 = rf(ctx, fingerprint, auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_GetPersonAuthByFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonAuthByFingerprint'
type MockAuthRepository_GetPersonAuthByFingerprint_Call struct {
	*mock.Call
}

// GetPersonAuthByFingerprint is a helper method to define mock.On call
//   - ctx context.Context
//   - fingerprint string
//   - auth *domain.PersonAuth
func (_e *MockAuthRepository_Expecter) GetPersonAuthByFingerprint(ctx interface{}, fingerprint interface{}, auth interface{}) *MockAuthRepository_GetPersonAuthByFingerprint_Call {
	return &MockAuthRepository_GetPersonAuthByFingerprint_Call{Call: _e.mock.On("GetPersonAuthByFingerprint", ctx, fingerprint, auth)}
}

func (_c *MockAuthRepository_GetPersonAuthByFingerprint_Call) Run(run func(ctx context.Context, fingerprint string, auth *domain.PersonAuth)) *MockAuthRepository_GetPersonAuthByFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PersonAuth))
	})
	return _c
}

func (_c *MockAuthRepository_GetPersonAuthByFingerprint_Call) Return(_a0 error) *MockAuthRepository_GetPersonAuthByFingerprint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_GetPersonAuthByFingerprint_Call) RunAndReturn(run func(context.Context, string, *domain.PersonAuth) error) *MockAuthRepository_GetPersonAuthByFingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// PrunePersonAuth provides a mock function with given fields: ctx
func (_m *MockAuthRepository) PrunePersonAuth(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrunePersonAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_PrunePersonAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrunePersonAuth'
type MockAuthRepository_PrunePersonAuth_Call struct {
	*mock.Call
}

// PrunePersonAuth is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthRepository_Expecter) PrunePersonAuth(ctx interface{}) *MockAuthRepository_PrunePersonAuth_Call {
	return &MockAuthRepository_PrunePersonAuth_Call{Call: _e.mock.On("PrunePersonAuth", ctx)}
}

func (_c *MockAuthRepository_PrunePersonAuth_Call) Run(run func(ctx context.Context)) *MockAuthRepository_PrunePersonAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthRepository_PrunePersonAuth_Call) Return(_a0 error) *MockAuthRepository_PrunePersonAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_PrunePersonAuth_Call) RunAndReturn(run func(context.Context) error) *MockAuthRepository_PrunePersonAuth_Call {
	_c.Call.Return(run)
	return _c
}

// SavePersonAuth provides a mock function with given fields: ctx, auth
func (_m *MockAuthRepository) SavePersonAuth(ctx context.Context, auth *domain.PersonAuth) error {
	ret := _m.Called(ctx, auth)

	if len(ret) == 0 {
		panic("no return value specified for SavePersonAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PersonAuth) error); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_SavePersonAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePersonAuth'
type MockAuthRepository_SavePersonAuth_Call struct {
	*mock.Call
}

// SavePersonAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - auth *domain.PersonAuth
func (_e *MockAuthRepository_Expecter) SavePersonAuth(ctx interface{}, auth interface{}) *MockAuthRepository_SavePersonAuth_Call {
	return &MockAuthRepository_SavePersonAuth_Call{Call: _e.mock.On("SavePersonAuth", ctx, auth)}
}

func (_c *MockAuthRepository_SavePersonAuth_Call) Run(run func(ctx context.Context, auth *domain.PersonAuth)) *MockAuthRepository_SavePersonAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PersonAuth))
	})
	return _c
}

func (_c *MockAuthRepository_SavePersonAuth_Call) Return(_a0 error) *MockAuthRepository_SavePersonAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_SavePersonAuth_Call) RunAndReturn(run func(context.Context, *domain.PersonAuth) error) *MockAuthRepository_SavePersonAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
