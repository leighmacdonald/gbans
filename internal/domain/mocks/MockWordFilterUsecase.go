// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockWordFilterUsecase is an autogenerated mock type for the WordFilterUsecase type
type MockWordFilterUsecase struct {
	mock.Mock
}

type MockWordFilterUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWordFilterUsecase) EXPECT() *MockWordFilterUsecase_Expecter {
	return &MockWordFilterUsecase_Expecter{mock: &_m.Mock}
}

// AddMessageFilterMatch provides a mock function with given fields: ctx, messageID, filterID
func (_m *MockWordFilterUsecase) AddMessageFilterMatch(ctx context.Context, messageID int64, filterID int64) error {
	ret := _m.Called(ctx, messageID, filterID)

	if len(ret) == 0 {
		panic("no return value specified for AddMessageFilterMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, messageID, filterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWordFilterUsecase_AddMessageFilterMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMessageFilterMatch'
type MockWordFilterUsecase_AddMessageFilterMatch_Call struct {
	*mock.Call
}

// AddMessageFilterMatch is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID int64
//   - filterID int64
func (_e *MockWordFilterUsecase_Expecter) AddMessageFilterMatch(ctx interface{}, messageID interface{}, filterID interface{}) *MockWordFilterUsecase_AddMessageFilterMatch_Call {
	return &MockWordFilterUsecase_AddMessageFilterMatch_Call{Call: _e.mock.On("AddMessageFilterMatch", ctx, messageID, filterID)}
}

func (_c *MockWordFilterUsecase_AddMessageFilterMatch_Call) Run(run func(ctx context.Context, messageID int64, filterID int64)) *MockWordFilterUsecase_AddMessageFilterMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockWordFilterUsecase_AddMessageFilterMatch_Call) Return(_a0 error) *MockWordFilterUsecase_AddMessageFilterMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWordFilterUsecase_AddMessageFilterMatch_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockWordFilterUsecase_AddMessageFilterMatch_Call {
	_c.Call.Return(run)
	return _c
}

// Check provides a mock function with given fields: query
func (_m *MockWordFilterUsecase) Check(query string) []domain.Filter {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 []domain.Filter
	if rf, ok := ret.Get(0).(func(string) []domain.Filter); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Filter)
		}
	}

	return r0
}

// MockWordFilterUsecase_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockWordFilterUsecase_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - query string
func (_e *MockWordFilterUsecase_Expecter) Check(query interface{}) *MockWordFilterUsecase_Check_Call {
	return &MockWordFilterUsecase_Check_Call{Call: _e.mock.On("Check", query)}
}

func (_c *MockWordFilterUsecase_Check_Call) Run(run func(query string)) *MockWordFilterUsecase_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWordFilterUsecase_Check_Call) Return(_a0 []domain.Filter) *MockWordFilterUsecase_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWordFilterUsecase_Check_Call) RunAndReturn(run func(string) []domain.Filter) *MockWordFilterUsecase_Check_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, user, filter
func (_m *MockWordFilterUsecase) Create(ctx context.Context, user domain.PersonInfo, filter domain.Filter) (domain.Filter, error) {
	ret := _m.Called(ctx, user, filter)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PersonInfo, domain.Filter) (domain.Filter, error)); ok {
		return rf(ctx, user, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.PersonInfo, domain.Filter) domain.Filter); ok {
		r0 = rf(ctx, user, filter)
	} else {
		r0 = ret.Get(0).(domain.Filter)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.PersonInfo, domain.Filter) error); ok {
		r1 = rf(ctx, user, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWordFilterUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockWordFilterUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.PersonInfo
//   - filter domain.Filter
func (_e *MockWordFilterUsecase_Expecter) Create(ctx interface{}, user interface{}, filter interface{}) *MockWordFilterUsecase_Create_Call {
	return &MockWordFilterUsecase_Create_Call{Call: _e.mock.On("Create", ctx, user, filter)}
}

func (_c *MockWordFilterUsecase_Create_Call) Run(run func(ctx context.Context, user domain.PersonInfo, filter domain.Filter)) *MockWordFilterUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PersonInfo), args[2].(domain.Filter))
	})
	return _c
}

func (_c *MockWordFilterUsecase_Create_Call) Return(_a0 domain.Filter, _a1 error) *MockWordFilterUsecase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWordFilterUsecase_Create_Call) RunAndReturn(run func(context.Context, domain.PersonInfo, domain.Filter) (domain.Filter, error)) *MockWordFilterUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DropFilter provides a mock function with given fields: ctx, filter
func (_m *MockWordFilterUsecase) DropFilter(ctx context.Context, filter domain.Filter) error {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for DropFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Filter) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWordFilterUsecase_DropFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropFilter'
type MockWordFilterUsecase_DropFilter_Call struct {
	*mock.Call
}

// DropFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.Filter
func (_e *MockWordFilterUsecase_Expecter) DropFilter(ctx interface{}, filter interface{}) *MockWordFilterUsecase_DropFilter_Call {
	return &MockWordFilterUsecase_DropFilter_Call{Call: _e.mock.On("DropFilter", ctx, filter)}
}

func (_c *MockWordFilterUsecase_DropFilter_Call) Run(run func(ctx context.Context, filter domain.Filter)) *MockWordFilterUsecase_DropFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Filter))
	})
	return _c
}

func (_c *MockWordFilterUsecase_DropFilter_Call) Return(_a0 error) *MockWordFilterUsecase_DropFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWordFilterUsecase_DropFilter_Call) RunAndReturn(run func(context.Context, domain.Filter) error) *MockWordFilterUsecase_DropFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: ctx, user, filterID, filter
func (_m *MockWordFilterUsecase) Edit(ctx context.Context, user domain.PersonInfo, filterID int64, filter domain.Filter) (domain.Filter, error) {
	ret := _m.Called(ctx, user, filterID, filter)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 domain.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PersonInfo, int64, domain.Filter) (domain.Filter, error)); ok {
		return rf(ctx, user, filterID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.PersonInfo, int64, domain.Filter) domain.Filter); ok {
		r0 = rf(ctx, user, filterID, filter)
	} else {
		r0 = ret.Get(0).(domain.Filter)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.PersonInfo, int64, domain.Filter) error); ok {
		r1 = rf(ctx, user, filterID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWordFilterUsecase_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type MockWordFilterUsecase_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.PersonInfo
//   - filterID int64
//   - filter domain.Filter
func (_e *MockWordFilterUsecase_Expecter) Edit(ctx interface{}, user interface{}, filterID interface{}, filter interface{}) *MockWordFilterUsecase_Edit_Call {
	return &MockWordFilterUsecase_Edit_Call{Call: _e.mock.On("Edit", ctx, user, filterID, filter)}
}

func (_c *MockWordFilterUsecase_Edit_Call) Run(run func(ctx context.Context, user domain.PersonInfo, filterID int64, filter domain.Filter)) *MockWordFilterUsecase_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PersonInfo), args[2].(int64), args[3].(domain.Filter))
	})
	return _c
}

func (_c *MockWordFilterUsecase_Edit_Call) Return(_a0 domain.Filter, _a1 error) *MockWordFilterUsecase_Edit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWordFilterUsecase_Edit_Call) RunAndReturn(run func(context.Context, domain.PersonInfo, int64, domain.Filter) (domain.Filter, error)) *MockWordFilterUsecase_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilterByID provides a mock function with given fields: ctx, filterID
func (_m *MockWordFilterUsecase) GetFilterByID(ctx context.Context, filterID int64) (domain.Filter, error) {
	ret := _m.Called(ctx, filterID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilterByID")
	}

	var r0 domain.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Filter, error)); ok {
		return rf(ctx, filterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Filter); ok {
		r0 = rf(ctx, filterID)
	} else {
		r0 = ret.Get(0).(domain.Filter)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, filterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWordFilterUsecase_GetFilterByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilterByID'
type MockWordFilterUsecase_GetFilterByID_Call struct {
	*mock.Call
}

// GetFilterByID is a helper method to define mock.On call
//   - ctx context.Context
//   - filterID int64
func (_e *MockWordFilterUsecase_Expecter) GetFilterByID(ctx interface{}, filterID interface{}) *MockWordFilterUsecase_GetFilterByID_Call {
	return &MockWordFilterUsecase_GetFilterByID_Call{Call: _e.mock.On("GetFilterByID", ctx, filterID)}
}

func (_c *MockWordFilterUsecase_GetFilterByID_Call) Run(run func(ctx context.Context, filterID int64)) *MockWordFilterUsecase_GetFilterByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockWordFilterUsecase_GetFilterByID_Call) Return(_a0 domain.Filter, _a1 error) *MockWordFilterUsecase_GetFilterByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWordFilterUsecase_GetFilterByID_Call) RunAndReturn(run func(context.Context, int64) (domain.Filter, error)) *MockWordFilterUsecase_GetFilterByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilters provides a mock function with given fields: ctx, opts
func (_m *MockWordFilterUsecase) GetFilters(ctx context.Context, opts domain.FiltersQueryFilter) ([]domain.Filter, int64, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetFilters")
	}

	var r0 []domain.Filter
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.FiltersQueryFilter) ([]domain.Filter, int64, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.FiltersQueryFilter) []domain.Filter); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.FiltersQueryFilter) int64); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.FiltersQueryFilter) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWordFilterUsecase_GetFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilters'
type MockWordFilterUsecase_GetFilters_Call struct {
	*mock.Call
}

// GetFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - opts domain.FiltersQueryFilter
func (_e *MockWordFilterUsecase_Expecter) GetFilters(ctx interface{}, opts interface{}) *MockWordFilterUsecase_GetFilters_Call {
	return &MockWordFilterUsecase_GetFilters_Call{Call: _e.mock.On("GetFilters", ctx, opts)}
}

func (_c *MockWordFilterUsecase_GetFilters_Call) Run(run func(ctx context.Context, opts domain.FiltersQueryFilter)) *MockWordFilterUsecase_GetFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.FiltersQueryFilter))
	})
	return _c
}

func (_c *MockWordFilterUsecase_GetFilters_Call) Return(_a0 []domain.Filter, _a1 int64, _a2 error) *MockWordFilterUsecase_GetFilters_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockWordFilterUsecase_GetFilters_Call) RunAndReturn(run func(context.Context, domain.FiltersQueryFilter) ([]domain.Filter, int64, error)) *MockWordFilterUsecase_GetFilters_Call {
	_c.Call.Return(run)
	return _c
}

// Import provides a mock function with given fields: ctx
func (_m *MockWordFilterUsecase) Import(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Import")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWordFilterUsecase_Import_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Import'
type MockWordFilterUsecase_Import_Call struct {
	*mock.Call
}

// Import is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWordFilterUsecase_Expecter) Import(ctx interface{}) *MockWordFilterUsecase_Import_Call {
	return &MockWordFilterUsecase_Import_Call{Call: _e.mock.On("Import", ctx)}
}

func (_c *MockWordFilterUsecase_Import_Call) Run(run func(ctx context.Context)) *MockWordFilterUsecase_Import_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWordFilterUsecase_Import_Call) Return(_a0 error) *MockWordFilterUsecase_Import_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWordFilterUsecase_Import_Call) RunAndReturn(run func(context.Context) error) *MockWordFilterUsecase_Import_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWordFilterUsecase creates a new instance of MockWordFilterUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWordFilterUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWordFilterUsecase {
	mock := &MockWordFilterUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
