// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockBanASNRepository is an autogenerated mock type for the BanASNRepository type
type MockBanASNRepository struct {
	mock.Mock
}

type MockBanASNRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBanASNRepository) EXPECT() *MockBanASNRepository_Expecter {
	return &MockBanASNRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, banASN
func (_m *MockBanASNRepository) Delete(ctx context.Context, banASN *domain.BanASN) error {
	ret := _m.Called(ctx, banASN)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanASN) error); ok {
		r0 = rf(ctx, banASN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanASNRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBanASNRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - banASN *domain.BanASN
func (_e *MockBanASNRepository_Expecter) Delete(ctx interface{}, banASN interface{}) *MockBanASNRepository_Delete_Call {
	return &MockBanASNRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, banASN)}
}

func (_c *MockBanASNRepository_Delete_Call) Run(run func(ctx context.Context, banASN *domain.BanASN)) *MockBanASNRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanASN))
	})
	return _c
}

func (_c *MockBanASNRepository_Delete_Call) Return(_a0 error) *MockBanASNRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanASNRepository_Delete_Call) RunAndReturn(run func(context.Context, *domain.BanASN) error) *MockBanASNRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Expired provides a mock function with given fields: ctx
func (_m *MockBanASNRepository) Expired(ctx context.Context) ([]domain.BanASN, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Expired")
	}

	var r0 []domain.BanASN
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.BanASN, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.BanASN); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BanASN)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanASNRepository_Expired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expired'
type MockBanASNRepository_Expired_Call struct {
	*mock.Call
}

// Expired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBanASNRepository_Expecter) Expired(ctx interface{}) *MockBanASNRepository_Expired_Call {
	return &MockBanASNRepository_Expired_Call{Call: _e.mock.On("Expired", ctx)}
}

func (_c *MockBanASNRepository_Expired_Call) Run(run func(ctx context.Context)) *MockBanASNRepository_Expired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBanASNRepository_Expired_Call) Return(_a0 []domain.BanASN, _a1 error) *MockBanASNRepository_Expired_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanASNRepository_Expired_Call) RunAndReturn(run func(context.Context) ([]domain.BanASN, error)) *MockBanASNRepository_Expired_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, filter
func (_m *MockBanASNRepository) Get(ctx context.Context, filter domain.ASNBansQueryFilter) ([]domain.BannedASNPerson, int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.BannedASNPerson
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ASNBansQueryFilter) ([]domain.BannedASNPerson, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ASNBansQueryFilter) []domain.BannedASNPerson); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BannedASNPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ASNBansQueryFilter) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.ASNBansQueryFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBanASNRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBanASNRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.ASNBansQueryFilter
func (_e *MockBanASNRepository_Expecter) Get(ctx interface{}, filter interface{}) *MockBanASNRepository_Get_Call {
	return &MockBanASNRepository_Get_Call{Call: _e.mock.On("Get", ctx, filter)}
}

func (_c *MockBanASNRepository_Get_Call) Run(run func(ctx context.Context, filter domain.ASNBansQueryFilter)) *MockBanASNRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ASNBansQueryFilter))
	})
	return _c
}

func (_c *MockBanASNRepository_Get_Call) Return(_a0 []domain.BannedASNPerson, _a1 int64, _a2 error) *MockBanASNRepository_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBanASNRepository_Get_Call) RunAndReturn(run func(context.Context, domain.ASNBansQueryFilter) ([]domain.BannedASNPerson, int64, error)) *MockBanASNRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByASN provides a mock function with given fields: ctx, asNum, banASN
func (_m *MockBanASNRepository) GetByASN(ctx context.Context, asNum int64, banASN *domain.BanASN) error {
	ret := _m.Called(ctx, asNum, banASN)

	if len(ret) == 0 {
		panic("no return value specified for GetByASN")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.BanASN) error); ok {
		r0 = rf(ctx, asNum, banASN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanASNRepository_GetByASN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByASN'
type MockBanASNRepository_GetByASN_Call struct {
	*mock.Call
}

// GetByASN is a helper method to define mock.On call
//   - ctx context.Context
//   - asNum int64
//   - banASN *domain.BanASN
func (_e *MockBanASNRepository_Expecter) GetByASN(ctx interface{}, asNum interface{}, banASN interface{}) *MockBanASNRepository_GetByASN_Call {
	return &MockBanASNRepository_GetByASN_Call{Call: _e.mock.On("GetByASN", ctx, asNum, banASN)}
}

func (_c *MockBanASNRepository_GetByASN_Call) Run(run func(ctx context.Context, asNum int64, banASN *domain.BanASN)) *MockBanASNRepository_GetByASN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.BanASN))
	})
	return _c
}

func (_c *MockBanASNRepository_GetByASN_Call) Return(_a0 error) *MockBanASNRepository_GetByASN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanASNRepository_GetByASN_Call) RunAndReturn(run func(context.Context, int64, *domain.BanASN) error) *MockBanASNRepository_GetByASN_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, banASN
func (_m *MockBanASNRepository) Save(ctx context.Context, banASN *domain.BanASN) error {
	ret := _m.Called(ctx, banASN)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanASN) error); ok {
		r0 = rf(ctx, banASN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanASNRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBanASNRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - banASN *domain.BanASN
func (_e *MockBanASNRepository_Expecter) Save(ctx interface{}, banASN interface{}) *MockBanASNRepository_Save_Call {
	return &MockBanASNRepository_Save_Call{Call: _e.mock.On("Save", ctx, banASN)}
}

func (_c *MockBanASNRepository_Save_Call) Run(run func(ctx context.Context, banASN *domain.BanASN)) *MockBanASNRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanASN))
	})
	return _c
}

func (_c *MockBanASNRepository_Save_Call) Return(_a0 error) *MockBanASNRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanASNRepository_Save_Call) RunAndReturn(run func(context.Context, *domain.BanASN) error) *MockBanASNRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBanASNRepository creates a new instance of MockBanASNRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBanASNRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBanASNRepository {
	mock := &MockBanASNRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
