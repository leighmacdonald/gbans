// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"
)

// MockDiscordOAuthUsecase is an autogenerated mock type for the DiscordOAuthUsecase type
type MockDiscordOAuthUsecase struct {
	mock.Mock
}

type MockDiscordOAuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscordOAuthUsecase) EXPECT() *MockDiscordOAuthUsecase_Expecter {
	return &MockDiscordOAuthUsecase_Expecter{mock: &_m.Mock}
}

// CreateStatefulLoginURL provides a mock function with given fields: steamID
func (_m *MockDiscordOAuthUsecase) CreateStatefulLoginURL(steamID steamid.SteamID) (string, error) {
	ret := _m.Called(steamID)

	if len(ret) == 0 {
		panic("no return value specified for CreateStatefulLoginURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(steamid.SteamID) (string, error)); ok {
		return rf(steamID)
	}
	if rf, ok := ret.Get(0).(func(steamid.SteamID) string); ok {
		r0 = rf(steamID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(steamid.SteamID) error); ok {
		r1 = rf(steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStatefulLoginURL'
type MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call struct {
	*mock.Call
}

// CreateStatefulLoginURL is a helper method to define mock.On call
//   - steamID steamid.SteamID
func (_e *MockDiscordOAuthUsecase_Expecter) CreateStatefulLoginURL(steamID interface{}) *MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call {
	return &MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call{Call: _e.mock.On("CreateStatefulLoginURL", steamID)}
}

func (_c *MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call) Run(run func(steamID steamid.SteamID)) *MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(steamid.SteamID))
	})
	return _c
}

func (_c *MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call) Return(_a0 string, _a1 error) *MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call) RunAndReturn(run func(steamid.SteamID) (string, error)) *MockDiscordOAuthUsecase_CreateStatefulLoginURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDetail provides a mock function with given fields: ctx, steamID
func (_m *MockDiscordOAuthUsecase) GetUserDetail(ctx context.Context, steamID steamid.SteamID) (domain.DiscordUserDetail, error) {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDetail")
	}

	var r0 domain.DiscordUserDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) (domain.DiscordUserDetail, error)); ok {
		return rf(ctx, steamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) domain.DiscordUserDetail); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Get(0).(domain.DiscordUserDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscordOAuthUsecase_GetUserDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDetail'
type MockDiscordOAuthUsecase_GetUserDetail_Call struct {
	*mock.Call
}

// GetUserDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockDiscordOAuthUsecase_Expecter) GetUserDetail(ctx interface{}, steamID interface{}) *MockDiscordOAuthUsecase_GetUserDetail_Call {
	return &MockDiscordOAuthUsecase_GetUserDetail_Call{Call: _e.mock.On("GetUserDetail", ctx, steamID)}
}

func (_c *MockDiscordOAuthUsecase_GetUserDetail_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockDiscordOAuthUsecase_GetUserDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockDiscordOAuthUsecase_GetUserDetail_Call) Return(_a0 domain.DiscordUserDetail, _a1 error) *MockDiscordOAuthUsecase_GetUserDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscordOAuthUsecase_GetUserDetail_Call) RunAndReturn(run func(context.Context, steamid.SteamID) (domain.DiscordUserDetail, error)) *MockDiscordOAuthUsecase_GetUserDetail_Call {
	_c.Call.Return(run)
	return _c
}

// HandleOAuthCode provides a mock function with given fields: ctx, code, state
func (_m *MockDiscordOAuthUsecase) HandleOAuthCode(ctx context.Context, code string, state string) error {
	ret := _m.Called(ctx, code, state)

	if len(ret) == 0 {
		panic("no return value specified for HandleOAuthCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, code, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscordOAuthUsecase_HandleOAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleOAuthCode'
type MockDiscordOAuthUsecase_HandleOAuthCode_Call struct {
	*mock.Call
}

// HandleOAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - state string
func (_e *MockDiscordOAuthUsecase_Expecter) HandleOAuthCode(ctx interface{}, code interface{}, state interface{}) *MockDiscordOAuthUsecase_HandleOAuthCode_Call {
	return &MockDiscordOAuthUsecase_HandleOAuthCode_Call{Call: _e.mock.On("HandleOAuthCode", ctx, code, state)}
}

func (_c *MockDiscordOAuthUsecase_HandleOAuthCode_Call) Run(run func(ctx context.Context, code string, state string)) *MockDiscordOAuthUsecase_HandleOAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDiscordOAuthUsecase_HandleOAuthCode_Call) Return(_a0 error) *MockDiscordOAuthUsecase_HandleOAuthCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscordOAuthUsecase_HandleOAuthCode_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDiscordOAuthUsecase_HandleOAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, steamID
func (_m *MockDiscordOAuthUsecase) Logout(ctx context.Context, steamID steamid.SteamID) error {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) error); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscordOAuthUsecase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockDiscordOAuthUsecase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockDiscordOAuthUsecase_Expecter) Logout(ctx interface{}, steamID interface{}) *MockDiscordOAuthUsecase_Logout_Call {
	return &MockDiscordOAuthUsecase_Logout_Call{Call: _e.mock.On("Logout", ctx, steamID)}
}

func (_c *MockDiscordOAuthUsecase_Logout_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockDiscordOAuthUsecase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockDiscordOAuthUsecase_Logout_Call) Return(_a0 error) *MockDiscordOAuthUsecase_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscordOAuthUsecase_Logout_Call) RunAndReturn(run func(context.Context, steamid.SteamID) error) *MockDiscordOAuthUsecase_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockDiscordOAuthUsecase) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockDiscordOAuthUsecase_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockDiscordOAuthUsecase_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDiscordOAuthUsecase_Expecter) Start(ctx interface{}) *MockDiscordOAuthUsecase_Start_Call {
	return &MockDiscordOAuthUsecase_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockDiscordOAuthUsecase_Start_Call) Run(run func(ctx context.Context)) *MockDiscordOAuthUsecase_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDiscordOAuthUsecase_Start_Call) Return() *MockDiscordOAuthUsecase_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDiscordOAuthUsecase_Start_Call) RunAndReturn(run func(context.Context)) *MockDiscordOAuthUsecase_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscordOAuthUsecase creates a new instance of MockDiscordOAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscordOAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscordOAuthUsecase {
	mock := &MockDiscordOAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
