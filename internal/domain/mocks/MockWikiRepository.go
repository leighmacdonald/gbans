// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockWikiRepository is an autogenerated mock type for the WikiRepository type
type MockWikiRepository struct {
	mock.Mock
}

type MockWikiRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWikiRepository) EXPECT() *MockWikiRepository_Expecter {
	return &MockWikiRepository_Expecter{mock: &_m.Mock}
}

// DeleteWikiPageBySlug provides a mock function with given fields: ctx, slug
func (_m *MockWikiRepository) DeleteWikiPageBySlug(ctx context.Context, slug string) error {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWikiPageBySlug")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWikiRepository_DeleteWikiPageBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWikiPageBySlug'
type MockWikiRepository_DeleteWikiPageBySlug_Call struct {
	*mock.Call
}

// DeleteWikiPageBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockWikiRepository_Expecter) DeleteWikiPageBySlug(ctx interface{}, slug interface{}) *MockWikiRepository_DeleteWikiPageBySlug_Call {
	return &MockWikiRepository_DeleteWikiPageBySlug_Call{Call: _e.mock.On("DeleteWikiPageBySlug", ctx, slug)}
}

func (_c *MockWikiRepository_DeleteWikiPageBySlug_Call) Run(run func(ctx context.Context, slug string)) *MockWikiRepository_DeleteWikiPageBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWikiRepository_DeleteWikiPageBySlug_Call) Return(_a0 error) *MockWikiRepository_DeleteWikiPageBySlug_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWikiRepository_DeleteWikiPageBySlug_Call) RunAndReturn(run func(context.Context, string) error) *MockWikiRepository_DeleteWikiPageBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetWikiPageBySlug provides a mock function with given fields: ctx, slug
func (_m *MockWikiRepository) GetWikiPageBySlug(ctx context.Context, slug string) (domain.WikiPage, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetWikiPageBySlug")
	}

	var r0 domain.WikiPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.WikiPage, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.WikiPage); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(domain.WikiPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWikiRepository_GetWikiPageBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWikiPageBySlug'
type MockWikiRepository_GetWikiPageBySlug_Call struct {
	*mock.Call
}

// GetWikiPageBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockWikiRepository_Expecter) GetWikiPageBySlug(ctx interface{}, slug interface{}) *MockWikiRepository_GetWikiPageBySlug_Call {
	return &MockWikiRepository_GetWikiPageBySlug_Call{Call: _e.mock.On("GetWikiPageBySlug", ctx, slug)}
}

func (_c *MockWikiRepository_GetWikiPageBySlug_Call) Run(run func(ctx context.Context, slug string)) *MockWikiRepository_GetWikiPageBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWikiRepository_GetWikiPageBySlug_Call) Return(_a0 domain.WikiPage, _a1 error) *MockWikiRepository_GetWikiPageBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWikiRepository_GetWikiPageBySlug_Call) RunAndReturn(run func(context.Context, string) (domain.WikiPage, error)) *MockWikiRepository_GetWikiPageBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// SaveWikiPage provides a mock function with given fields: ctx, page
func (_m *MockWikiRepository) SaveWikiPage(ctx context.Context, page *domain.WikiPage) error {
	ret := _m.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for SaveWikiPage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.WikiPage) error); ok {
		r0 = rf(ctx, page)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWikiRepository_SaveWikiPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveWikiPage'
type MockWikiRepository_SaveWikiPage_Call struct {
	*mock.Call
}

// SaveWikiPage is a helper method to define mock.On call
//   - ctx context.Context
//   - page *domain.WikiPage
func (_e *MockWikiRepository_Expecter) SaveWikiPage(ctx interface{}, page interface{}) *MockWikiRepository_SaveWikiPage_Call {
	return &MockWikiRepository_SaveWikiPage_Call{Call: _e.mock.On("SaveWikiPage", ctx, page)}
}

func (_c *MockWikiRepository_SaveWikiPage_Call) Run(run func(ctx context.Context, page *domain.WikiPage)) *MockWikiRepository_SaveWikiPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.WikiPage))
	})
	return _c
}

func (_c *MockWikiRepository_SaveWikiPage_Call) Return(_a0 error) *MockWikiRepository_SaveWikiPage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWikiRepository_SaveWikiPage_Call) RunAndReturn(run func(context.Context, *domain.WikiPage) error) *MockWikiRepository_SaveWikiPage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWikiRepository creates a new instance of MockWikiRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWikiRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWikiRepository {
	mock := &MockWikiRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
