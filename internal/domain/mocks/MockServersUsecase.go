// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockServersUsecase is an autogenerated mock type for the ServersUsecase type
type MockServersUsecase struct {
	mock.Mock
}

type MockServersUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServersUsecase) EXPECT() *MockServersUsecase_Expecter {
	return &MockServersUsecase_Expecter{mock: &_m.Mock}
}

// DropServer provides a mock function with given fields: ctx, serverID
func (_m *MockServersUsecase) DropServer(ctx context.Context, serverID int) error {
	ret := _m.Called(ctx, serverID)

	if len(ret) == 0 {
		panic("no return value specified for DropServer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, serverID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServersUsecase_DropServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropServer'
type MockServersUsecase_DropServer_Call struct {
	*mock.Call
}

// DropServer is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID int
func (_e *MockServersUsecase_Expecter) DropServer(ctx interface{}, serverID interface{}) *MockServersUsecase_DropServer_Call {
	return &MockServersUsecase_DropServer_Call{Call: _e.mock.On("DropServer", ctx, serverID)}
}

func (_c *MockServersUsecase_DropServer_Call) Run(run func(ctx context.Context, serverID int)) *MockServersUsecase_DropServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockServersUsecase_DropServer_Call) Return(_a0 error) *MockServersUsecase_DropServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServersUsecase_DropServer_Call) RunAndReturn(run func(context.Context, int) error) *MockServersUsecase_DropServer_Call {
	_c.Call.Return(run)
	return _c
}

// GetServer provides a mock function with given fields: ctx, serverID
func (_m *MockServersUsecase) GetServer(ctx context.Context, serverID int) (domain.Server, error) {
	ret := _m.Called(ctx, serverID)

	if len(ret) == 0 {
		panic("no return value specified for GetServer")
	}

	var r0 domain.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.Server, error)); ok {
		return rf(ctx, serverID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Server); ok {
		r0 = rf(ctx, serverID)
	} else {
		r0 = ret.Get(0).(domain.Server)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, serverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServersUsecase_GetServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServer'
type MockServersUsecase_GetServer_Call struct {
	*mock.Call
}

// GetServer is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID int
func (_e *MockServersUsecase_Expecter) GetServer(ctx interface{}, serverID interface{}) *MockServersUsecase_GetServer_Call {
	return &MockServersUsecase_GetServer_Call{Call: _e.mock.On("GetServer", ctx, serverID)}
}

func (_c *MockServersUsecase_GetServer_Call) Run(run func(ctx context.Context, serverID int)) *MockServersUsecase_GetServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockServersUsecase_GetServer_Call) Return(_a0 domain.Server, _a1 error) *MockServersUsecase_GetServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServersUsecase_GetServer_Call) RunAndReturn(run func(context.Context, int) (domain.Server, error)) *MockServersUsecase_GetServer_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerByName provides a mock function with given fields: ctx, serverName, server, disabledOk, deletedOk
func (_m *MockServersUsecase) GetServerByName(ctx context.Context, serverName string, server *domain.Server, disabledOk bool, deletedOk bool) error {
	ret := _m.Called(ctx, serverName, server, disabledOk, deletedOk)

	if len(ret) == 0 {
		panic("no return value specified for GetServerByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Server, bool, bool) error); ok {
		r0 = rf(ctx, serverName, server, disabledOk, deletedOk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServersUsecase_GetServerByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerByName'
type MockServersUsecase_GetServerByName_Call struct {
	*mock.Call
}

// GetServerByName is a helper method to define mock.On call
//   - ctx context.Context
//   - serverName string
//   - server *domain.Server
//   - disabledOk bool
//   - deletedOk bool
func (_e *MockServersUsecase_Expecter) GetServerByName(ctx interface{}, serverName interface{}, server interface{}, disabledOk interface{}, deletedOk interface{}) *MockServersUsecase_GetServerByName_Call {
	return &MockServersUsecase_GetServerByName_Call{Call: _e.mock.On("GetServerByName", ctx, serverName, server, disabledOk, deletedOk)}
}

func (_c *MockServersUsecase_GetServerByName_Call) Run(run func(ctx context.Context, serverName string, server *domain.Server, disabledOk bool, deletedOk bool)) *MockServersUsecase_GetServerByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.Server), args[3].(bool), args[4].(bool))
	})
	return _c
}

func (_c *MockServersUsecase_GetServerByName_Call) Return(_a0 error) *MockServersUsecase_GetServerByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServersUsecase_GetServerByName_Call) RunAndReturn(run func(context.Context, string, *domain.Server, bool, bool) error) *MockServersUsecase_GetServerByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerByPassword provides a mock function with given fields: ctx, serverPassword, server, disabledOk, deletedOk
func (_m *MockServersUsecase) GetServerByPassword(ctx context.Context, serverPassword string, server *domain.Server, disabledOk bool, deletedOk bool) error {
	ret := _m.Called(ctx, serverPassword, server, disabledOk, deletedOk)

	if len(ret) == 0 {
		panic("no return value specified for GetServerByPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Server, bool, bool) error); ok {
		r0 = rf(ctx, serverPassword, server, disabledOk, deletedOk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServersUsecase_GetServerByPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerByPassword'
type MockServersUsecase_GetServerByPassword_Call struct {
	*mock.Call
}

// GetServerByPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - serverPassword string
//   - server *domain.Server
//   - disabledOk bool
//   - deletedOk bool
func (_e *MockServersUsecase_Expecter) GetServerByPassword(ctx interface{}, serverPassword interface{}, server interface{}, disabledOk interface{}, deletedOk interface{}) *MockServersUsecase_GetServerByPassword_Call {
	return &MockServersUsecase_GetServerByPassword_Call{Call: _e.mock.On("GetServerByPassword", ctx, serverPassword, server, disabledOk, deletedOk)}
}

func (_c *MockServersUsecase_GetServerByPassword_Call) Run(run func(ctx context.Context, serverPassword string, server *domain.Server, disabledOk bool, deletedOk bool)) *MockServersUsecase_GetServerByPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.Server), args[3].(bool), args[4].(bool))
	})
	return _c
}

func (_c *MockServersUsecase_GetServerByPassword_Call) Return(_a0 error) *MockServersUsecase_GetServerByPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServersUsecase_GetServerByPassword_Call) RunAndReturn(run func(context.Context, string, *domain.Server, bool, bool) error) *MockServersUsecase_GetServerByPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerPermissions provides a mock function with given fields: ctx
func (_m *MockServersUsecase) GetServerPermissions(ctx context.Context) ([]domain.ServerPermission, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServerPermissions")
	}

	var r0 []domain.ServerPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ServerPermission, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ServerPermission); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ServerPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServersUsecase_GetServerPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerPermissions'
type MockServersUsecase_GetServerPermissions_Call struct {
	*mock.Call
}

// GetServerPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServersUsecase_Expecter) GetServerPermissions(ctx interface{}) *MockServersUsecase_GetServerPermissions_Call {
	return &MockServersUsecase_GetServerPermissions_Call{Call: _e.mock.On("GetServerPermissions", ctx)}
}

func (_c *MockServersUsecase_GetServerPermissions_Call) Run(run func(ctx context.Context)) *MockServersUsecase_GetServerPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServersUsecase_GetServerPermissions_Call) Return(_a0 []domain.ServerPermission, _a1 error) *MockServersUsecase_GetServerPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServersUsecase_GetServerPermissions_Call) RunAndReturn(run func(context.Context) ([]domain.ServerPermission, error)) *MockServersUsecase_GetServerPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetServers provides a mock function with given fields: ctx, filter
func (_m *MockServersUsecase) GetServers(ctx context.Context, filter domain.ServerQueryFilter) ([]domain.Server, int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetServers")
	}

	var r0 []domain.Server
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ServerQueryFilter) ([]domain.Server, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ServerQueryFilter) []domain.Server); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ServerQueryFilter) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.ServerQueryFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServersUsecase_GetServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServers'
type MockServersUsecase_GetServers_Call struct {
	*mock.Call
}

// GetServers is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.ServerQueryFilter
func (_e *MockServersUsecase_Expecter) GetServers(ctx interface{}, filter interface{}) *MockServersUsecase_GetServers_Call {
	return &MockServersUsecase_GetServers_Call{Call: _e.mock.On("GetServers", ctx, filter)}
}

func (_c *MockServersUsecase_GetServers_Call) Run(run func(ctx context.Context, filter domain.ServerQueryFilter)) *MockServersUsecase_GetServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ServerQueryFilter))
	})
	return _c
}

func (_c *MockServersUsecase_GetServers_Call) Return(_a0 []domain.Server, _a1 int64, _a2 error) *MockServersUsecase_GetServers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServersUsecase_GetServers_Call) RunAndReturn(run func(context.Context, domain.ServerQueryFilter) ([]domain.Server, int64, error)) *MockServersUsecase_GetServers_Call {
	_c.Call.Return(run)
	return _c
}

// SaveServer provides a mock function with given fields: ctx, server
func (_m *MockServersUsecase) SaveServer(ctx context.Context, server *domain.Server) error {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for SaveServer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Server) error); ok {
		r0 = rf(ctx, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServersUsecase_SaveServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveServer'
type MockServersUsecase_SaveServer_Call struct {
	*mock.Call
}

// SaveServer is a helper method to define mock.On call
//   - ctx context.Context
//   - server *domain.Server
func (_e *MockServersUsecase_Expecter) SaveServer(ctx interface{}, server interface{}) *MockServersUsecase_SaveServer_Call {
	return &MockServersUsecase_SaveServer_Call{Call: _e.mock.On("SaveServer", ctx, server)}
}

func (_c *MockServersUsecase_SaveServer_Call) Run(run func(ctx context.Context, server *domain.Server)) *MockServersUsecase_SaveServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Server))
	})
	return _c
}

func (_c *MockServersUsecase_SaveServer_Call) Return(_a0 error) *MockServersUsecase_SaveServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServersUsecase_SaveServer_Call) RunAndReturn(run func(context.Context, *domain.Server) error) *MockServersUsecase_SaveServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServersUsecase creates a new instance of MockServersUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServersUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServersUsecase {
	mock := &MockServersUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
