// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	fp "github.com/leighmacdonald/gbans/pkg/fp"

	logparse "github.com/leighmacdonald/gbans/pkg/logparse"

	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"

	uuid "github.com/gofrs/uuid/v5"
)

// MockMatchRepository is an autogenerated mock type for the MatchRepository type
type MockMatchRepository struct {
	mock.Mock
}

type MockMatchRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatchRepository) EXPECT() *MockMatchRepository_Expecter {
	return &MockMatchRepository_Expecter{mock: &_m.Mock}
}

// EndMatch provides a mock function with given fields: endTrigger
func (_m *MockMatchRepository) EndMatch(endTrigger domain.MatchTrigger) {
	_m.Called(endTrigger)
}

// MockMatchRepository_EndMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndMatch'
type MockMatchRepository_EndMatch_Call struct {
	*mock.Call
}

// EndMatch is a helper method to define mock.On call
//   - endTrigger domain.MatchTrigger
func (_e *MockMatchRepository_Expecter) EndMatch(endTrigger interface{}) *MockMatchRepository_EndMatch_Call {
	return &MockMatchRepository_EndMatch_Call{Call: _e.mock.On("EndMatch", endTrigger)}
}

func (_c *MockMatchRepository_EndMatch_Call) Run(run func(endTrigger domain.MatchTrigger)) *MockMatchRepository_EndMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.MatchTrigger))
	})
	return _c
}

func (_c *MockMatchRepository_EndMatch_Call) Return() *MockMatchRepository_EndMatch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMatchRepository_EndMatch_Call) RunAndReturn(run func(domain.MatchTrigger)) *MockMatchRepository_EndMatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetMapUsageStats provides a mock function with given fields: ctx
func (_m *MockMatchRepository) GetMapUsageStats(ctx context.Context) ([]domain.MapUseDetail, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMapUsageStats")
	}

	var r0 []domain.MapUseDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.MapUseDetail, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.MapUseDetail); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MapUseDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_GetMapUsageStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMapUsageStats'
type MockMatchRepository_GetMapUsageStats_Call struct {
	*mock.Call
}

// GetMapUsageStats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMatchRepository_Expecter) GetMapUsageStats(ctx interface{}) *MockMatchRepository_GetMapUsageStats_Call {
	return &MockMatchRepository_GetMapUsageStats_Call{Call: _e.mock.On("GetMapUsageStats", ctx)}
}

func (_c *MockMatchRepository_GetMapUsageStats_Call) Run(run func(ctx context.Context)) *MockMatchRepository_GetMapUsageStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMatchRepository_GetMapUsageStats_Call) Return(_a0 []domain.MapUseDetail, _a1 error) *MockMatchRepository_GetMapUsageStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_GetMapUsageStats_Call) RunAndReturn(run func(context.Context) ([]domain.MapUseDetail, error)) *MockMatchRepository_GetMapUsageStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetMatchIDFromServerID provides a mock function with given fields: serverID
func (_m *MockMatchRepository) GetMatchIDFromServerID(serverID int) (uuid.UUID, bool) {
	ret := _m.Called(serverID)

	if len(ret) == 0 {
		panic("no return value specified for GetMatchIDFromServerID")
	}

	var r0 uuid.UUID
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) (uuid.UUID, bool)); ok {
		return rf(serverID)
	}
	if rf, ok := ret.Get(0).(func(int) uuid.UUID); ok {
		r0 = rf(serverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(serverID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockMatchRepository_GetMatchIDFromServerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatchIDFromServerID'
type MockMatchRepository_GetMatchIDFromServerID_Call struct {
	*mock.Call
}

// GetMatchIDFromServerID is a helper method to define mock.On call
//   - serverID int
func (_e *MockMatchRepository_Expecter) GetMatchIDFromServerID(serverID interface{}) *MockMatchRepository_GetMatchIDFromServerID_Call {
	return &MockMatchRepository_GetMatchIDFromServerID_Call{Call: _e.mock.On("GetMatchIDFromServerID", serverID)}
}

func (_c *MockMatchRepository_GetMatchIDFromServerID_Call) Run(run func(serverID int)) *MockMatchRepository_GetMatchIDFromServerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockMatchRepository_GetMatchIDFromServerID_Call) Return(_a0 uuid.UUID, _a1 bool) *MockMatchRepository_GetMatchIDFromServerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_GetMatchIDFromServerID_Call) RunAndReturn(run func(int) (uuid.UUID, bool)) *MockMatchRepository_GetMatchIDFromServerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWeaponByID provides a mock function with given fields: ctx, weaponID, weapon
func (_m *MockMatchRepository) GetWeaponByID(ctx context.Context, weaponID int, weapon *domain.Weapon) error {
	ret := _m.Called(ctx, weaponID, weapon)

	if len(ret) == 0 {
		panic("no return value specified for GetWeaponByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.Weapon) error); ok {
		r0 = rf(ctx, weaponID, weapon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_GetWeaponByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeaponByID'
type MockMatchRepository_GetWeaponByID_Call struct {
	*mock.Call
}

// GetWeaponByID is a helper method to define mock.On call
//   - ctx context.Context
//   - weaponID int
//   - weapon *domain.Weapon
func (_e *MockMatchRepository_Expecter) GetWeaponByID(ctx interface{}, weaponID interface{}, weapon interface{}) *MockMatchRepository_GetWeaponByID_Call {
	return &MockMatchRepository_GetWeaponByID_Call{Call: _e.mock.On("GetWeaponByID", ctx, weaponID, weapon)}
}

func (_c *MockMatchRepository_GetWeaponByID_Call) Run(run func(ctx context.Context, weaponID int, weapon *domain.Weapon)) *MockMatchRepository_GetWeaponByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.Weapon))
	})
	return _c
}

func (_c *MockMatchRepository_GetWeaponByID_Call) Return(_a0 error) *MockMatchRepository_GetWeaponByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_GetWeaponByID_Call) RunAndReturn(run func(context.Context, int, *domain.Weapon) error) *MockMatchRepository_GetWeaponByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWeaponByKey provides a mock function with given fields: ctx, key, weapon
func (_m *MockMatchRepository) GetWeaponByKey(ctx context.Context, key logparse.Weapon, weapon *domain.Weapon) error {
	ret := _m.Called(ctx, key, weapon)

	if len(ret) == 0 {
		panic("no return value specified for GetWeaponByKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, logparse.Weapon, *domain.Weapon) error); ok {
		r0 = rf(ctx, key, weapon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_GetWeaponByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeaponByKey'
type MockMatchRepository_GetWeaponByKey_Call struct {
	*mock.Call
}

// GetWeaponByKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key logparse.Weapon
//   - weapon *domain.Weapon
func (_e *MockMatchRepository_Expecter) GetWeaponByKey(ctx interface{}, key interface{}, weapon interface{}) *MockMatchRepository_GetWeaponByKey_Call {
	return &MockMatchRepository_GetWeaponByKey_Call{Call: _e.mock.On("GetWeaponByKey", ctx, key, weapon)}
}

func (_c *MockMatchRepository_GetWeaponByKey_Call) Run(run func(ctx context.Context, key logparse.Weapon, weapon *domain.Weapon)) *MockMatchRepository_GetWeaponByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(logparse.Weapon), args[2].(*domain.Weapon))
	})
	return _c
}

func (_c *MockMatchRepository_GetWeaponByKey_Call) Return(_a0 error) *MockMatchRepository_GetWeaponByKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_GetWeaponByKey_Call) RunAndReturn(run func(context.Context, logparse.Weapon, *domain.Weapon) error) *MockMatchRepository_GetWeaponByKey_Call {
	_c.Call.Return(run)
	return _c
}

// HealersOverallByHealing provides a mock function with given fields: ctx, count
func (_m *MockMatchRepository) HealersOverallByHealing(ctx context.Context, count int) ([]domain.HealingOverallResult, error) {
	ret := _m.Called(ctx, count)

	if len(ret) == 0 {
		panic("no return value specified for HealersOverallByHealing")
	}

	var r0 []domain.HealingOverallResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.HealingOverallResult, error)); ok {
		return rf(ctx, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.HealingOverallResult); ok {
		r0 = rf(ctx, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.HealingOverallResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_HealersOverallByHealing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealersOverallByHealing'
type MockMatchRepository_HealersOverallByHealing_Call struct {
	*mock.Call
}

// HealersOverallByHealing is a helper method to define mock.On call
//   - ctx context.Context
//   - count int
func (_e *MockMatchRepository_Expecter) HealersOverallByHealing(ctx interface{}, count interface{}) *MockMatchRepository_HealersOverallByHealing_Call {
	return &MockMatchRepository_HealersOverallByHealing_Call{Call: _e.mock.On("HealersOverallByHealing", ctx, count)}
}

func (_c *MockMatchRepository_HealersOverallByHealing_Call) Run(run func(ctx context.Context, count int)) *MockMatchRepository_HealersOverallByHealing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockMatchRepository_HealersOverallByHealing_Call) Return(_a0 []domain.HealingOverallResult, _a1 error) *MockMatchRepository_HealersOverallByHealing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_HealersOverallByHealing_Call) RunAndReturn(run func(context.Context, int) ([]domain.HealingOverallResult, error)) *MockMatchRepository_HealersOverallByHealing_Call {
	_c.Call.Return(run)
	return _c
}

// LoadWeapons provides a mock function with given fields: ctx, weaponMap
func (_m *MockMatchRepository) LoadWeapons(ctx context.Context, weaponMap fp.MutexMap[logparse.Weapon, int]) error {
	ret := _m.Called(ctx, weaponMap)

	if len(ret) == 0 {
		panic("no return value specified for LoadWeapons")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fp.MutexMap[logparse.Weapon, int]) error); ok {
		r0 = rf(ctx, weaponMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_LoadWeapons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadWeapons'
type MockMatchRepository_LoadWeapons_Call struct {
	*mock.Call
}

// LoadWeapons is a helper method to define mock.On call
//   - ctx context.Context
//   - weaponMap fp.MutexMap[logparse.Weapon,int]
func (_e *MockMatchRepository_Expecter) LoadWeapons(ctx interface{}, weaponMap interface{}) *MockMatchRepository_LoadWeapons_Call {
	return &MockMatchRepository_LoadWeapons_Call{Call: _e.mock.On("LoadWeapons", ctx, weaponMap)}
}

func (_c *MockMatchRepository_LoadWeapons_Call) Run(run func(ctx context.Context, weaponMap fp.MutexMap[logparse.Weapon, int])) *MockMatchRepository_LoadWeapons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(fp.MutexMap[logparse.Weapon, int]))
	})
	return _c
}

func (_c *MockMatchRepository_LoadWeapons_Call) Return(_a0 error) *MockMatchRepository_LoadWeapons_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_LoadWeapons_Call) RunAndReturn(run func(context.Context, fp.MutexMap[logparse.Weapon, int]) error) *MockMatchRepository_LoadWeapons_Call {
	_c.Call.Return(run)
	return _c
}

// MatchGetByID provides a mock function with given fields: ctx, matchID, match
func (_m *MockMatchRepository) MatchGetByID(ctx context.Context, matchID uuid.UUID, match *domain.MatchResult) error {
	ret := _m.Called(ctx, matchID, match)

	if len(ret) == 0 {
		panic("no return value specified for MatchGetByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.MatchResult) error); ok {
		r0 = rf(ctx, matchID, match)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_MatchGetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchGetByID'
type MockMatchRepository_MatchGetByID_Call struct {
	*mock.Call
}

// MatchGetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - matchID uuid.UUID
//   - match *domain.MatchResult
func (_e *MockMatchRepository_Expecter) MatchGetByID(ctx interface{}, matchID interface{}, match interface{}) *MockMatchRepository_MatchGetByID_Call {
	return &MockMatchRepository_MatchGetByID_Call{Call: _e.mock.On("MatchGetByID", ctx, matchID, match)}
}

func (_c *MockMatchRepository_MatchGetByID_Call) Run(run func(ctx context.Context, matchID uuid.UUID, match *domain.MatchResult)) *MockMatchRepository_MatchGetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*domain.MatchResult))
	})
	return _c
}

func (_c *MockMatchRepository_MatchGetByID_Call) Return(_a0 error) *MockMatchRepository_MatchGetByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_MatchGetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID, *domain.MatchResult) error) *MockMatchRepository_MatchGetByID_Call {
	_c.Call.Return(run)
	return _c
}

// MatchSave provides a mock function with given fields: ctx, match, weaponMap
func (_m *MockMatchRepository) MatchSave(ctx context.Context, match *logparse.Match, weaponMap fp.MutexMap[logparse.Weapon, int]) error {
	ret := _m.Called(ctx, match, weaponMap)

	if len(ret) == 0 {
		panic("no return value specified for MatchSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logparse.Match, fp.MutexMap[logparse.Weapon, int]) error); ok {
		r0 = rf(ctx, match, weaponMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_MatchSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchSave'
type MockMatchRepository_MatchSave_Call struct {
	*mock.Call
}

// MatchSave is a helper method to define mock.On call
//   - ctx context.Context
//   - match *logparse.Match
//   - weaponMap fp.MutexMap[logparse.Weapon,int]
func (_e *MockMatchRepository_Expecter) MatchSave(ctx interface{}, match interface{}, weaponMap interface{}) *MockMatchRepository_MatchSave_Call {
	return &MockMatchRepository_MatchSave_Call{Call: _e.mock.On("MatchSave", ctx, match, weaponMap)}
}

func (_c *MockMatchRepository_MatchSave_Call) Run(run func(ctx context.Context, match *logparse.Match, weaponMap fp.MutexMap[logparse.Weapon, int])) *MockMatchRepository_MatchSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*logparse.Match), args[2].(fp.MutexMap[logparse.Weapon, int]))
	})
	return _c
}

func (_c *MockMatchRepository_MatchSave_Call) Return(_a0 error) *MockMatchRepository_MatchSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_MatchSave_Call) RunAndReturn(run func(context.Context, *logparse.Match, fp.MutexMap[logparse.Weapon, int]) error) *MockMatchRepository_MatchSave_Call {
	_c.Call.Return(run)
	return _c
}

// Matches provides a mock function with given fields: ctx, opts
func (_m *MockMatchRepository) Matches(ctx context.Context, opts domain.MatchesQueryOpts) ([]domain.MatchSummary, int64, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Matches")
	}

	var r0 []domain.MatchSummary
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.MatchesQueryOpts) ([]domain.MatchSummary, int64, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.MatchesQueryOpts) []domain.MatchSummary); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MatchSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.MatchesQueryOpts) int64); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.MatchesQueryOpts) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMatchRepository_Matches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Matches'
type MockMatchRepository_Matches_Call struct {
	*mock.Call
}

// Matches is a helper method to define mock.On call
//   - ctx context.Context
//   - opts domain.MatchesQueryOpts
func (_e *MockMatchRepository_Expecter) Matches(ctx interface{}, opts interface{}) *MockMatchRepository_Matches_Call {
	return &MockMatchRepository_Matches_Call{Call: _e.mock.On("Matches", ctx, opts)}
}

func (_c *MockMatchRepository_Matches_Call) Run(run func(ctx context.Context, opts domain.MatchesQueryOpts)) *MockMatchRepository_Matches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.MatchesQueryOpts))
	})
	return _c
}

func (_c *MockMatchRepository_Matches_Call) Return(_a0 []domain.MatchSummary, _a1 int64, _a2 error) *MockMatchRepository_Matches_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMatchRepository_Matches_Call) RunAndReturn(run func(context.Context, domain.MatchesQueryOpts) ([]domain.MatchSummary, int64, error)) *MockMatchRepository_Matches_Call {
	_c.Call.Return(run)
	return _c
}

// PlayerOverallClassStats provides a mock function with given fields: ctx, steamID
func (_m *MockMatchRepository) PlayerOverallClassStats(ctx context.Context, steamID steamid.SteamID) ([]domain.PlayerClassOverallResult, error) {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for PlayerOverallClassStats")
	}

	var r0 []domain.PlayerClassOverallResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) ([]domain.PlayerClassOverallResult, error)); ok {
		return rf(ctx, steamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) []domain.PlayerClassOverallResult); ok {
		r0 = rf(ctx, steamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PlayerClassOverallResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_PlayerOverallClassStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlayerOverallClassStats'
type MockMatchRepository_PlayerOverallClassStats_Call struct {
	*mock.Call
}

// PlayerOverallClassStats is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockMatchRepository_Expecter) PlayerOverallClassStats(ctx interface{}, steamID interface{}) *MockMatchRepository_PlayerOverallClassStats_Call {
	return &MockMatchRepository_PlayerOverallClassStats_Call{Call: _e.mock.On("PlayerOverallClassStats", ctx, steamID)}
}

func (_c *MockMatchRepository_PlayerOverallClassStats_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockMatchRepository_PlayerOverallClassStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockMatchRepository_PlayerOverallClassStats_Call) Return(_a0 []domain.PlayerClassOverallResult, _a1 error) *MockMatchRepository_PlayerOverallClassStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_PlayerOverallClassStats_Call) RunAndReturn(run func(context.Context, steamid.SteamID) ([]domain.PlayerClassOverallResult, error)) *MockMatchRepository_PlayerOverallClassStats_Call {
	_c.Call.Return(run)
	return _c
}

// PlayerOverallStats provides a mock function with given fields: ctx, steamID, por
func (_m *MockMatchRepository) PlayerOverallStats(ctx context.Context, steamID steamid.SteamID, por *domain.PlayerOverallResult) error {
	ret := _m.Called(ctx, steamID, por)

	if len(ret) == 0 {
		panic("no return value specified for PlayerOverallStats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, *domain.PlayerOverallResult) error); ok {
		r0 = rf(ctx, steamID, por)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_PlayerOverallStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlayerOverallStats'
type MockMatchRepository_PlayerOverallStats_Call struct {
	*mock.Call
}

// PlayerOverallStats is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
//   - por *domain.PlayerOverallResult
func (_e *MockMatchRepository_Expecter) PlayerOverallStats(ctx interface{}, steamID interface{}, por interface{}) *MockMatchRepository_PlayerOverallStats_Call {
	return &MockMatchRepository_PlayerOverallStats_Call{Call: _e.mock.On("PlayerOverallStats", ctx, steamID, por)}
}

func (_c *MockMatchRepository_PlayerOverallStats_Call) Run(run func(ctx context.Context, steamID steamid.SteamID, por *domain.PlayerOverallResult)) *MockMatchRepository_PlayerOverallStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID), args[2].(*domain.PlayerOverallResult))
	})
	return _c
}

func (_c *MockMatchRepository_PlayerOverallStats_Call) Return(_a0 error) *MockMatchRepository_PlayerOverallStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_PlayerOverallStats_Call) RunAndReturn(run func(context.Context, steamid.SteamID, *domain.PlayerOverallResult) error) *MockMatchRepository_PlayerOverallStats_Call {
	_c.Call.Return(run)
	return _c
}

// PlayerStats provides a mock function with given fields: ctx, steamID, stats
func (_m *MockMatchRepository) PlayerStats(ctx context.Context, steamID steamid.SteamID, stats *domain.PlayerStats) error {
	ret := _m.Called(ctx, steamID, stats)

	if len(ret) == 0 {
		panic("no return value specified for PlayerStats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, *domain.PlayerStats) error); ok {
		r0 = rf(ctx, steamID, stats)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_PlayerStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlayerStats'
type MockMatchRepository_PlayerStats_Call struct {
	*mock.Call
}

// PlayerStats is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
//   - stats *domain.PlayerStats
func (_e *MockMatchRepository_Expecter) PlayerStats(ctx interface{}, steamID interface{}, stats interface{}) *MockMatchRepository_PlayerStats_Call {
	return &MockMatchRepository_PlayerStats_Call{Call: _e.mock.On("PlayerStats", ctx, steamID, stats)}
}

func (_c *MockMatchRepository_PlayerStats_Call) Run(run func(ctx context.Context, steamID steamid.SteamID, stats *domain.PlayerStats)) *MockMatchRepository_PlayerStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID), args[2].(*domain.PlayerStats))
	})
	return _c
}

func (_c *MockMatchRepository_PlayerStats_Call) Return(_a0 error) *MockMatchRepository_PlayerStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_PlayerStats_Call) RunAndReturn(run func(context.Context, steamid.SteamID, *domain.PlayerStats) error) *MockMatchRepository_PlayerStats_Call {
	_c.Call.Return(run)
	return _c
}

// PlayersOverallByKills provides a mock function with given fields: ctx, count
func (_m *MockMatchRepository) PlayersOverallByKills(ctx context.Context, count int) ([]domain.PlayerWeaponResult, error) {
	ret := _m.Called(ctx, count)

	if len(ret) == 0 {
		panic("no return value specified for PlayersOverallByKills")
	}

	var r0 []domain.PlayerWeaponResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.PlayerWeaponResult, error)); ok {
		return rf(ctx, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.PlayerWeaponResult); ok {
		r0 = rf(ctx, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PlayerWeaponResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_PlayersOverallByKills_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlayersOverallByKills'
type MockMatchRepository_PlayersOverallByKills_Call struct {
	*mock.Call
}

// PlayersOverallByKills is a helper method to define mock.On call
//   - ctx context.Context
//   - count int
func (_e *MockMatchRepository_Expecter) PlayersOverallByKills(ctx interface{}, count interface{}) *MockMatchRepository_PlayersOverallByKills_Call {
	return &MockMatchRepository_PlayersOverallByKills_Call{Call: _e.mock.On("PlayersOverallByKills", ctx, count)}
}

func (_c *MockMatchRepository_PlayersOverallByKills_Call) Run(run func(ctx context.Context, count int)) *MockMatchRepository_PlayersOverallByKills_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockMatchRepository_PlayersOverallByKills_Call) Return(_a0 []domain.PlayerWeaponResult, _a1 error) *MockMatchRepository_PlayersOverallByKills_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_PlayersOverallByKills_Call) RunAndReturn(run func(context.Context, int) ([]domain.PlayerWeaponResult, error)) *MockMatchRepository_PlayersOverallByKills_Call {
	_c.Call.Return(run)
	return _c
}

// SaveWeapon provides a mock function with given fields: ctx, weapon
func (_m *MockMatchRepository) SaveWeapon(ctx context.Context, weapon *domain.Weapon) error {
	ret := _m.Called(ctx, weapon)

	if len(ret) == 0 {
		panic("no return value specified for SaveWeapon")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Weapon) error); ok {
		r0 = rf(ctx, weapon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_SaveWeapon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveWeapon'
type MockMatchRepository_SaveWeapon_Call struct {
	*mock.Call
}

// SaveWeapon is a helper method to define mock.On call
//   - ctx context.Context
//   - weapon *domain.Weapon
func (_e *MockMatchRepository_Expecter) SaveWeapon(ctx interface{}, weapon interface{}) *MockMatchRepository_SaveWeapon_Call {
	return &MockMatchRepository_SaveWeapon_Call{Call: _e.mock.On("SaveWeapon", ctx, weapon)}
}

func (_c *MockMatchRepository_SaveWeapon_Call) Run(run func(ctx context.Context, weapon *domain.Weapon)) *MockMatchRepository_SaveWeapon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Weapon))
	})
	return _c
}

func (_c *MockMatchRepository_SaveWeapon_Call) Return(_a0 error) *MockMatchRepository_SaveWeapon_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_SaveWeapon_Call) RunAndReturn(run func(context.Context, *domain.Weapon) error) *MockMatchRepository_SaveWeapon_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockMatchRepository) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockMatchRepository_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockMatchRepository_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMatchRepository_Expecter) Start(ctx interface{}) *MockMatchRepository_Start_Call {
	return &MockMatchRepository_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockMatchRepository_Start_Call) Run(run func(ctx context.Context)) *MockMatchRepository_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMatchRepository_Start_Call) Return() *MockMatchRepository_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMatchRepository_Start_Call) RunAndReturn(run func(context.Context)) *MockMatchRepository_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartMatch provides a mock function with given fields: startTrigger
func (_m *MockMatchRepository) StartMatch(startTrigger domain.MatchTrigger) {
	_m.Called(startTrigger)
}

// MockMatchRepository_StartMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartMatch'
type MockMatchRepository_StartMatch_Call struct {
	*mock.Call
}

// StartMatch is a helper method to define mock.On call
//   - startTrigger domain.MatchTrigger
func (_e *MockMatchRepository_Expecter) StartMatch(startTrigger interface{}) *MockMatchRepository_StartMatch_Call {
	return &MockMatchRepository_StartMatch_Call{Call: _e.mock.On("StartMatch", startTrigger)}
}

func (_c *MockMatchRepository_StartMatch_Call) Run(run func(startTrigger domain.MatchTrigger)) *MockMatchRepository_StartMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.MatchTrigger))
	})
	return _c
}

func (_c *MockMatchRepository_StartMatch_Call) Return() *MockMatchRepository_StartMatch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMatchRepository_StartMatch_Call) RunAndReturn(run func(domain.MatchTrigger)) *MockMatchRepository_StartMatch_Call {
	_c.Call.Return(run)
	return _c
}

// StatsPlayerClass provides a mock function with given fields: ctx, sid64
func (_m *MockMatchRepository) StatsPlayerClass(ctx context.Context, sid64 steamid.SteamID) (domain.PlayerClassStatsCollection, error) {
	ret := _m.Called(ctx, sid64)

	if len(ret) == 0 {
		panic("no return value specified for StatsPlayerClass")
	}

	var r0 domain.PlayerClassStatsCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) (domain.PlayerClassStatsCollection, error)); ok {
		return rf(ctx, sid64)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) domain.PlayerClassStatsCollection); ok {
		r0 = rf(ctx, sid64)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PlayerClassStatsCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, sid64)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_StatsPlayerClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsPlayerClass'
type MockMatchRepository_StatsPlayerClass_Call struct {
	*mock.Call
}

// StatsPlayerClass is a helper method to define mock.On call
//   - ctx context.Context
//   - sid64 steamid.SteamID
func (_e *MockMatchRepository_Expecter) StatsPlayerClass(ctx interface{}, sid64 interface{}) *MockMatchRepository_StatsPlayerClass_Call {
	return &MockMatchRepository_StatsPlayerClass_Call{Call: _e.mock.On("StatsPlayerClass", ctx, sid64)}
}

func (_c *MockMatchRepository_StatsPlayerClass_Call) Run(run func(ctx context.Context, sid64 steamid.SteamID)) *MockMatchRepository_StatsPlayerClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockMatchRepository_StatsPlayerClass_Call) Return(_a0 domain.PlayerClassStatsCollection, _a1 error) *MockMatchRepository_StatsPlayerClass_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_StatsPlayerClass_Call) RunAndReturn(run func(context.Context, steamid.SteamID) (domain.PlayerClassStatsCollection, error)) *MockMatchRepository_StatsPlayerClass_Call {
	_c.Call.Return(run)
	return _c
}

// StatsPlayerKillstreaks provides a mock function with given fields: ctx, sid64
func (_m *MockMatchRepository) StatsPlayerKillstreaks(ctx context.Context, sid64 steamid.SteamID) ([]domain.PlayerKillstreakStats, error) {
	ret := _m.Called(ctx, sid64)

	if len(ret) == 0 {
		panic("no return value specified for StatsPlayerKillstreaks")
	}

	var r0 []domain.PlayerKillstreakStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) ([]domain.PlayerKillstreakStats, error)); ok {
		return rf(ctx, sid64)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) []domain.PlayerKillstreakStats); ok {
		r0 = rf(ctx, sid64)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PlayerKillstreakStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, sid64)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_StatsPlayerKillstreaks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsPlayerKillstreaks'
type MockMatchRepository_StatsPlayerKillstreaks_Call struct {
	*mock.Call
}

// StatsPlayerKillstreaks is a helper method to define mock.On call
//   - ctx context.Context
//   - sid64 steamid.SteamID
func (_e *MockMatchRepository_Expecter) StatsPlayerKillstreaks(ctx interface{}, sid64 interface{}) *MockMatchRepository_StatsPlayerKillstreaks_Call {
	return &MockMatchRepository_StatsPlayerKillstreaks_Call{Call: _e.mock.On("StatsPlayerKillstreaks", ctx, sid64)}
}

func (_c *MockMatchRepository_StatsPlayerKillstreaks_Call) Run(run func(ctx context.Context, sid64 steamid.SteamID)) *MockMatchRepository_StatsPlayerKillstreaks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockMatchRepository_StatsPlayerKillstreaks_Call) Return(_a0 []domain.PlayerKillstreakStats, _a1 error) *MockMatchRepository_StatsPlayerKillstreaks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_StatsPlayerKillstreaks_Call) RunAndReturn(run func(context.Context, steamid.SteamID) ([]domain.PlayerKillstreakStats, error)) *MockMatchRepository_StatsPlayerKillstreaks_Call {
	_c.Call.Return(run)
	return _c
}

// StatsPlayerMedic provides a mock function with given fields: ctx, sid64
func (_m *MockMatchRepository) StatsPlayerMedic(ctx context.Context, sid64 steamid.SteamID) ([]domain.PlayerMedicStats, error) {
	ret := _m.Called(ctx, sid64)

	if len(ret) == 0 {
		panic("no return value specified for StatsPlayerMedic")
	}

	var r0 []domain.PlayerMedicStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) ([]domain.PlayerMedicStats, error)); ok {
		return rf(ctx, sid64)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) []domain.PlayerMedicStats); ok {
		r0 = rf(ctx, sid64)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PlayerMedicStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, sid64)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_StatsPlayerMedic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsPlayerMedic'
type MockMatchRepository_StatsPlayerMedic_Call struct {
	*mock.Call
}

// StatsPlayerMedic is a helper method to define mock.On call
//   - ctx context.Context
//   - sid64 steamid.SteamID
func (_e *MockMatchRepository_Expecter) StatsPlayerMedic(ctx interface{}, sid64 interface{}) *MockMatchRepository_StatsPlayerMedic_Call {
	return &MockMatchRepository_StatsPlayerMedic_Call{Call: _e.mock.On("StatsPlayerMedic", ctx, sid64)}
}

func (_c *MockMatchRepository_StatsPlayerMedic_Call) Run(run func(ctx context.Context, sid64 steamid.SteamID)) *MockMatchRepository_StatsPlayerMedic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockMatchRepository_StatsPlayerMedic_Call) Return(_a0 []domain.PlayerMedicStats, _a1 error) *MockMatchRepository_StatsPlayerMedic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_StatsPlayerMedic_Call) RunAndReturn(run func(context.Context, steamid.SteamID) ([]domain.PlayerMedicStats, error)) *MockMatchRepository_StatsPlayerMedic_Call {
	_c.Call.Return(run)
	return _c
}

// StatsPlayerWeapons provides a mock function with given fields: ctx, sid64
func (_m *MockMatchRepository) StatsPlayerWeapons(ctx context.Context, sid64 steamid.SteamID) ([]domain.PlayerWeaponStats, error) {
	ret := _m.Called(ctx, sid64)

	if len(ret) == 0 {
		panic("no return value specified for StatsPlayerWeapons")
	}

	var r0 []domain.PlayerWeaponStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) ([]domain.PlayerWeaponStats, error)); ok {
		return rf(ctx, sid64)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) []domain.PlayerWeaponStats); ok {
		r0 = rf(ctx, sid64)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PlayerWeaponStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, sid64)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_StatsPlayerWeapons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsPlayerWeapons'
type MockMatchRepository_StatsPlayerWeapons_Call struct {
	*mock.Call
}

// StatsPlayerWeapons is a helper method to define mock.On call
//   - ctx context.Context
//   - sid64 steamid.SteamID
func (_e *MockMatchRepository_Expecter) StatsPlayerWeapons(ctx interface{}, sid64 interface{}) *MockMatchRepository_StatsPlayerWeapons_Call {
	return &MockMatchRepository_StatsPlayerWeapons_Call{Call: _e.mock.On("StatsPlayerWeapons", ctx, sid64)}
}

func (_c *MockMatchRepository_StatsPlayerWeapons_Call) Run(run func(ctx context.Context, sid64 steamid.SteamID)) *MockMatchRepository_StatsPlayerWeapons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockMatchRepository_StatsPlayerWeapons_Call) Return(_a0 []domain.PlayerWeaponStats, _a1 error) *MockMatchRepository_StatsPlayerWeapons_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_StatsPlayerWeapons_Call) RunAndReturn(run func(context.Context, steamid.SteamID) ([]domain.PlayerWeaponStats, error)) *MockMatchRepository_StatsPlayerWeapons_Call {
	_c.Call.Return(run)
	return _c
}

// Weapons provides a mock function with given fields: ctx
func (_m *MockMatchRepository) Weapons(ctx context.Context) ([]domain.Weapon, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Weapons")
	}

	var r0 []domain.Weapon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Weapon, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Weapon); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Weapon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_Weapons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Weapons'
type MockMatchRepository_Weapons_Call struct {
	*mock.Call
}

// Weapons is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMatchRepository_Expecter) Weapons(ctx interface{}) *MockMatchRepository_Weapons_Call {
	return &MockMatchRepository_Weapons_Call{Call: _e.mock.On("Weapons", ctx)}
}

func (_c *MockMatchRepository_Weapons_Call) Run(run func(ctx context.Context)) *MockMatchRepository_Weapons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMatchRepository_Weapons_Call) Return(_a0 []domain.Weapon, _a1 error) *MockMatchRepository_Weapons_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_Weapons_Call) RunAndReturn(run func(context.Context) ([]domain.Weapon, error)) *MockMatchRepository_Weapons_Call {
	_c.Call.Return(run)
	return _c
}

// WeaponsOverall provides a mock function with given fields: ctx
func (_m *MockMatchRepository) WeaponsOverall(ctx context.Context) ([]domain.WeaponsOverallResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WeaponsOverall")
	}

	var r0 []domain.WeaponsOverallResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.WeaponsOverallResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.WeaponsOverallResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.WeaponsOverallResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_WeaponsOverall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WeaponsOverall'
type MockMatchRepository_WeaponsOverall_Call struct {
	*mock.Call
}

// WeaponsOverall is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMatchRepository_Expecter) WeaponsOverall(ctx interface{}) *MockMatchRepository_WeaponsOverall_Call {
	return &MockMatchRepository_WeaponsOverall_Call{Call: _e.mock.On("WeaponsOverall", ctx)}
}

func (_c *MockMatchRepository_WeaponsOverall_Call) Run(run func(ctx context.Context)) *MockMatchRepository_WeaponsOverall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMatchRepository_WeaponsOverall_Call) Return(_a0 []domain.WeaponsOverallResult, _a1 error) *MockMatchRepository_WeaponsOverall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_WeaponsOverall_Call) RunAndReturn(run func(context.Context) ([]domain.WeaponsOverallResult, error)) *MockMatchRepository_WeaponsOverall_Call {
	_c.Call.Return(run)
	return _c
}

// WeaponsOverallByPlayer provides a mock function with given fields: ctx, steamID
func (_m *MockMatchRepository) WeaponsOverallByPlayer(ctx context.Context, steamID steamid.SteamID) ([]domain.WeaponsOverallResult, error) {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for WeaponsOverallByPlayer")
	}

	var r0 []domain.WeaponsOverallResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) ([]domain.WeaponsOverallResult, error)); ok {
		return rf(ctx, steamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) []domain.WeaponsOverallResult); ok {
		r0 = rf(ctx, steamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.WeaponsOverallResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_WeaponsOverallByPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WeaponsOverallByPlayer'
type MockMatchRepository_WeaponsOverallByPlayer_Call struct {
	*mock.Call
}

// WeaponsOverallByPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockMatchRepository_Expecter) WeaponsOverallByPlayer(ctx interface{}, steamID interface{}) *MockMatchRepository_WeaponsOverallByPlayer_Call {
	return &MockMatchRepository_WeaponsOverallByPlayer_Call{Call: _e.mock.On("WeaponsOverallByPlayer", ctx, steamID)}
}

func (_c *MockMatchRepository_WeaponsOverallByPlayer_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockMatchRepository_WeaponsOverallByPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockMatchRepository_WeaponsOverallByPlayer_Call) Return(_a0 []domain.WeaponsOverallResult, _a1 error) *MockMatchRepository_WeaponsOverallByPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_WeaponsOverallByPlayer_Call) RunAndReturn(run func(context.Context, steamid.SteamID) ([]domain.WeaponsOverallResult, error)) *MockMatchRepository_WeaponsOverallByPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// WeaponsOverallTopPlayers provides a mock function with given fields: ctx, weaponID
func (_m *MockMatchRepository) WeaponsOverallTopPlayers(ctx context.Context, weaponID int) ([]domain.PlayerWeaponResult, error) {
	ret := _m.Called(ctx, weaponID)

	if len(ret) == 0 {
		panic("no return value specified for WeaponsOverallTopPlayers")
	}

	var r0 []domain.PlayerWeaponResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.PlayerWeaponResult, error)); ok {
		return rf(ctx, weaponID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.PlayerWeaponResult); ok {
		r0 = rf(ctx, weaponID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PlayerWeaponResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, weaponID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_WeaponsOverallTopPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WeaponsOverallTopPlayers'
type MockMatchRepository_WeaponsOverallTopPlayers_Call struct {
	*mock.Call
}

// WeaponsOverallTopPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - weaponID int
func (_e *MockMatchRepository_Expecter) WeaponsOverallTopPlayers(ctx interface{}, weaponID interface{}) *MockMatchRepository_WeaponsOverallTopPlayers_Call {
	return &MockMatchRepository_WeaponsOverallTopPlayers_Call{Call: _e.mock.On("WeaponsOverallTopPlayers", ctx, weaponID)}
}

func (_c *MockMatchRepository_WeaponsOverallTopPlayers_Call) Run(run func(ctx context.Context, weaponID int)) *MockMatchRepository_WeaponsOverallTopPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockMatchRepository_WeaponsOverallTopPlayers_Call) Return(_a0 []domain.PlayerWeaponResult, _a1 error) *MockMatchRepository_WeaponsOverallTopPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_WeaponsOverallTopPlayers_Call) RunAndReturn(run func(context.Context, int) ([]domain.PlayerWeaponResult, error)) *MockMatchRepository_WeaponsOverallTopPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMatchRepository creates a new instance of MockMatchRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatchRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatchRepository {
	mock := &MockMatchRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
