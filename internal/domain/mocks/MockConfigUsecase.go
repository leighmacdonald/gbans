// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigUsecase is an autogenerated mock type for the ConfigUsecase type
type MockConfigUsecase struct {
	mock.Mock
}

type MockConfigUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigUsecase) EXPECT() *MockConfigUsecase_Expecter {
	return &MockConfigUsecase_Expecter{mock: &_m.Mock}
}

// Config provides a mock function with given fields:
func (_m *MockConfigUsecase) Config() domain.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 domain.Config
	if rf, ok := ret.Get(0).(func() domain.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Config)
	}

	return r0
}

// MockConfigUsecase_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockConfigUsecase_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *MockConfigUsecase_Expecter) Config() *MockConfigUsecase_Config_Call {
	return &MockConfigUsecase_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *MockConfigUsecase_Config_Call) Run(run func()) *MockConfigUsecase_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigUsecase_Config_Call) Return(_a0 domain.Config) *MockConfigUsecase_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigUsecase_Config_Call) RunAndReturn(run func() domain.Config) *MockConfigUsecase_Config_Call {
	_c.Call.Return(run)
	return _c
}

// ExtURL provides a mock function with given fields: obj
func (_m *MockConfigUsecase) ExtURL(obj domain.LinkablePath) string {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for ExtURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.LinkablePath) string); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfigUsecase_ExtURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtURL'
type MockConfigUsecase_ExtURL_Call struct {
	*mock.Call
}

// ExtURL is a helper method to define mock.On call
//   - obj domain.LinkablePath
func (_e *MockConfigUsecase_Expecter) ExtURL(obj interface{}) *MockConfigUsecase_ExtURL_Call {
	return &MockConfigUsecase_ExtURL_Call{Call: _e.mock.On("ExtURL", obj)}
}

func (_c *MockConfigUsecase_ExtURL_Call) Run(run func(obj domain.LinkablePath)) *MockConfigUsecase_ExtURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.LinkablePath))
	})
	return _c
}

func (_c *MockConfigUsecase_ExtURL_Call) Return(_a0 string) *MockConfigUsecase_ExtURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigUsecase_ExtURL_Call) RunAndReturn(run func(domain.LinkablePath) string) *MockConfigUsecase_ExtURL_Call {
	_c.Call.Return(run)
	return _c
}

// ExtURLRaw provides a mock function with given fields: path, args
func (_m *MockConfigUsecase) ExtURLRaw(path string, args ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, path)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExtURLRaw")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(path, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfigUsecase_ExtURLRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtURLRaw'
type MockConfigUsecase_ExtURLRaw_Call struct {
	*mock.Call
}

// ExtURLRaw is a helper method to define mock.On call
//   - path string
//   - args ...interface{}
func (_e *MockConfigUsecase_Expecter) ExtURLRaw(path interface{}, args ...interface{}) *MockConfigUsecase_ExtURLRaw_Call {
	return &MockConfigUsecase_ExtURLRaw_Call{Call: _e.mock.On("ExtURLRaw",
		append([]interface{}{path}, args...)...)}
}

func (_c *MockConfigUsecase_ExtURLRaw_Call) Run(run func(path string, args ...interface{})) *MockConfigUsecase_ExtURLRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConfigUsecase_ExtURLRaw_Call) Return(_a0 string) *MockConfigUsecase_ExtURLRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigUsecase_ExtURLRaw_Call) RunAndReturn(run func(string, ...interface{}) string) *MockConfigUsecase_ExtURLRaw_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: ctx
func (_m *MockConfigUsecase) Init(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigUsecase_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockConfigUsecase_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigUsecase_Expecter) Init(ctx interface{}) *MockConfigUsecase_Init_Call {
	return &MockConfigUsecase_Init_Call{Call: _e.mock.On("Init", ctx)}
}

func (_c *MockConfigUsecase_Init_Call) Run(run func(ctx context.Context)) *MockConfigUsecase_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigUsecase_Init_Call) Return(_a0 error) *MockConfigUsecase_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigUsecase_Init_Call) RunAndReturn(run func(context.Context) error) *MockConfigUsecase_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Reload provides a mock function with given fields: ctx
func (_m *MockConfigUsecase) Reload(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigUsecase_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type MockConfigUsecase_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigUsecase_Expecter) Reload(ctx interface{}) *MockConfigUsecase_Reload_Call {
	return &MockConfigUsecase_Reload_Call{Call: _e.mock.On("Reload", ctx)}
}

func (_c *MockConfigUsecase_Reload_Call) Run(run func(ctx context.Context)) *MockConfigUsecase_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigUsecase_Reload_Call) Return(_a0 error) *MockConfigUsecase_Reload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigUsecase_Reload_Call) RunAndReturn(run func(context.Context) error) *MockConfigUsecase_Reload_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, config
func (_m *MockConfigUsecase) Write(ctx context.Context, config domain.Config) error {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Config) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigUsecase_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockConfigUsecase_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - config domain.Config
func (_e *MockConfigUsecase_Expecter) Write(ctx interface{}, config interface{}) *MockConfigUsecase_Write_Call {
	return &MockConfigUsecase_Write_Call{Call: _e.mock.On("Write", ctx, config)}
}

func (_c *MockConfigUsecase_Write_Call) Run(run func(ctx context.Context, config domain.Config)) *MockConfigUsecase_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Config))
	})
	return _c
}

func (_c *MockConfigUsecase_Write_Call) Return(_a0 error) *MockConfigUsecase_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigUsecase_Write_Call) RunAndReturn(run func(context.Context, domain.Config) error) *MockConfigUsecase_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigUsecase creates a new instance of MockConfigUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigUsecase {
	mock := &MockConfigUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
