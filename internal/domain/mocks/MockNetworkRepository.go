// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	ip2location "github.com/leighmacdonald/gbans/pkg/ip2location"

	mock "github.com/stretchr/testify/mock"

	net "net"

	steamid "github.com/leighmacdonald/steamid/v3/steamid"
)

// MockNetworkRepository is an autogenerated mock type for the NetworkRepository type
type MockNetworkRepository struct {
	mock.Mock
}

type MockNetworkRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkRepository) EXPECT() *MockNetworkRepository_Expecter {
	return &MockNetworkRepository_Expecter{mock: &_m.Mock}
}

// AddConnectionHistory provides a mock function with given fields: ctx, conn
func (_m *MockNetworkRepository) AddConnectionHistory(ctx context.Context, conn *domain.PersonConnection) error {
	ret := _m.Called(ctx, conn)

	if len(ret) == 0 {
		panic("no return value specified for AddConnectionHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PersonConnection) error); ok {
		r0 = rf(ctx, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkRepository_AddConnectionHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnectionHistory'
type MockNetworkRepository_AddConnectionHistory_Call struct {
	*mock.Call
}

// AddConnectionHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *domain.PersonConnection
func (_e *MockNetworkRepository_Expecter) AddConnectionHistory(ctx interface{}, conn interface{}) *MockNetworkRepository_AddConnectionHistory_Call {
	return &MockNetworkRepository_AddConnectionHistory_Call{Call: _e.mock.On("AddConnectionHistory", ctx, conn)}
}

func (_c *MockNetworkRepository_AddConnectionHistory_Call) Run(run func(ctx context.Context, conn *domain.PersonConnection)) *MockNetworkRepository_AddConnectionHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PersonConnection))
	})
	return _c
}

func (_c *MockNetworkRepository_AddConnectionHistory_Call) Return(_a0 error) *MockNetworkRepository_AddConnectionHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkRepository_AddConnectionHistory_Call) RunAndReturn(run func(context.Context, *domain.PersonConnection) error) *MockNetworkRepository_AddConnectionHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetASNRecordByIP provides a mock function with given fields: ctx, ipAddr, asnRecord
func (_m *MockNetworkRepository) GetASNRecordByIP(ctx context.Context, ipAddr net.IP, asnRecord *ip2location.ASNRecord) error {
	ret := _m.Called(ctx, ipAddr, asnRecord)

	if len(ret) == 0 {
		panic("no return value specified for GetASNRecordByIP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, net.IP, *ip2location.ASNRecord) error); ok {
		r0 = rf(ctx, ipAddr, asnRecord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkRepository_GetASNRecordByIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetASNRecordByIP'
type MockNetworkRepository_GetASNRecordByIP_Call struct {
	*mock.Call
}

// GetASNRecordByIP is a helper method to define mock.On call
//   - ctx context.Context
//   - ipAddr net.IP
//   - asnRecord *ip2location.ASNRecord
func (_e *MockNetworkRepository_Expecter) GetASNRecordByIP(ctx interface{}, ipAddr interface{}, asnRecord interface{}) *MockNetworkRepository_GetASNRecordByIP_Call {
	return &MockNetworkRepository_GetASNRecordByIP_Call{Call: _e.mock.On("GetASNRecordByIP", ctx, ipAddr, asnRecord)}
}

func (_c *MockNetworkRepository_GetASNRecordByIP_Call) Run(run func(ctx context.Context, ipAddr net.IP, asnRecord *ip2location.ASNRecord)) *MockNetworkRepository_GetASNRecordByIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.IP), args[2].(*ip2location.ASNRecord))
	})
	return _c
}

func (_c *MockNetworkRepository_GetASNRecordByIP_Call) Return(_a0 error) *MockNetworkRepository_GetASNRecordByIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkRepository_GetASNRecordByIP_Call) RunAndReturn(run func(context.Context, net.IP, *ip2location.ASNRecord) error) *MockNetworkRepository_GetASNRecordByIP_Call {
	_c.Call.Return(run)
	return _c
}

// GetASNRecordsByNum provides a mock function with given fields: ctx, asNum
func (_m *MockNetworkRepository) GetASNRecordsByNum(ctx context.Context, asNum int64) (ip2location.ASNRecords, error) {
	ret := _m.Called(ctx, asNum)

	if len(ret) == 0 {
		panic("no return value specified for GetASNRecordsByNum")
	}

	var r0 ip2location.ASNRecords
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (ip2location.ASNRecords, error)); ok {
		return rf(ctx, asNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) ip2location.ASNRecords); ok {
		r0 = rf(ctx, asNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ip2location.ASNRecords)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, asNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkRepository_GetASNRecordsByNum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetASNRecordsByNum'
type MockNetworkRepository_GetASNRecordsByNum_Call struct {
	*mock.Call
}

// GetASNRecordsByNum is a helper method to define mock.On call
//   - ctx context.Context
//   - asNum int64
func (_e *MockNetworkRepository_Expecter) GetASNRecordsByNum(ctx interface{}, asNum interface{}) *MockNetworkRepository_GetASNRecordsByNum_Call {
	return &MockNetworkRepository_GetASNRecordsByNum_Call{Call: _e.mock.On("GetASNRecordsByNum", ctx, asNum)}
}

func (_c *MockNetworkRepository_GetASNRecordsByNum_Call) Run(run func(ctx context.Context, asNum int64)) *MockNetworkRepository_GetASNRecordsByNum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockNetworkRepository_GetASNRecordsByNum_Call) Return(_a0 ip2location.ASNRecords, _a1 error) *MockNetworkRepository_GetASNRecordsByNum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkRepository_GetASNRecordsByNum_Call) RunAndReturn(run func(context.Context, int64) (ip2location.ASNRecords, error)) *MockNetworkRepository_GetASNRecordsByNum_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocationRecord provides a mock function with given fields: ctx, ipAddr, record
func (_m *MockNetworkRepository) GetLocationRecord(ctx context.Context, ipAddr net.IP, record *ip2location.LocationRecord) error {
	ret := _m.Called(ctx, ipAddr, record)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, net.IP, *ip2location.LocationRecord) error); ok {
		r0 = rf(ctx, ipAddr, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkRepository_GetLocationRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationRecord'
type MockNetworkRepository_GetLocationRecord_Call struct {
	*mock.Call
}

// GetLocationRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - ipAddr net.IP
//   - record *ip2location.LocationRecord
func (_e *MockNetworkRepository_Expecter) GetLocationRecord(ctx interface{}, ipAddr interface{}, record interface{}) *MockNetworkRepository_GetLocationRecord_Call {
	return &MockNetworkRepository_GetLocationRecord_Call{Call: _e.mock.On("GetLocationRecord", ctx, ipAddr, record)}
}

func (_c *MockNetworkRepository_GetLocationRecord_Call) Run(run func(ctx context.Context, ipAddr net.IP, record *ip2location.LocationRecord)) *MockNetworkRepository_GetLocationRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.IP), args[2].(*ip2location.LocationRecord))
	})
	return _c
}

func (_c *MockNetworkRepository_GetLocationRecord_Call) Return(_a0 error) *MockNetworkRepository_GetLocationRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkRepository_GetLocationRecord_Call) RunAndReturn(run func(context.Context, net.IP, *ip2location.LocationRecord) error) *MockNetworkRepository_GetLocationRecord_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonIPHistory provides a mock function with given fields: ctx, sid64, limit
func (_m *MockNetworkRepository) GetPersonIPHistory(ctx context.Context, sid64 steamid.SID64, limit uint64) (domain.PersonConnections, error) {
	ret := _m.Called(ctx, sid64, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonIPHistory")
	}

	var r0 domain.PersonConnections
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SID64, uint64) (domain.PersonConnections, error)); ok {
		return rf(ctx, sid64, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SID64, uint64) domain.PersonConnections); ok {
		r0 = rf(ctx, sid64, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PersonConnections)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SID64, uint64) error); ok {
		r1 = rf(ctx, sid64, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkRepository_GetPersonIPHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonIPHistory'
type MockNetworkRepository_GetPersonIPHistory_Call struct {
	*mock.Call
}

// GetPersonIPHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - sid64 steamid.SID64
//   - limit uint64
func (_e *MockNetworkRepository_Expecter) GetPersonIPHistory(ctx interface{}, sid64 interface{}, limit interface{}) *MockNetworkRepository_GetPersonIPHistory_Call {
	return &MockNetworkRepository_GetPersonIPHistory_Call{Call: _e.mock.On("GetPersonIPHistory", ctx, sid64, limit)}
}

func (_c *MockNetworkRepository_GetPersonIPHistory_Call) Run(run func(ctx context.Context, sid64 steamid.SID64, limit uint64)) *MockNetworkRepository_GetPersonIPHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SID64), args[2].(uint64))
	})
	return _c
}

func (_c *MockNetworkRepository_GetPersonIPHistory_Call) Return(_a0 domain.PersonConnections, _a1 error) *MockNetworkRepository_GetPersonIPHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkRepository_GetPersonIPHistory_Call) RunAndReturn(run func(context.Context, steamid.SID64, uint64) (domain.PersonConnections, error)) *MockNetworkRepository_GetPersonIPHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayerMostRecentIP provides a mock function with given fields: ctx, steamID
func (_m *MockNetworkRepository) GetPlayerMostRecentIP(ctx context.Context, steamID steamid.SID64) net.IP {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayerMostRecentIP")
	}

	var r0 net.IP
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SID64) net.IP); ok {
		r0 = rf(ctx, steamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	return r0
}

// MockNetworkRepository_GetPlayerMostRecentIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayerMostRecentIP'
type MockNetworkRepository_GetPlayerMostRecentIP_Call struct {
	*mock.Call
}

// GetPlayerMostRecentIP is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SID64
func (_e *MockNetworkRepository_Expecter) GetPlayerMostRecentIP(ctx interface{}, steamID interface{}) *MockNetworkRepository_GetPlayerMostRecentIP_Call {
	return &MockNetworkRepository_GetPlayerMostRecentIP_Call{Call: _e.mock.On("GetPlayerMostRecentIP", ctx, steamID)}
}

func (_c *MockNetworkRepository_GetPlayerMostRecentIP_Call) Run(run func(ctx context.Context, steamID steamid.SID64)) *MockNetworkRepository_GetPlayerMostRecentIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SID64))
	})
	return _c
}

func (_c *MockNetworkRepository_GetPlayerMostRecentIP_Call) Return(_a0 net.IP) *MockNetworkRepository_GetPlayerMostRecentIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkRepository_GetPlayerMostRecentIP_Call) RunAndReturn(run func(context.Context, steamid.SID64) net.IP) *MockNetworkRepository_GetPlayerMostRecentIP_Call {
	_c.Call.Return(run)
	return _c
}

// GetProxyRecord provides a mock function with given fields: ctx, ipAddr, proxyRecord
func (_m *MockNetworkRepository) GetProxyRecord(ctx context.Context, ipAddr net.IP, proxyRecord *ip2location.ProxyRecord) error {
	ret := _m.Called(ctx, ipAddr, proxyRecord)

	if len(ret) == 0 {
		panic("no return value specified for GetProxyRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, net.IP, *ip2location.ProxyRecord) error); ok {
		r0 = rf(ctx, ipAddr, proxyRecord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkRepository_GetProxyRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProxyRecord'
type MockNetworkRepository_GetProxyRecord_Call struct {
	*mock.Call
}

// GetProxyRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - ipAddr net.IP
//   - proxyRecord *ip2location.ProxyRecord
func (_e *MockNetworkRepository_Expecter) GetProxyRecord(ctx interface{}, ipAddr interface{}, proxyRecord interface{}) *MockNetworkRepository_GetProxyRecord_Call {
	return &MockNetworkRepository_GetProxyRecord_Call{Call: _e.mock.On("GetProxyRecord", ctx, ipAddr, proxyRecord)}
}

func (_c *MockNetworkRepository_GetProxyRecord_Call) Run(run func(ctx context.Context, ipAddr net.IP, proxyRecord *ip2location.ProxyRecord)) *MockNetworkRepository_GetProxyRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.IP), args[2].(*ip2location.ProxyRecord))
	})
	return _c
}

func (_c *MockNetworkRepository_GetProxyRecord_Call) Return(_a0 error) *MockNetworkRepository_GetProxyRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkRepository_GetProxyRecord_Call) RunAndReturn(run func(context.Context, net.IP, *ip2location.ProxyRecord) error) *MockNetworkRepository_GetProxyRecord_Call {
	_c.Call.Return(run)
	return _c
}

// GetSteamIDsAtIP provides a mock function with given fields: ctx, ipNet
func (_m *MockNetworkRepository) GetSteamIDsAtIP(ctx context.Context, ipNet *net.IPNet) (steamid.Collection, error) {
	ret := _m.Called(ctx, ipNet)

	if len(ret) == 0 {
		panic("no return value specified for GetSteamIDsAtIP")
	}

	var r0 steamid.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *net.IPNet) (steamid.Collection, error)); ok {
		return rf(ctx, ipNet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *net.IPNet) steamid.Collection); ok {
		r0 = rf(ctx, ipNet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(steamid.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *net.IPNet) error); ok {
		r1 = rf(ctx, ipNet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkRepository_GetSteamIDsAtIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSteamIDsAtIP'
type MockNetworkRepository_GetSteamIDsAtIP_Call struct {
	*mock.Call
}

// GetSteamIDsAtIP is a helper method to define mock.On call
//   - ctx context.Context
//   - ipNet *net.IPNet
func (_e *MockNetworkRepository_Expecter) GetSteamIDsAtIP(ctx interface{}, ipNet interface{}) *MockNetworkRepository_GetSteamIDsAtIP_Call {
	return &MockNetworkRepository_GetSteamIDsAtIP_Call{Call: _e.mock.On("GetSteamIDsAtIP", ctx, ipNet)}
}

func (_c *MockNetworkRepository_GetSteamIDsAtIP_Call) Run(run func(ctx context.Context, ipNet *net.IPNet)) *MockNetworkRepository_GetSteamIDsAtIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*net.IPNet))
	})
	return _c
}

func (_c *MockNetworkRepository_GetSteamIDsAtIP_Call) Return(_a0 steamid.Collection, _a1 error) *MockNetworkRepository_GetSteamIDsAtIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkRepository_GetSteamIDsAtIP_Call) RunAndReturn(run func(context.Context, *net.IPNet) (steamid.Collection, error)) *MockNetworkRepository_GetSteamIDsAtIP_Call {
	_c.Call.Return(run)
	return _c
}

// InsertBlockListData provides a mock function with given fields: ctx, blockListData
func (_m *MockNetworkRepository) InsertBlockListData(ctx context.Context, blockListData *ip2location.BlockListData) error {
	ret := _m.Called(ctx, blockListData)

	if len(ret) == 0 {
		panic("no return value specified for InsertBlockListData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ip2location.BlockListData) error); ok {
		r0 = rf(ctx, blockListData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkRepository_InsertBlockListData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertBlockListData'
type MockNetworkRepository_InsertBlockListData_Call struct {
	*mock.Call
}

// InsertBlockListData is a helper method to define mock.On call
//   - ctx context.Context
//   - blockListData *ip2location.BlockListData
func (_e *MockNetworkRepository_Expecter) InsertBlockListData(ctx interface{}, blockListData interface{}) *MockNetworkRepository_InsertBlockListData_Call {
	return &MockNetworkRepository_InsertBlockListData_Call{Call: _e.mock.On("InsertBlockListData", ctx, blockListData)}
}

func (_c *MockNetworkRepository_InsertBlockListData_Call) Run(run func(ctx context.Context, blockListData *ip2location.BlockListData)) *MockNetworkRepository_InsertBlockListData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ip2location.BlockListData))
	})
	return _c
}

func (_c *MockNetworkRepository_InsertBlockListData_Call) Return(_a0 error) *MockNetworkRepository_InsertBlockListData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkRepository_InsertBlockListData_Call) RunAndReturn(run func(context.Context, *ip2location.BlockListData) error) *MockNetworkRepository_InsertBlockListData_Call {
	_c.Call.Return(run)
	return _c
}

// QueryConnectionHistory provides a mock function with given fields: ctx, opts
func (_m *MockNetworkRepository) QueryConnectionHistory(ctx context.Context, opts domain.ConnectionHistoryQueryFilter) ([]domain.PersonConnection, int64, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for QueryConnectionHistory")
	}

	var r0 []domain.PersonConnection
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ConnectionHistoryQueryFilter) ([]domain.PersonConnection, int64, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ConnectionHistoryQueryFilter) []domain.PersonConnection); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PersonConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ConnectionHistoryQueryFilter) int64); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.ConnectionHistoryQueryFilter) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNetworkRepository_QueryConnectionHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryConnectionHistory'
type MockNetworkRepository_QueryConnectionHistory_Call struct {
	*mock.Call
}

// QueryConnectionHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - opts domain.ConnectionHistoryQueryFilter
func (_e *MockNetworkRepository_Expecter) QueryConnectionHistory(ctx interface{}, opts interface{}) *MockNetworkRepository_QueryConnectionHistory_Call {
	return &MockNetworkRepository_QueryConnectionHistory_Call{Call: _e.mock.On("QueryConnectionHistory", ctx, opts)}
}

func (_c *MockNetworkRepository_QueryConnectionHistory_Call) Run(run func(ctx context.Context, opts domain.ConnectionHistoryQueryFilter)) *MockNetworkRepository_QueryConnectionHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ConnectionHistoryQueryFilter))
	})
	return _c
}

func (_c *MockNetworkRepository_QueryConnectionHistory_Call) Return(_a0 []domain.PersonConnection, _a1 int64, _a2 error) *MockNetworkRepository_QueryConnectionHistory_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNetworkRepository_QueryConnectionHistory_Call) RunAndReturn(run func(context.Context, domain.ConnectionHistoryQueryFilter) ([]domain.PersonConnection, int64, error)) *MockNetworkRepository_QueryConnectionHistory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetworkRepository creates a new instance of MockNetworkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkRepository {
	mock := &MockNetworkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
