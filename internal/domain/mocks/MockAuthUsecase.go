// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gin "github.com/gin-gonic/gin"
	domain "github.com/leighmacdonald/gbans/internal/domain"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"

	time "time"
)

// MockAuthUsecase is an autogenerated mock type for the AuthUsecase type
type MockAuthUsecase struct {
	mock.Mock
}

type MockAuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUsecase) EXPECT() *MockAuthUsecase_Expecter {
	return &MockAuthUsecase_Expecter{mock: &_m.Mock}
}

// AuthMiddleware provides a mock function with given fields: level
func (_m *MockAuthUsecase) AuthMiddleware(level domain.Privilege) gin.HandlerFunc {
	ret := _m.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for AuthMiddleware")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(domain.Privilege) gin.HandlerFunc); ok {
		r0 = rf(level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// MockAuthUsecase_AuthMiddleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthMiddleware'
type MockAuthUsecase_AuthMiddleware_Call struct {
	*mock.Call
}

// AuthMiddleware is a helper method to define mock.On call
//   - level domain.Privilege
func (_e *MockAuthUsecase_Expecter) AuthMiddleware(level interface{}) *MockAuthUsecase_AuthMiddleware_Call {
	return &MockAuthUsecase_AuthMiddleware_Call{Call: _e.mock.On("AuthMiddleware", level)}
}

func (_c *MockAuthUsecase_AuthMiddleware_Call) Run(run func(level domain.Privilege)) *MockAuthUsecase_AuthMiddleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Privilege))
	})
	return _c
}

func (_c *MockAuthUsecase_AuthMiddleware_Call) Return(_a0 gin.HandlerFunc) *MockAuthUsecase_AuthMiddleware_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_AuthMiddleware_Call) RunAndReturn(run func(domain.Privilege) gin.HandlerFunc) *MockAuthUsecase_AuthMiddleware_Call {
	_c.Call.Return(run)
	return _c
}

// AuthServerMiddleWare provides a mock function with given fields:
func (_m *MockAuthUsecase) AuthServerMiddleWare() gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthServerMiddleWare")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// MockAuthUsecase_AuthServerMiddleWare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthServerMiddleWare'
type MockAuthUsecase_AuthServerMiddleWare_Call struct {
	*mock.Call
}

// AuthServerMiddleWare is a helper method to define mock.On call
func (_e *MockAuthUsecase_Expecter) AuthServerMiddleWare() *MockAuthUsecase_AuthServerMiddleWare_Call {
	return &MockAuthUsecase_AuthServerMiddleWare_Call{Call: _e.mock.On("AuthServerMiddleWare")}
}

func (_c *MockAuthUsecase_AuthServerMiddleWare_Call) Run(run func()) *MockAuthUsecase_AuthServerMiddleWare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthUsecase_AuthServerMiddleWare_Call) Return(_a0 gin.HandlerFunc) *MockAuthUsecase_AuthServerMiddleWare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_AuthServerMiddleWare_Call) RunAndReturn(run func() gin.HandlerFunc) *MockAuthUsecase_AuthServerMiddleWare_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePersonAuth provides a mock function with given fields: ctx, authID
func (_m *MockAuthUsecase) DeletePersonAuth(ctx context.Context, authID int64) error {
	ret := _m.Called(ctx, authID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, authID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_DeletePersonAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonAuth'
type MockAuthUsecase_DeletePersonAuth_Call struct {
	*mock.Call
}

// DeletePersonAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - authID int64
func (_e *MockAuthUsecase_Expecter) DeletePersonAuth(ctx interface{}, authID interface{}) *MockAuthUsecase_DeletePersonAuth_Call {
	return &MockAuthUsecase_DeletePersonAuth_Call{Call: _e.mock.On("DeletePersonAuth", ctx, authID)}
}

func (_c *MockAuthUsecase_DeletePersonAuth_Call) Run(run func(ctx context.Context, authID int64)) *MockAuthUsecase_DeletePersonAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAuthUsecase_DeletePersonAuth_Call) Return(_a0 error) *MockAuthUsecase_DeletePersonAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_DeletePersonAuth_Call) RunAndReturn(run func(context.Context, int64) error) *MockAuthUsecase_DeletePersonAuth_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonAuthByRefreshToken provides a mock function with given fields: ctx, token, auth
func (_m *MockAuthUsecase) GetPersonAuthByRefreshToken(ctx context.Context, token string, auth *domain.PersonAuth) error {
	ret := _m.Called(ctx, token, auth)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonAuthByRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PersonAuth) error); ok {
		r0 = rf(ctx, token, auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_GetPersonAuthByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonAuthByRefreshToken'
type MockAuthUsecase_GetPersonAuthByRefreshToken_Call struct {
	*mock.Call
}

// GetPersonAuthByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - auth *domain.PersonAuth
func (_e *MockAuthUsecase_Expecter) GetPersonAuthByRefreshToken(ctx interface{}, token interface{}, auth interface{}) *MockAuthUsecase_GetPersonAuthByRefreshToken_Call {
	return &MockAuthUsecase_GetPersonAuthByRefreshToken_Call{Call: _e.mock.On("GetPersonAuthByRefreshToken", ctx, token, auth)}
}

func (_c *MockAuthUsecase_GetPersonAuthByRefreshToken_Call) Run(run func(ctx context.Context, token string, auth *domain.PersonAuth)) *MockAuthUsecase_GetPersonAuthByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PersonAuth))
	})
	return _c
}

func (_c *MockAuthUsecase_GetPersonAuthByRefreshToken_Call) Return(_a0 error) *MockAuthUsecase_GetPersonAuthByRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_GetPersonAuthByRefreshToken_Call) RunAndReturn(run func(context.Context, string, *domain.PersonAuth) error) *MockAuthUsecase_GetPersonAuthByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// MakeGetTokenKey provides a mock function with given fields: cookieKey
func (_m *MockAuthUsecase) MakeGetTokenKey(cookieKey string) func(*jwt.Token) (interface{}, error) {
	ret := _m.Called(cookieKey)

	if len(ret) == 0 {
		panic("no return value specified for MakeGetTokenKey")
	}

	var r0 func(*jwt.Token) (interface{}, error)
	if rf, ok := ret.Get(0).(func(string) func(*jwt.Token) (interface{}, error)); ok {
		r0 = rf(cookieKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*jwt.Token) (interface{}, error))
		}
	}

	return r0
}

// MockAuthUsecase_MakeGetTokenKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeGetTokenKey'
type MockAuthUsecase_MakeGetTokenKey_Call struct {
	*mock.Call
}

// MakeGetTokenKey is a helper method to define mock.On call
//   - cookieKey string
func (_e *MockAuthUsecase_Expecter) MakeGetTokenKey(cookieKey interface{}) *MockAuthUsecase_MakeGetTokenKey_Call {
	return &MockAuthUsecase_MakeGetTokenKey_Call{Call: _e.mock.On("MakeGetTokenKey", cookieKey)}
}

func (_c *MockAuthUsecase_MakeGetTokenKey_Call) Run(run func(cookieKey string)) *MockAuthUsecase_MakeGetTokenKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthUsecase_MakeGetTokenKey_Call) Return(_a0 func(*jwt.Token) (interface{}, error)) *MockAuthUsecase_MakeGetTokenKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_MakeGetTokenKey_Call) RunAndReturn(run func(string) func(*jwt.Token) (interface{}, error)) *MockAuthUsecase_MakeGetTokenKey_Call {
	_c.Call.Return(run)
	return _c
}

// MakeTokens provides a mock function with given fields: ctx, cookieKey, sid, createRefresh
func (_m *MockAuthUsecase) MakeTokens(ctx *gin.Context, cookieKey string, sid steamid.SteamID, createRefresh bool) (domain.UserTokens, error) {
	ret := _m.Called(ctx, cookieKey, sid, createRefresh)

	if len(ret) == 0 {
		panic("no return value specified for MakeTokens")
	}

	var r0 domain.UserTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, steamid.SteamID, bool) (domain.UserTokens, error)); ok {
		return rf(ctx, cookieKey, sid, createRefresh)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, steamid.SteamID, bool) domain.UserTokens); ok {
		r0 = rf(ctx, cookieKey, sid, createRefresh)
	} else {
		r0 = ret.Get(0).(domain.UserTokens)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, steamid.SteamID, bool) error); ok {
		r1 = rf(ctx, cookieKey, sid, createRefresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_MakeTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeTokens'
type MockAuthUsecase_MakeTokens_Call struct {
	*mock.Call
}

// MakeTokens is a helper method to define mock.On call
//   - ctx *gin.Context
//   - cookieKey string
//   - sid steamid.SteamID
//   - createRefresh bool
func (_e *MockAuthUsecase_Expecter) MakeTokens(ctx interface{}, cookieKey interface{}, sid interface{}, createRefresh interface{}) *MockAuthUsecase_MakeTokens_Call {
	return &MockAuthUsecase_MakeTokens_Call{Call: _e.mock.On("MakeTokens", ctx, cookieKey, sid, createRefresh)}
}

func (_c *MockAuthUsecase_MakeTokens_Call) Run(run func(ctx *gin.Context, cookieKey string, sid steamid.SteamID, createRefresh bool)) *MockAuthUsecase_MakeTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(string), args[2].(steamid.SteamID), args[3].(bool))
	})
	return _c
}

func (_c *MockAuthUsecase_MakeTokens_Call) Return(_a0 domain.UserTokens, _a1 error) *MockAuthUsecase_MakeTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_MakeTokens_Call) RunAndReturn(run func(*gin.Context, string, steamid.SteamID, bool) (domain.UserTokens, error)) *MockAuthUsecase_MakeTokens_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserToken provides a mock function with given fields: steamID, cookieKey, userContext, validDuration
func (_m *MockAuthUsecase) NewUserToken(steamID steamid.SteamID, cookieKey string, userContext string, validDuration time.Duration) (string, error) {
	ret := _m.Called(steamID, cookieKey, userContext, validDuration)

	if len(ret) == 0 {
		panic("no return value specified for NewUserToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(steamid.SteamID, string, string, time.Duration) (string, error)); ok {
		return rf(steamID, cookieKey, userContext, validDuration)
	}
	if rf, ok := ret.Get(0).(func(steamid.SteamID, string, string, time.Duration) string); ok {
		r0 = rf(steamID, cookieKey, userContext, validDuration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(steamid.SteamID, string, string, time.Duration) error); ok {
		r1 = rf(steamID, cookieKey, userContext, validDuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_NewUserToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewUserToken'
type MockAuthUsecase_NewUserToken_Call struct {
	*mock.Call
}

// NewUserToken is a helper method to define mock.On call
//   - steamID steamid.SteamID
//   - cookieKey string
//   - userContext string
//   - validDuration time.Duration
func (_e *MockAuthUsecase_Expecter) NewUserToken(steamID interface{}, cookieKey interface{}, userContext interface{}, validDuration interface{}) *MockAuthUsecase_NewUserToken_Call {
	return &MockAuthUsecase_NewUserToken_Call{Call: _e.mock.On("NewUserToken", steamID, cookieKey, userContext, validDuration)}
}

func (_c *MockAuthUsecase_NewUserToken_Call) Run(run func(steamID steamid.SteamID, cookieKey string, userContext string, validDuration time.Duration)) *MockAuthUsecase_NewUserToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(steamid.SteamID), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockAuthUsecase_NewUserToken_Call) Return(_a0 string, _a1 error) *MockAuthUsecase_NewUserToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_NewUserToken_Call) RunAndReturn(run func(steamid.SteamID, string, string, time.Duration) (string, error)) *MockAuthUsecase_NewUserToken_Call {
	_c.Call.Return(run)
	return _c
}

// Sid64FromJWTToken provides a mock function with given fields: token, cookieKey
func (_m *MockAuthUsecase) Sid64FromJWTToken(token string, cookieKey string) (steamid.SteamID, error) {
	ret := _m.Called(token, cookieKey)

	if len(ret) == 0 {
		panic("no return value specified for Sid64FromJWTToken")
	}

	var r0 steamid.SteamID
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (steamid.SteamID, error)); ok {
		return rf(token, cookieKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) steamid.SteamID); ok {
		r0 = rf(token, cookieKey)
	} else {
		r0 = ret.Get(0).(steamid.SteamID)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, cookieKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_Sid64FromJWTToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sid64FromJWTToken'
type MockAuthUsecase_Sid64FromJWTToken_Call struct {
	*mock.Call
}

// Sid64FromJWTToken is a helper method to define mock.On call
//   - token string
//   - cookieKey string
func (_e *MockAuthUsecase_Expecter) Sid64FromJWTToken(token interface{}, cookieKey interface{}) *MockAuthUsecase_Sid64FromJWTToken_Call {
	return &MockAuthUsecase_Sid64FromJWTToken_Call{Call: _e.mock.On("Sid64FromJWTToken", token, cookieKey)}
}

func (_c *MockAuthUsecase_Sid64FromJWTToken_Call) Run(run func(token string, cookieKey string)) *MockAuthUsecase_Sid64FromJWTToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthUsecase_Sid64FromJWTToken_Call) Return(_a0 steamid.SteamID, _a1 error) *MockAuthUsecase_Sid64FromJWTToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_Sid64FromJWTToken_Call) RunAndReturn(run func(string, string) (steamid.SteamID, error)) *MockAuthUsecase_Sid64FromJWTToken_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockAuthUsecase) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockAuthUsecase_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockAuthUsecase_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthUsecase_Expecter) Start(ctx interface{}) *MockAuthUsecase_Start_Call {
	return &MockAuthUsecase_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockAuthUsecase_Start_Call) Run(run func(ctx context.Context)) *MockAuthUsecase_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthUsecase_Start_Call) Return() *MockAuthUsecase_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthUsecase_Start_Call) RunAndReturn(run func(context.Context)) *MockAuthUsecase_Start_Call {
	_c.Call.Return(run)
	return _c
}

// TokenFromHeader provides a mock function with given fields: ctx, emptyOK
func (_m *MockAuthUsecase) TokenFromHeader(ctx *gin.Context, emptyOK bool) (string, error) {
	ret := _m.Called(ctx, emptyOK)

	if len(ret) == 0 {
		panic("no return value specified for TokenFromHeader")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, bool) (string, error)); ok {
		return rf(ctx, emptyOK)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, bool) string); ok {
		r0 = rf(ctx, emptyOK)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, bool) error); ok {
		r1 = rf(ctx, emptyOK)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_TokenFromHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenFromHeader'
type MockAuthUsecase_TokenFromHeader_Call struct {
	*mock.Call
}

// TokenFromHeader is a helper method to define mock.On call
//   - ctx *gin.Context
//   - emptyOK bool
func (_e *MockAuthUsecase_Expecter) TokenFromHeader(ctx interface{}, emptyOK interface{}) *MockAuthUsecase_TokenFromHeader_Call {
	return &MockAuthUsecase_TokenFromHeader_Call{Call: _e.mock.On("TokenFromHeader", ctx, emptyOK)}
}

func (_c *MockAuthUsecase_TokenFromHeader_Call) Run(run func(ctx *gin.Context, emptyOK bool)) *MockAuthUsecase_TokenFromHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockAuthUsecase_TokenFromHeader_Call) Return(_a0 string, _a1 error) *MockAuthUsecase_TokenFromHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_TokenFromHeader_Call) RunAndReturn(run func(*gin.Context, bool) (string, error)) *MockAuthUsecase_TokenFromHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthUsecase creates a new instance of MockAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthUsecase {
	mock := &MockAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
