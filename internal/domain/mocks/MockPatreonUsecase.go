// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	patreon "gopkg.in/mxpv/patreon-go.v1"
)

// MockPatreonUsecase is an autogenerated mock type for the PatreonUsecase type
type MockPatreonUsecase struct {
	mock.Mock
}

type MockPatreonUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPatreonUsecase) EXPECT() *MockPatreonUsecase_Expecter {
	return &MockPatreonUsecase_Expecter{mock: &_m.Mock}
}

// Pledges provides a mock function with given fields:
func (_m *MockPatreonUsecase) Pledges() ([]patreon.Pledge, map[string]*patreon.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pledges")
	}

	var r0 []patreon.Pledge
	var r1 map[string]*patreon.User
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]patreon.Pledge, map[string]*patreon.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []patreon.Pledge); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]patreon.Pledge)
		}
	}

	if rf, ok := ret.Get(1).(func() map[string]*patreon.User); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]*patreon.User)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPatreonUsecase_Pledges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pledges'
type MockPatreonUsecase_Pledges_Call struct {
	*mock.Call
}

// Pledges is a helper method to define mock.On call
func (_e *MockPatreonUsecase_Expecter) Pledges() *MockPatreonUsecase_Pledges_Call {
	return &MockPatreonUsecase_Pledges_Call{Call: _e.mock.On("Pledges")}
}

func (_c *MockPatreonUsecase_Pledges_Call) Run(run func()) *MockPatreonUsecase_Pledges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPatreonUsecase_Pledges_Call) Return(_a0 []patreon.Pledge, _a1 map[string]*patreon.User, _a2 error) *MockPatreonUsecase_Pledges_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPatreonUsecase_Pledges_Call) RunAndReturn(run func() ([]patreon.Pledge, map[string]*patreon.User, error)) *MockPatreonUsecase_Pledges_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockPatreonUsecase) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockPatreonUsecase_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPatreonUsecase_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPatreonUsecase_Expecter) Start(ctx interface{}) *MockPatreonUsecase_Start_Call {
	return &MockPatreonUsecase_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockPatreonUsecase_Start_Call) Run(run func(ctx context.Context)) *MockPatreonUsecase_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPatreonUsecase_Start_Call) Return() *MockPatreonUsecase_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPatreonUsecase_Start_Call) RunAndReturn(run func(context.Context)) *MockPatreonUsecase_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Tiers provides a mock function with given fields:
func (_m *MockPatreonUsecase) Tiers() ([]patreon.Campaign, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tiers")
	}

	var r0 []patreon.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]patreon.Campaign, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []patreon.Campaign); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]patreon.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPatreonUsecase_Tiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tiers'
type MockPatreonUsecase_Tiers_Call struct {
	*mock.Call
}

// Tiers is a helper method to define mock.On call
func (_e *MockPatreonUsecase_Expecter) Tiers() *MockPatreonUsecase_Tiers_Call {
	return &MockPatreonUsecase_Tiers_Call{Call: _e.mock.On("Tiers")}
}

func (_c *MockPatreonUsecase_Tiers_Call) Run(run func()) *MockPatreonUsecase_Tiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPatreonUsecase_Tiers_Call) Return(_a0 []patreon.Campaign, _a1 error) *MockPatreonUsecase_Tiers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPatreonUsecase_Tiers_Call) RunAndReturn(run func() ([]patreon.Campaign, error)) *MockPatreonUsecase_Tiers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPatreonUsecase creates a new instance of MockPatreonUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPatreonUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPatreonUsecase {
	mock := &MockPatreonUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
