// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	patreon "github.com/austinbspencer/patreon-go-wrapper"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"
)

// MockPatreonUsecase is an autogenerated mock type for the PatreonUsecase type
type MockPatreonUsecase struct {
	mock.Mock
}

type MockPatreonUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPatreonUsecase) EXPECT() *MockPatreonUsecase_Expecter {
	return &MockPatreonUsecase_Expecter{mock: &_m.Mock}
}

// Campaign provides a mock function with given fields:
func (_m *MockPatreonUsecase) Campaign() patreon.Campaign {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Campaign")
	}

	var r0 patreon.Campaign
	if rf, ok := ret.Get(0).(func() patreon.Campaign); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(patreon.Campaign)
	}

	return r0
}

// MockPatreonUsecase_Campaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Campaign'
type MockPatreonUsecase_Campaign_Call struct {
	*mock.Call
}

// Campaign is a helper method to define mock.On call
func (_e *MockPatreonUsecase_Expecter) Campaign() *MockPatreonUsecase_Campaign_Call {
	return &MockPatreonUsecase_Campaign_Call{Call: _e.mock.On("Campaign")}
}

func (_c *MockPatreonUsecase_Campaign_Call) Run(run func()) *MockPatreonUsecase_Campaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPatreonUsecase_Campaign_Call) Return(_a0 patreon.Campaign) *MockPatreonUsecase_Campaign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPatreonUsecase_Campaign_Call) RunAndReturn(run func() patreon.Campaign) *MockPatreonUsecase_Campaign_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOAuthRedirect provides a mock function with given fields: steamID
func (_m *MockPatreonUsecase) CreateOAuthRedirect(steamID steamid.SteamID) string {
	ret := _m.Called(steamID)

	if len(ret) == 0 {
		panic("no return value specified for CreateOAuthRedirect")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(steamid.SteamID) string); ok {
		r0 = rf(steamID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPatreonUsecase_CreateOAuthRedirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOAuthRedirect'
type MockPatreonUsecase_CreateOAuthRedirect_Call struct {
	*mock.Call
}

// CreateOAuthRedirect is a helper method to define mock.On call
//   - steamID steamid.SteamID
func (_e *MockPatreonUsecase_Expecter) CreateOAuthRedirect(steamID interface{}) *MockPatreonUsecase_CreateOAuthRedirect_Call {
	return &MockPatreonUsecase_CreateOAuthRedirect_Call{Call: _e.mock.On("CreateOAuthRedirect", steamID)}
}

func (_c *MockPatreonUsecase_CreateOAuthRedirect_Call) Run(run func(steamID steamid.SteamID)) *MockPatreonUsecase_CreateOAuthRedirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(steamid.SteamID))
	})
	return _c
}

func (_c *MockPatreonUsecase_CreateOAuthRedirect_Call) Return(_a0 string) *MockPatreonUsecase_CreateOAuthRedirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPatreonUsecase_CreateOAuthRedirect_Call) RunAndReturn(run func(steamid.SteamID) string) *MockPatreonUsecase_CreateOAuthRedirect_Call {
	_c.Call.Return(run)
	return _c
}

// Forget provides a mock function with given fields: ctx, steamID
func (_m *MockPatreonUsecase) Forget(ctx context.Context, steamID steamid.SteamID) error {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for Forget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) error); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPatreonUsecase_Forget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forget'
type MockPatreonUsecase_Forget_Call struct {
	*mock.Call
}

// Forget is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockPatreonUsecase_Expecter) Forget(ctx interface{}, steamID interface{}) *MockPatreonUsecase_Forget_Call {
	return &MockPatreonUsecase_Forget_Call{Call: _e.mock.On("Forget", ctx, steamID)}
}

func (_c *MockPatreonUsecase_Forget_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockPatreonUsecase_Forget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockPatreonUsecase_Forget_Call) Return(_a0 error) *MockPatreonUsecase_Forget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPatreonUsecase_Forget_Call) RunAndReturn(run func(context.Context, steamid.SteamID) error) *MockPatreonUsecase_Forget_Call {
	_c.Call.Return(run)
	return _c
}

// OnOauthLogin provides a mock function with given fields: ctx, state, code
func (_m *MockPatreonUsecase) OnOauthLogin(ctx context.Context, state string, code string) error {
	ret := _m.Called(ctx, state, code)

	if len(ret) == 0 {
		panic("no return value specified for OnOauthLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, state, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPatreonUsecase_OnOauthLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOauthLogin'
type MockPatreonUsecase_OnOauthLogin_Call struct {
	*mock.Call
}

// OnOauthLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - state string
//   - code string
func (_e *MockPatreonUsecase_Expecter) OnOauthLogin(ctx interface{}, state interface{}, code interface{}) *MockPatreonUsecase_OnOauthLogin_Call {
	return &MockPatreonUsecase_OnOauthLogin_Call{Call: _e.mock.On("OnOauthLogin", ctx, state, code)}
}

func (_c *MockPatreonUsecase_OnOauthLogin_Call) Run(run func(ctx context.Context, state string, code string)) *MockPatreonUsecase_OnOauthLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPatreonUsecase_OnOauthLogin_Call) Return(_a0 error) *MockPatreonUsecase_OnOauthLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPatreonUsecase_OnOauthLogin_Call) RunAndReturn(run func(context.Context, string, string) error) *MockPatreonUsecase_OnOauthLogin_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockPatreonUsecase) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockPatreonUsecase_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPatreonUsecase_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPatreonUsecase_Expecter) Start(ctx interface{}) *MockPatreonUsecase_Start_Call {
	return &MockPatreonUsecase_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockPatreonUsecase_Start_Call) Run(run func(ctx context.Context)) *MockPatreonUsecase_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPatreonUsecase_Start_Call) Return() *MockPatreonUsecase_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPatreonUsecase_Start_Call) RunAndReturn(run func(context.Context)) *MockPatreonUsecase_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPatreonUsecase creates a new instance of MockPatreonUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPatreonUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPatreonUsecase {
	mock := &MockPatreonUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
