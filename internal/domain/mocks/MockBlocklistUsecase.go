// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockBlocklistUsecase is an autogenerated mock type for the BlocklistUsecase type
type MockBlocklistUsecase struct {
	mock.Mock
}

type MockBlocklistUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlocklistUsecase) EXPECT() *MockBlocklistUsecase_Expecter {
	return &MockBlocklistUsecase_Expecter{mock: &_m.Mock}
}

// CreateCIDRBlockSources provides a mock function with given fields: ctx, name, url, enabled
func (_m *MockBlocklistUsecase) CreateCIDRBlockSources(ctx context.Context, name string, url string, enabled bool) (domain.CIDRBlockSource, error) {
	ret := _m.Called(ctx, name, url, enabled)

	if len(ret) == 0 {
		panic("no return value specified for CreateCIDRBlockSources")
	}

	var r0 domain.CIDRBlockSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) (domain.CIDRBlockSource, error)); ok {
		return rf(ctx, name, url, enabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) domain.CIDRBlockSource); ok {
		r0 = rf(ctx, name, url, enabled)
	} else {
		r0 = ret.Get(0).(domain.CIDRBlockSource)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, name, url, enabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistUsecase_CreateCIDRBlockSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCIDRBlockSources'
type MockBlocklistUsecase_CreateCIDRBlockSources_Call struct {
	*mock.Call
}

// CreateCIDRBlockSources is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - url string
//   - enabled bool
func (_e *MockBlocklistUsecase_Expecter) CreateCIDRBlockSources(ctx interface{}, name interface{}, url interface{}, enabled interface{}) *MockBlocklistUsecase_CreateCIDRBlockSources_Call {
	return &MockBlocklistUsecase_CreateCIDRBlockSources_Call{Call: _e.mock.On("CreateCIDRBlockSources", ctx, name, url, enabled)}
}

func (_c *MockBlocklistUsecase_CreateCIDRBlockSources_Call) Run(run func(ctx context.Context, name string, url string, enabled bool)) *MockBlocklistUsecase_CreateCIDRBlockSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockBlocklistUsecase_CreateCIDRBlockSources_Call) Return(_a0 domain.CIDRBlockSource, _a1 error) *MockBlocklistUsecase_CreateCIDRBlockSources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistUsecase_CreateCIDRBlockSources_Call) RunAndReturn(run func(context.Context, string, string, bool) (domain.CIDRBlockSource, error)) *MockBlocklistUsecase_CreateCIDRBlockSources_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCIDRBlockWhitelist provides a mock function with given fields: ctx, address
func (_m *MockBlocklistUsecase) CreateCIDRBlockWhitelist(ctx context.Context, address string) (domain.CIDRBlockWhitelist, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for CreateCIDRBlockWhitelist")
	}

	var r0 domain.CIDRBlockWhitelist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.CIDRBlockWhitelist, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CIDRBlockWhitelist); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(domain.CIDRBlockWhitelist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCIDRBlockWhitelist'
type MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call struct {
	*mock.Call
}

// CreateCIDRBlockWhitelist is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *MockBlocklistUsecase_Expecter) CreateCIDRBlockWhitelist(ctx interface{}, address interface{}) *MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call {
	return &MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call{Call: _e.mock.On("CreateCIDRBlockWhitelist", ctx, address)}
}

func (_c *MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call) Run(run func(ctx context.Context, address string)) *MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call) Return(_a0 domain.CIDRBlockWhitelist, _a1 error) *MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call) RunAndReturn(run func(context.Context, string) (domain.CIDRBlockWhitelist, error)) *MockBlocklistUsecase_CreateCIDRBlockWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCIDRBlockSources provides a mock function with given fields: ctx, blockSourceID
func (_m *MockBlocklistUsecase) DeleteCIDRBlockSources(ctx context.Context, blockSourceID int) error {
	ret := _m.Called(ctx, blockSourceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCIDRBlockSources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, blockSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistUsecase_DeleteCIDRBlockSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCIDRBlockSources'
type MockBlocklistUsecase_DeleteCIDRBlockSources_Call struct {
	*mock.Call
}

// DeleteCIDRBlockSources is a helper method to define mock.On call
//   - ctx context.Context
//   - blockSourceID int
func (_e *MockBlocklistUsecase_Expecter) DeleteCIDRBlockSources(ctx interface{}, blockSourceID interface{}) *MockBlocklistUsecase_DeleteCIDRBlockSources_Call {
	return &MockBlocklistUsecase_DeleteCIDRBlockSources_Call{Call: _e.mock.On("DeleteCIDRBlockSources", ctx, blockSourceID)}
}

func (_c *MockBlocklistUsecase_DeleteCIDRBlockSources_Call) Run(run func(ctx context.Context, blockSourceID int)) *MockBlocklistUsecase_DeleteCIDRBlockSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBlocklistUsecase_DeleteCIDRBlockSources_Call) Return(_a0 error) *MockBlocklistUsecase_DeleteCIDRBlockSources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistUsecase_DeleteCIDRBlockSources_Call) RunAndReturn(run func(context.Context, int) error) *MockBlocklistUsecase_DeleteCIDRBlockSources_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCIDRBlockWhitelist provides a mock function with given fields: ctx, whitelistID
func (_m *MockBlocklistUsecase) DeleteCIDRBlockWhitelist(ctx context.Context, whitelistID int) error {
	ret := _m.Called(ctx, whitelistID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCIDRBlockWhitelist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, whitelistID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCIDRBlockWhitelist'
type MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call struct {
	*mock.Call
}

// DeleteCIDRBlockWhitelist is a helper method to define mock.On call
//   - ctx context.Context
//   - whitelistID int
func (_e *MockBlocklistUsecase_Expecter) DeleteCIDRBlockWhitelist(ctx interface{}, whitelistID interface{}) *MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call {
	return &MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call{Call: _e.mock.On("DeleteCIDRBlockWhitelist", ctx, whitelistID)}
}

func (_c *MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call) Run(run func(ctx context.Context, whitelistID int)) *MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call) Return(_a0 error) *MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call) RunAndReturn(run func(context.Context, int) error) *MockBlocklistUsecase_DeleteCIDRBlockWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIDRBlockSource provides a mock function with given fields: ctx, sourceID, block
func (_m *MockBlocklistUsecase) GetCIDRBlockSource(ctx context.Context, sourceID int, block *domain.CIDRBlockSource) error {
	ret := _m.Called(ctx, sourceID, block)

	if len(ret) == 0 {
		panic("no return value specified for GetCIDRBlockSource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.CIDRBlockSource) error); ok {
		r0 = rf(ctx, sourceID, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistUsecase_GetCIDRBlockSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRBlockSource'
type MockBlocklistUsecase_GetCIDRBlockSource_Call struct {
	*mock.Call
}

// GetCIDRBlockSource is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceID int
//   - block *domain.CIDRBlockSource
func (_e *MockBlocklistUsecase_Expecter) GetCIDRBlockSource(ctx interface{}, sourceID interface{}, block interface{}) *MockBlocklistUsecase_GetCIDRBlockSource_Call {
	return &MockBlocklistUsecase_GetCIDRBlockSource_Call{Call: _e.mock.On("GetCIDRBlockSource", ctx, sourceID, block)}
}

func (_c *MockBlocklistUsecase_GetCIDRBlockSource_Call) Run(run func(ctx context.Context, sourceID int, block *domain.CIDRBlockSource)) *MockBlocklistUsecase_GetCIDRBlockSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.CIDRBlockSource))
	})
	return _c
}

func (_c *MockBlocklistUsecase_GetCIDRBlockSource_Call) Return(_a0 error) *MockBlocklistUsecase_GetCIDRBlockSource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistUsecase_GetCIDRBlockSource_Call) RunAndReturn(run func(context.Context, int, *domain.CIDRBlockSource) error) *MockBlocklistUsecase_GetCIDRBlockSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIDRBlockSources provides a mock function with given fields: ctx
func (_m *MockBlocklistUsecase) GetCIDRBlockSources(ctx context.Context) ([]domain.CIDRBlockSource, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCIDRBlockSources")
	}

	var r0 []domain.CIDRBlockSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.CIDRBlockSource, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.CIDRBlockSource); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CIDRBlockSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistUsecase_GetCIDRBlockSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRBlockSources'
type MockBlocklistUsecase_GetCIDRBlockSources_Call struct {
	*mock.Call
}

// GetCIDRBlockSources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlocklistUsecase_Expecter) GetCIDRBlockSources(ctx interface{}) *MockBlocklistUsecase_GetCIDRBlockSources_Call {
	return &MockBlocklistUsecase_GetCIDRBlockSources_Call{Call: _e.mock.On("GetCIDRBlockSources", ctx)}
}

func (_c *MockBlocklistUsecase_GetCIDRBlockSources_Call) Run(run func(ctx context.Context)) *MockBlocklistUsecase_GetCIDRBlockSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlocklistUsecase_GetCIDRBlockSources_Call) Return(_a0 []domain.CIDRBlockSource, _a1 error) *MockBlocklistUsecase_GetCIDRBlockSources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistUsecase_GetCIDRBlockSources_Call) RunAndReturn(run func(context.Context) ([]domain.CIDRBlockSource, error)) *MockBlocklistUsecase_GetCIDRBlockSources_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIDRBlockWhitelist provides a mock function with given fields: ctx, whitelistID, whitelist
func (_m *MockBlocklistUsecase) GetCIDRBlockWhitelist(ctx context.Context, whitelistID int, whitelist *domain.CIDRBlockWhitelist) error {
	ret := _m.Called(ctx, whitelistID, whitelist)

	if len(ret) == 0 {
		panic("no return value specified for GetCIDRBlockWhitelist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.CIDRBlockWhitelist) error); ok {
		r0 = rf(ctx, whitelistID, whitelist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistUsecase_GetCIDRBlockWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRBlockWhitelist'
type MockBlocklistUsecase_GetCIDRBlockWhitelist_Call struct {
	*mock.Call
}

// GetCIDRBlockWhitelist is a helper method to define mock.On call
//   - ctx context.Context
//   - whitelistID int
//   - whitelist *domain.CIDRBlockWhitelist
func (_e *MockBlocklistUsecase_Expecter) GetCIDRBlockWhitelist(ctx interface{}, whitelistID interface{}, whitelist interface{}) *MockBlocklistUsecase_GetCIDRBlockWhitelist_Call {
	return &MockBlocklistUsecase_GetCIDRBlockWhitelist_Call{Call: _e.mock.On("GetCIDRBlockWhitelist", ctx, whitelistID, whitelist)}
}

func (_c *MockBlocklistUsecase_GetCIDRBlockWhitelist_Call) Run(run func(ctx context.Context, whitelistID int, whitelist *domain.CIDRBlockWhitelist)) *MockBlocklistUsecase_GetCIDRBlockWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.CIDRBlockWhitelist))
	})
	return _c
}

func (_c *MockBlocklistUsecase_GetCIDRBlockWhitelist_Call) Return(_a0 error) *MockBlocklistUsecase_GetCIDRBlockWhitelist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistUsecase_GetCIDRBlockWhitelist_Call) RunAndReturn(run func(context.Context, int, *domain.CIDRBlockWhitelist) error) *MockBlocklistUsecase_GetCIDRBlockWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIDRBlockWhitelists provides a mock function with given fields: ctx
func (_m *MockBlocklistUsecase) GetCIDRBlockWhitelists(ctx context.Context) ([]domain.CIDRBlockWhitelist, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCIDRBlockWhitelists")
	}

	var r0 []domain.CIDRBlockWhitelist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.CIDRBlockWhitelist, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.CIDRBlockWhitelist); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CIDRBlockWhitelist)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistUsecase_GetCIDRBlockWhitelists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRBlockWhitelists'
type MockBlocklistUsecase_GetCIDRBlockWhitelists_Call struct {
	*mock.Call
}

// GetCIDRBlockWhitelists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlocklistUsecase_Expecter) GetCIDRBlockWhitelists(ctx interface{}) *MockBlocklistUsecase_GetCIDRBlockWhitelists_Call {
	return &MockBlocklistUsecase_GetCIDRBlockWhitelists_Call{Call: _e.mock.On("GetCIDRBlockWhitelists", ctx)}
}

func (_c *MockBlocklistUsecase_GetCIDRBlockWhitelists_Call) Run(run func(ctx context.Context)) *MockBlocklistUsecase_GetCIDRBlockWhitelists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlocklistUsecase_GetCIDRBlockWhitelists_Call) Return(_a0 []domain.CIDRBlockWhitelist, _a1 error) *MockBlocklistUsecase_GetCIDRBlockWhitelists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistUsecase_GetCIDRBlockWhitelists_Call) RunAndReturn(run func(context.Context) ([]domain.CIDRBlockWhitelist, error)) *MockBlocklistUsecase_GetCIDRBlockWhitelists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCIDRBlockSource provides a mock function with given fields: ctx, sourceID, name, url, enabled
func (_m *MockBlocklistUsecase) UpdateCIDRBlockSource(ctx context.Context, sourceID int, name string, url string, enabled bool) (domain.CIDRBlockSource, error) {
	ret := _m.Called(ctx, sourceID, name, url, enabled)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCIDRBlockSource")
	}

	var r0 domain.CIDRBlockSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, bool) (domain.CIDRBlockSource, error)); ok {
		return rf(ctx, sourceID, name, url, enabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, bool) domain.CIDRBlockSource); ok {
		r0 = rf(ctx, sourceID, name, url, enabled)
	} else {
		r0 = ret.Get(0).(domain.CIDRBlockSource)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, bool) error); ok {
		r1 = rf(ctx, sourceID, name, url, enabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistUsecase_UpdateCIDRBlockSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCIDRBlockSource'
type MockBlocklistUsecase_UpdateCIDRBlockSource_Call struct {
	*mock.Call
}

// UpdateCIDRBlockSource is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceID int
//   - name string
//   - url string
//   - enabled bool
func (_e *MockBlocklistUsecase_Expecter) UpdateCIDRBlockSource(ctx interface{}, sourceID interface{}, name interface{}, url interface{}, enabled interface{}) *MockBlocklistUsecase_UpdateCIDRBlockSource_Call {
	return &MockBlocklistUsecase_UpdateCIDRBlockSource_Call{Call: _e.mock.On("UpdateCIDRBlockSource", ctx, sourceID, name, url, enabled)}
}

func (_c *MockBlocklistUsecase_UpdateCIDRBlockSource_Call) Run(run func(ctx context.Context, sourceID int, name string, url string, enabled bool)) *MockBlocklistUsecase_UpdateCIDRBlockSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockBlocklistUsecase_UpdateCIDRBlockSource_Call) Return(_a0 domain.CIDRBlockSource, _a1 error) *MockBlocklistUsecase_UpdateCIDRBlockSource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistUsecase_UpdateCIDRBlockSource_Call) RunAndReturn(run func(context.Context, int, string, string, bool) (domain.CIDRBlockSource, error)) *MockBlocklistUsecase_UpdateCIDRBlockSource_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCIDRBlockWhitelist provides a mock function with given fields: ctx, whitelistID, address
func (_m *MockBlocklistUsecase) UpdateCIDRBlockWhitelist(ctx context.Context, whitelistID int, address string) (domain.CIDRBlockWhitelist, error) {
	ret := _m.Called(ctx, whitelistID, address)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCIDRBlockWhitelist")
	}

	var r0 domain.CIDRBlockWhitelist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (domain.CIDRBlockWhitelist, error)); ok {
		return rf(ctx, whitelistID, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) domain.CIDRBlockWhitelist); ok {
		r0 = rf(ctx, whitelistID, address)
	} else {
		r0 = ret.Get(0).(domain.CIDRBlockWhitelist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, whitelistID, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCIDRBlockWhitelist'
type MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call struct {
	*mock.Call
}

// UpdateCIDRBlockWhitelist is a helper method to define mock.On call
//   - ctx context.Context
//   - whitelistID int
//   - address string
func (_e *MockBlocklistUsecase_Expecter) UpdateCIDRBlockWhitelist(ctx interface{}, whitelistID interface{}, address interface{}) *MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call {
	return &MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call{Call: _e.mock.On("UpdateCIDRBlockWhitelist", ctx, whitelistID, address)}
}

func (_c *MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call) Run(run func(ctx context.Context, whitelistID int, address string)) *MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call) Return(_a0 domain.CIDRBlockWhitelist, _a1 error) *MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call) RunAndReturn(run func(context.Context, int, string) (domain.CIDRBlockWhitelist, error)) *MockBlocklistUsecase_UpdateCIDRBlockWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlocklistUsecase creates a new instance of MockBlocklistUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlocklistUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlocklistUsecase {
	mock := &MockBlocklistUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
