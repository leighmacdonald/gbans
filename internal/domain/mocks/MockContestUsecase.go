// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v3/steamid"

	uuid "github.com/gofrs/uuid/v5"
)

// MockContestUsecase is an autogenerated mock type for the ContestUsecase type
type MockContestUsecase struct {
	mock.Mock
}

type MockContestUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContestUsecase) EXPECT() *MockContestUsecase_Expecter {
	return &MockContestUsecase_Expecter{mock: &_m.Mock}
}

// ContestByID provides a mock function with given fields: ctx, contestID, contest
func (_m *MockContestUsecase) ContestByID(ctx context.Context, contestID uuid.UUID, contest *domain.Contest) error {
	ret := _m.Called(ctx, contestID, contest)

	if len(ret) == 0 {
		panic("no return value specified for ContestByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.Contest) error); ok {
		r0 = rf(ctx, contestID, contest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestByID'
type MockContestUsecase_ContestByID_Call struct {
	*mock.Call
}

// ContestByID is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
//   - contest *domain.Contest
func (_e *MockContestUsecase_Expecter) ContestByID(ctx interface{}, contestID interface{}, contest interface{}) *MockContestUsecase_ContestByID_Call {
	return &MockContestUsecase_ContestByID_Call{Call: _e.mock.On("ContestByID", ctx, contestID, contest)}
}

func (_c *MockContestUsecase_ContestByID_Call) Run(run func(ctx context.Context, contestID uuid.UUID, contest *domain.Contest)) *MockContestUsecase_ContestByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*domain.Contest))
	})
	return _c
}

func (_c *MockContestUsecase_ContestByID_Call) Return(_a0 error) *MockContestUsecase_ContestByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestByID_Call) RunAndReturn(run func(context.Context, uuid.UUID, *domain.Contest) error) *MockContestUsecase_ContestByID_Call {
	_c.Call.Return(run)
	return _c
}

// ContestDelete provides a mock function with given fields: ctx, contestID
func (_m *MockContestUsecase) ContestDelete(ctx context.Context, contestID uuid.UUID) error {
	ret := _m.Called(ctx, contestID)

	if len(ret) == 0 {
		panic("no return value specified for ContestDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, contestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestDelete'
type MockContestUsecase_ContestDelete_Call struct {
	*mock.Call
}

// ContestDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
func (_e *MockContestUsecase_Expecter) ContestDelete(ctx interface{}, contestID interface{}) *MockContestUsecase_ContestDelete_Call {
	return &MockContestUsecase_ContestDelete_Call{Call: _e.mock.On("ContestDelete", ctx, contestID)}
}

func (_c *MockContestUsecase_ContestDelete_Call) Run(run func(ctx context.Context, contestID uuid.UUID)) *MockContestUsecase_ContestDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockContestUsecase_ContestDelete_Call) Return(_a0 error) *MockContestUsecase_ContestDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestDelete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockContestUsecase_ContestDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntries provides a mock function with given fields: ctx, contestID
func (_m *MockContestUsecase) ContestEntries(ctx context.Context, contestID uuid.UUID) ([]*domain.ContestEntry, error) {
	ret := _m.Called(ctx, contestID)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntries")
	}

	var r0 []*domain.ContestEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.ContestEntry, error)); ok {
		return rf(ctx, contestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.ContestEntry); ok {
		r0 = rf(ctx, contestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ContestEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, contestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContestUsecase_ContestEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntries'
type MockContestUsecase_ContestEntries_Call struct {
	*mock.Call
}

// ContestEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
func (_e *MockContestUsecase_Expecter) ContestEntries(ctx interface{}, contestID interface{}) *MockContestUsecase_ContestEntries_Call {
	return &MockContestUsecase_ContestEntries_Call{Call: _e.mock.On("ContestEntries", ctx, contestID)}
}

func (_c *MockContestUsecase_ContestEntries_Call) Run(run func(ctx context.Context, contestID uuid.UUID)) *MockContestUsecase_ContestEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockContestUsecase_ContestEntries_Call) Return(_a0 []*domain.ContestEntry, _a1 error) *MockContestUsecase_ContestEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContestUsecase_ContestEntries_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*domain.ContestEntry, error)) *MockContestUsecase_ContestEntries_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntry provides a mock function with given fields: ctx, contestID, entry
func (_m *MockContestUsecase) ContestEntry(ctx context.Context, contestID uuid.UUID, entry *domain.ContestEntry) error {
	ret := _m.Called(ctx, contestID, entry)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.ContestEntry) error); ok {
		r0 = rf(ctx, contestID, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntry'
type MockContestUsecase_ContestEntry_Call struct {
	*mock.Call
}

// ContestEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
//   - entry *domain.ContestEntry
func (_e *MockContestUsecase_Expecter) ContestEntry(ctx interface{}, contestID interface{}, entry interface{}) *MockContestUsecase_ContestEntry_Call {
	return &MockContestUsecase_ContestEntry_Call{Call: _e.mock.On("ContestEntry", ctx, contestID, entry)}
}

func (_c *MockContestUsecase_ContestEntry_Call) Run(run func(ctx context.Context, contestID uuid.UUID, entry *domain.ContestEntry)) *MockContestUsecase_ContestEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*domain.ContestEntry))
	})
	return _c
}

func (_c *MockContestUsecase_ContestEntry_Call) Return(_a0 error) *MockContestUsecase_ContestEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestEntry_Call) RunAndReturn(run func(context.Context, uuid.UUID, *domain.ContestEntry) error) *MockContestUsecase_ContestEntry_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryDelete provides a mock function with given fields: ctx, contestEntryID
func (_m *MockContestUsecase) ContestEntryDelete(ctx context.Context, contestEntryID uuid.UUID) error {
	ret := _m.Called(ctx, contestEntryID)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, contestEntryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestEntryDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryDelete'
type MockContestUsecase_ContestEntryDelete_Call struct {
	*mock.Call
}

// ContestEntryDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryID uuid.UUID
func (_e *MockContestUsecase_Expecter) ContestEntryDelete(ctx interface{}, contestEntryID interface{}) *MockContestUsecase_ContestEntryDelete_Call {
	return &MockContestUsecase_ContestEntryDelete_Call{Call: _e.mock.On("ContestEntryDelete", ctx, contestEntryID)}
}

func (_c *MockContestUsecase_ContestEntryDelete_Call) Run(run func(ctx context.Context, contestEntryID uuid.UUID)) *MockContestUsecase_ContestEntryDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockContestUsecase_ContestEntryDelete_Call) Return(_a0 error) *MockContestUsecase_ContestEntryDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestEntryDelete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockContestUsecase_ContestEntryDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntrySave provides a mock function with given fields: ctx, entry
func (_m *MockContestUsecase) ContestEntrySave(ctx context.Context, entry domain.ContestEntry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntrySave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ContestEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestEntrySave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntrySave'
type MockContestUsecase_ContestEntrySave_Call struct {
	*mock.Call
}

// ContestEntrySave is a helper method to define mock.On call
//   - ctx context.Context
//   - entry domain.ContestEntry
func (_e *MockContestUsecase_Expecter) ContestEntrySave(ctx interface{}, entry interface{}) *MockContestUsecase_ContestEntrySave_Call {
	return &MockContestUsecase_ContestEntrySave_Call{Call: _e.mock.On("ContestEntrySave", ctx, entry)}
}

func (_c *MockContestUsecase_ContestEntrySave_Call) Run(run func(ctx context.Context, entry domain.ContestEntry)) *MockContestUsecase_ContestEntrySave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ContestEntry))
	})
	return _c
}

func (_c *MockContestUsecase_ContestEntrySave_Call) Return(_a0 error) *MockContestUsecase_ContestEntrySave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestEntrySave_Call) RunAndReturn(run func(context.Context, domain.ContestEntry) error) *MockContestUsecase_ContestEntrySave_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryVote provides a mock function with given fields: ctx, contestID, contestEntryID, user, vote
func (_m *MockContestUsecase) ContestEntryVote(ctx context.Context, contestID uuid.UUID, contestEntryID uuid.UUID, user domain.PersonInfo, vote bool) error {
	ret := _m.Called(ctx, contestID, contestEntryID, user, vote)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, domain.PersonInfo, bool) error); ok {
		r0 = rf(ctx, contestID, contestEntryID, user, vote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestEntryVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryVote'
type MockContestUsecase_ContestEntryVote_Call struct {
	*mock.Call
}

// ContestEntryVote is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
//   - contestEntryID uuid.UUID
//   - user domain.PersonInfo
//   - vote bool
func (_e *MockContestUsecase_Expecter) ContestEntryVote(ctx interface{}, contestID interface{}, contestEntryID interface{}, user interface{}, vote interface{}) *MockContestUsecase_ContestEntryVote_Call {
	return &MockContestUsecase_ContestEntryVote_Call{Call: _e.mock.On("ContestEntryVote", ctx, contestID, contestEntryID, user, vote)}
}

func (_c *MockContestUsecase_ContestEntryVote_Call) Run(run func(ctx context.Context, contestID uuid.UUID, contestEntryID uuid.UUID, user domain.PersonInfo, vote bool)) *MockContestUsecase_ContestEntryVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(domain.PersonInfo), args[4].(bool))
	})
	return _c
}

func (_c *MockContestUsecase_ContestEntryVote_Call) Return(_a0 error) *MockContestUsecase_ContestEntryVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestEntryVote_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, domain.PersonInfo, bool) error) *MockContestUsecase_ContestEntryVote_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryVoteDelete provides a mock function with given fields: ctx, contestEntryVoteID
func (_m *MockContestUsecase) ContestEntryVoteDelete(ctx context.Context, contestEntryVoteID int64) error {
	ret := _m.Called(ctx, contestEntryVoteID)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryVoteDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, contestEntryVoteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestEntryVoteDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryVoteDelete'
type MockContestUsecase_ContestEntryVoteDelete_Call struct {
	*mock.Call
}

// ContestEntryVoteDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryVoteID int64
func (_e *MockContestUsecase_Expecter) ContestEntryVoteDelete(ctx interface{}, contestEntryVoteID interface{}) *MockContestUsecase_ContestEntryVoteDelete_Call {
	return &MockContestUsecase_ContestEntryVoteDelete_Call{Call: _e.mock.On("ContestEntryVoteDelete", ctx, contestEntryVoteID)}
}

func (_c *MockContestUsecase_ContestEntryVoteDelete_Call) Run(run func(ctx context.Context, contestEntryVoteID int64)) *MockContestUsecase_ContestEntryVoteDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockContestUsecase_ContestEntryVoteDelete_Call) Return(_a0 error) *MockContestUsecase_ContestEntryVoteDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestEntryVoteDelete_Call) RunAndReturn(run func(context.Context, int64) error) *MockContestUsecase_ContestEntryVoteDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryVoteGet provides a mock function with given fields: ctx, contestEntryID, steamID, record
func (_m *MockContestUsecase) ContestEntryVoteGet(ctx context.Context, contestEntryID uuid.UUID, steamID steamid.SID64, record *domain.ContentVoteRecord) error {
	ret := _m.Called(ctx, contestEntryID, steamID, record)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryVoteGet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, steamid.SID64, *domain.ContentVoteRecord) error); ok {
		r0 = rf(ctx, contestEntryID, steamID, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestEntryVoteGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryVoteGet'
type MockContestUsecase_ContestEntryVoteGet_Call struct {
	*mock.Call
}

// ContestEntryVoteGet is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryID uuid.UUID
//   - steamID steamid.SID64
//   - record *domain.ContentVoteRecord
func (_e *MockContestUsecase_Expecter) ContestEntryVoteGet(ctx interface{}, contestEntryID interface{}, steamID interface{}, record interface{}) *MockContestUsecase_ContestEntryVoteGet_Call {
	return &MockContestUsecase_ContestEntryVoteGet_Call{Call: _e.mock.On("ContestEntryVoteGet", ctx, contestEntryID, steamID, record)}
}

func (_c *MockContestUsecase_ContestEntryVoteGet_Call) Run(run func(ctx context.Context, contestEntryID uuid.UUID, steamID steamid.SID64, record *domain.ContentVoteRecord)) *MockContestUsecase_ContestEntryVoteGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(steamid.SID64), args[3].(*domain.ContentVoteRecord))
	})
	return _c
}

func (_c *MockContestUsecase_ContestEntryVoteGet_Call) Return(_a0 error) *MockContestUsecase_ContestEntryVoteGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestEntryVoteGet_Call) RunAndReturn(run func(context.Context, uuid.UUID, steamid.SID64, *domain.ContentVoteRecord) error) *MockContestUsecase_ContestEntryVoteGet_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryVoteUpdate provides a mock function with given fields: ctx, contestEntryVoteID, newVote
func (_m *MockContestUsecase) ContestEntryVoteUpdate(ctx context.Context, contestEntryVoteID int64, newVote bool) error {
	ret := _m.Called(ctx, contestEntryVoteID, newVote)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryVoteUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) error); ok {
		r0 = rf(ctx, contestEntryVoteID, newVote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestUsecase_ContestEntryVoteUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryVoteUpdate'
type MockContestUsecase_ContestEntryVoteUpdate_Call struct {
	*mock.Call
}

// ContestEntryVoteUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryVoteID int64
//   - newVote bool
func (_e *MockContestUsecase_Expecter) ContestEntryVoteUpdate(ctx interface{}, contestEntryVoteID interface{}, newVote interface{}) *MockContestUsecase_ContestEntryVoteUpdate_Call {
	return &MockContestUsecase_ContestEntryVoteUpdate_Call{Call: _e.mock.On("ContestEntryVoteUpdate", ctx, contestEntryVoteID, newVote)}
}

func (_c *MockContestUsecase_ContestEntryVoteUpdate_Call) Run(run func(ctx context.Context, contestEntryVoteID int64, newVote bool)) *MockContestUsecase_ContestEntryVoteUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockContestUsecase_ContestEntryVoteUpdate_Call) Return(_a0 error) *MockContestUsecase_ContestEntryVoteUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestUsecase_ContestEntryVoteUpdate_Call) RunAndReturn(run func(context.Context, int64, bool) error) *MockContestUsecase_ContestEntryVoteUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ContestSave provides a mock function with given fields: ctx, contest
func (_m *MockContestUsecase) ContestSave(ctx context.Context, contest domain.Contest) (domain.Contest, error) {
	ret := _m.Called(ctx, contest)

	if len(ret) == 0 {
		panic("no return value specified for ContestSave")
	}

	var r0 domain.Contest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Contest) (domain.Contest, error)); ok {
		return rf(ctx, contest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Contest) domain.Contest); ok {
		r0 = rf(ctx, contest)
	} else {
		r0 = ret.Get(0).(domain.Contest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Contest) error); ok {
		r1 = rf(ctx, contest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContestUsecase_ContestSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestSave'
type MockContestUsecase_ContestSave_Call struct {
	*mock.Call
}

// ContestSave is a helper method to define mock.On call
//   - ctx context.Context
//   - contest domain.Contest
func (_e *MockContestUsecase_Expecter) ContestSave(ctx interface{}, contest interface{}) *MockContestUsecase_ContestSave_Call {
	return &MockContestUsecase_ContestSave_Call{Call: _e.mock.On("ContestSave", ctx, contest)}
}

func (_c *MockContestUsecase_ContestSave_Call) Run(run func(ctx context.Context, contest domain.Contest)) *MockContestUsecase_ContestSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Contest))
	})
	return _c
}

func (_c *MockContestUsecase_ContestSave_Call) Return(_a0 domain.Contest, _a1 error) *MockContestUsecase_ContestSave_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContestUsecase_ContestSave_Call) RunAndReturn(run func(context.Context, domain.Contest) (domain.Contest, error)) *MockContestUsecase_ContestSave_Call {
	_c.Call.Return(run)
	return _c
}

// Contests provides a mock function with given fields: ctx, user
func (_m *MockContestUsecase) Contests(ctx context.Context, user domain.PersonInfo) ([]domain.Contest, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Contests")
	}

	var r0 []domain.Contest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PersonInfo) ([]domain.Contest, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.PersonInfo) []domain.Contest); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Contest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.PersonInfo) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContestUsecase_Contests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Contests'
type MockContestUsecase_Contests_Call struct {
	*mock.Call
}

// Contests is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.PersonInfo
func (_e *MockContestUsecase_Expecter) Contests(ctx interface{}, user interface{}) *MockContestUsecase_Contests_Call {
	return &MockContestUsecase_Contests_Call{Call: _e.mock.On("Contests", ctx, user)}
}

func (_c *MockContestUsecase_Contests_Call) Run(run func(ctx context.Context, user domain.PersonInfo)) *MockContestUsecase_Contests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PersonInfo))
	})
	return _c
}

func (_c *MockContestUsecase_Contests_Call) Return(_a0 []domain.Contest, _a1 error) *MockContestUsecase_Contests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContestUsecase_Contests_Call) RunAndReturn(run func(context.Context, domain.PersonInfo) ([]domain.Contest, error)) *MockContestUsecase_Contests_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContestUsecase creates a new instance of MockContestUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContestUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContestUsecase {
	mock := &MockContestUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
