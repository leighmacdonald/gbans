// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	net "net"

	steamid "github.com/leighmacdonald/steamid/v3/steamid"
)

// MockPersonRepository is an autogenerated mock type for the PersonRepository type
type MockPersonRepository struct {
	mock.Mock
}

type MockPersonRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersonRepository) EXPECT() *MockPersonRepository_Expecter {
	return &MockPersonRepository_Expecter{mock: &_m.Mock}
}

// DropPerson provides a mock function with given fields: ctx, steamID
func (_m *MockPersonRepository) DropPerson(ctx context.Context, steamID steamid.SID64) error {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for DropPerson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SID64) error); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersonRepository_DropPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropPerson'
type MockPersonRepository_DropPerson_Call struct {
	*mock.Call
}

// DropPerson is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SID64
func (_e *MockPersonRepository_Expecter) DropPerson(ctx interface{}, steamID interface{}) *MockPersonRepository_DropPerson_Call {
	return &MockPersonRepository_DropPerson_Call{Call: _e.mock.On("DropPerson", ctx, steamID)}
}

func (_c *MockPersonRepository_DropPerson_Call) Run(run func(ctx context.Context, steamID steamid.SID64)) *MockPersonRepository_DropPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SID64))
	})
	return _c
}

func (_c *MockPersonRepository_DropPerson_Call) Return(_a0 error) *MockPersonRepository_DropPerson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersonRepository_DropPerson_Call) RunAndReturn(run func(context.Context, steamid.SID64) error) *MockPersonRepository_DropPerson_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpiredProfiles provides a mock function with given fields: ctx, limit
func (_m *MockPersonRepository) GetExpiredProfiles(ctx context.Context, limit uint64) ([]domain.Person, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetExpiredProfiles")
	}

	var r0 []domain.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]domain.Person, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []domain.Person); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonRepository_GetExpiredProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpiredProfiles'
type MockPersonRepository_GetExpiredProfiles_Call struct {
	*mock.Call
}

// GetExpiredProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint64
func (_e *MockPersonRepository_Expecter) GetExpiredProfiles(ctx interface{}, limit interface{}) *MockPersonRepository_GetExpiredProfiles_Call {
	return &MockPersonRepository_GetExpiredProfiles_Call{Call: _e.mock.On("GetExpiredProfiles", ctx, limit)}
}

func (_c *MockPersonRepository_GetExpiredProfiles_Call) Run(run func(ctx context.Context, limit uint64)) *MockPersonRepository_GetExpiredProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockPersonRepository_GetExpiredProfiles_Call) Return(_a0 []domain.Person, _a1 error) *MockPersonRepository_GetExpiredProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonRepository_GetExpiredProfiles_Call) RunAndReturn(run func(context.Context, uint64) ([]domain.Person, error)) *MockPersonRepository_GetExpiredProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeople provides a mock function with given fields: ctx, filter
func (_m *MockPersonRepository) GetPeople(ctx context.Context, filter domain.PlayerQuery) (domain.People, int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPeople")
	}

	var r0 domain.People
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PlayerQuery) (domain.People, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.PlayerQuery) domain.People); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.People)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.PlayerQuery) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.PlayerQuery) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPersonRepository_GetPeople_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeople'
type MockPersonRepository_GetPeople_Call struct {
	*mock.Call
}

// GetPeople is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.PlayerQuery
func (_e *MockPersonRepository_Expecter) GetPeople(ctx interface{}, filter interface{}) *MockPersonRepository_GetPeople_Call {
	return &MockPersonRepository_GetPeople_Call{Call: _e.mock.On("GetPeople", ctx, filter)}
}

func (_c *MockPersonRepository_GetPeople_Call) Run(run func(ctx context.Context, filter domain.PlayerQuery)) *MockPersonRepository_GetPeople_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PlayerQuery))
	})
	return _c
}

func (_c *MockPersonRepository_GetPeople_Call) Return(_a0 domain.People, _a1 int64, _a2 error) *MockPersonRepository_GetPeople_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPersonRepository_GetPeople_Call) RunAndReturn(run func(context.Context, domain.PlayerQuery) (domain.People, int64, error)) *MockPersonRepository_GetPeople_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeopleBySteamID provides a mock function with given fields: ctx, steamIds
func (_m *MockPersonRepository) GetPeopleBySteamID(ctx context.Context, steamIds steamid.Collection) (domain.People, error) {
	ret := _m.Called(ctx, steamIds)

	if len(ret) == 0 {
		panic("no return value specified for GetPeopleBySteamID")
	}

	var r0 domain.People
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.Collection) (domain.People, error)); ok {
		return rf(ctx, steamIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.Collection) domain.People); ok {
		r0 = rf(ctx, steamIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.People)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.Collection) error); ok {
		r1 = rf(ctx, steamIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonRepository_GetPeopleBySteamID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeopleBySteamID'
type MockPersonRepository_GetPeopleBySteamID_Call struct {
	*mock.Call
}

// GetPeopleBySteamID is a helper method to define mock.On call
//   - ctx context.Context
//   - steamIds steamid.Collection
func (_e *MockPersonRepository_Expecter) GetPeopleBySteamID(ctx interface{}, steamIds interface{}) *MockPersonRepository_GetPeopleBySteamID_Call {
	return &MockPersonRepository_GetPeopleBySteamID_Call{Call: _e.mock.On("GetPeopleBySteamID", ctx, steamIds)}
}

func (_c *MockPersonRepository_GetPeopleBySteamID_Call) Run(run func(ctx context.Context, steamIds steamid.Collection)) *MockPersonRepository_GetPeopleBySteamID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.Collection))
	})
	return _c
}

func (_c *MockPersonRepository_GetPeopleBySteamID_Call) Return(_a0 domain.People, _a1 error) *MockPersonRepository_GetPeopleBySteamID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonRepository_GetPeopleBySteamID_Call) RunAndReturn(run func(context.Context, steamid.Collection) (domain.People, error)) *MockPersonRepository_GetPeopleBySteamID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonByDiscordID provides a mock function with given fields: ctx, discordID
func (_m *MockPersonRepository) GetPersonByDiscordID(ctx context.Context, discordID string) (domain.Person, error) {
	ret := _m.Called(ctx, discordID)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByDiscordID")
	}

	var r0 domain.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Person, error)); ok {
		return rf(ctx, discordID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Person); ok {
		r0 = rf(ctx, discordID)
	} else {
		r0 = ret.Get(0).(domain.Person)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, discordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonRepository_GetPersonByDiscordID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonByDiscordID'
type MockPersonRepository_GetPersonByDiscordID_Call struct {
	*mock.Call
}

// GetPersonByDiscordID is a helper method to define mock.On call
//   - ctx context.Context
//   - discordID string
func (_e *MockPersonRepository_Expecter) GetPersonByDiscordID(ctx interface{}, discordID interface{}) *MockPersonRepository_GetPersonByDiscordID_Call {
	return &MockPersonRepository_GetPersonByDiscordID_Call{Call: _e.mock.On("GetPersonByDiscordID", ctx, discordID)}
}

func (_c *MockPersonRepository_GetPersonByDiscordID_Call) Run(run func(ctx context.Context, discordID string)) *MockPersonRepository_GetPersonByDiscordID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPersonRepository_GetPersonByDiscordID_Call) Return(_a0 domain.Person, _a1 error) *MockPersonRepository_GetPersonByDiscordID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonRepository_GetPersonByDiscordID_Call) RunAndReturn(run func(context.Context, string) (domain.Person, error)) *MockPersonRepository_GetPersonByDiscordID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonBySteamID provides a mock function with given fields: ctx, sid64
func (_m *MockPersonRepository) GetPersonBySteamID(ctx context.Context, sid64 steamid.SID64) (domain.Person, error) {
	ret := _m.Called(ctx, sid64)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonBySteamID")
	}

	var r0 domain.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SID64) (domain.Person, error)); ok {
		return rf(ctx, sid64)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SID64) domain.Person); ok {
		r0 = rf(ctx, sid64)
	} else {
		r0 = ret.Get(0).(domain.Person)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SID64) error); ok {
		r1 = rf(ctx, sid64)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonRepository_GetPersonBySteamID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonBySteamID'
type MockPersonRepository_GetPersonBySteamID_Call struct {
	*mock.Call
}

// GetPersonBySteamID is a helper method to define mock.On call
//   - ctx context.Context
//   - sid64 steamid.SID64
func (_e *MockPersonRepository_Expecter) GetPersonBySteamID(ctx interface{}, sid64 interface{}) *MockPersonRepository_GetPersonBySteamID_Call {
	return &MockPersonRepository_GetPersonBySteamID_Call{Call: _e.mock.On("GetPersonBySteamID", ctx, sid64)}
}

func (_c *MockPersonRepository_GetPersonBySteamID_Call) Run(run func(ctx context.Context, sid64 steamid.SID64)) *MockPersonRepository_GetPersonBySteamID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SID64))
	})
	return _c
}

func (_c *MockPersonRepository_GetPersonBySteamID_Call) Return(_a0 domain.Person, _a1 error) *MockPersonRepository_GetPersonBySteamID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonRepository_GetPersonBySteamID_Call) RunAndReturn(run func(context.Context, steamid.SID64) (domain.Person, error)) *MockPersonRepository_GetPersonBySteamID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonMessageByID provides a mock function with given fields: ctx, personMessageID
func (_m *MockPersonRepository) GetPersonMessageByID(ctx context.Context, personMessageID int64) (domain.PersonMessage, error) {
	ret := _m.Called(ctx, personMessageID)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonMessageByID")
	}

	var r0 domain.PersonMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.PersonMessage, error)); ok {
		return rf(ctx, personMessageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.PersonMessage); ok {
		r0 = rf(ctx, personMessageID)
	} else {
		r0 = ret.Get(0).(domain.PersonMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, personMessageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonRepository_GetPersonMessageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonMessageByID'
type MockPersonRepository_GetPersonMessageByID_Call struct {
	*mock.Call
}

// GetPersonMessageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - personMessageID int64
func (_e *MockPersonRepository_Expecter) GetPersonMessageByID(ctx interface{}, personMessageID interface{}) *MockPersonRepository_GetPersonMessageByID_Call {
	return &MockPersonRepository_GetPersonMessageByID_Call{Call: _e.mock.On("GetPersonMessageByID", ctx, personMessageID)}
}

func (_c *MockPersonRepository_GetPersonMessageByID_Call) Run(run func(ctx context.Context, personMessageID int64)) *MockPersonRepository_GetPersonMessageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPersonRepository_GetPersonMessageByID_Call) Return(_a0 domain.PersonMessage, _a1 error) *MockPersonRepository_GetPersonMessageByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonRepository_GetPersonMessageByID_Call) RunAndReturn(run func(context.Context, int64) (domain.PersonMessage, error)) *MockPersonRepository_GetPersonMessageByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonSettings provides a mock function with given fields: ctx, steamID
func (_m *MockPersonRepository) GetPersonSettings(ctx context.Context, steamID steamid.SID64) (domain.PersonSettings, error) {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonSettings")
	}

	var r0 domain.PersonSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SID64) (domain.PersonSettings, error)); ok {
		return rf(ctx, steamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SID64) domain.PersonSettings); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Get(0).(domain.PersonSettings)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SID64) error); ok {
		r1 = rf(ctx, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonRepository_GetPersonSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonSettings'
type MockPersonRepository_GetPersonSettings_Call struct {
	*mock.Call
}

// GetPersonSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SID64
func (_e *MockPersonRepository_Expecter) GetPersonSettings(ctx interface{}, steamID interface{}) *MockPersonRepository_GetPersonSettings_Call {
	return &MockPersonRepository_GetPersonSettings_Call{Call: _e.mock.On("GetPersonSettings", ctx, steamID)}
}

func (_c *MockPersonRepository_GetPersonSettings_Call) Run(run func(ctx context.Context, steamID steamid.SID64)) *MockPersonRepository_GetPersonSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SID64))
	})
	return _c
}

func (_c *MockPersonRepository_GetPersonSettings_Call) Return(_a0 domain.PersonSettings, _a1 error) *MockPersonRepository_GetPersonSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonRepository_GetPersonSettings_Call) RunAndReturn(run func(context.Context, steamid.SID64) (domain.PersonSettings, error)) *MockPersonRepository_GetPersonSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetSteamIdsAbove provides a mock function with given fields: ctx, privilege
func (_m *MockPersonRepository) GetSteamIdsAbove(ctx context.Context, privilege domain.Privilege) (steamid.Collection, error) {
	ret := _m.Called(ctx, privilege)

	if len(ret) == 0 {
		panic("no return value specified for GetSteamIdsAbove")
	}

	var r0 steamid.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Privilege) (steamid.Collection, error)); ok {
		return rf(ctx, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Privilege) steamid.Collection); ok {
		r0 = rf(ctx, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(steamid.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Privilege) error); ok {
		r1 = rf(ctx, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonRepository_GetSteamIdsAbove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSteamIdsAbove'
type MockPersonRepository_GetSteamIdsAbove_Call struct {
	*mock.Call
}

// GetSteamIdsAbove is a helper method to define mock.On call
//   - ctx context.Context
//   - privilege domain.Privilege
func (_e *MockPersonRepository_Expecter) GetSteamIdsAbove(ctx interface{}, privilege interface{}) *MockPersonRepository_GetSteamIdsAbove_Call {
	return &MockPersonRepository_GetSteamIdsAbove_Call{Call: _e.mock.On("GetSteamIdsAbove", ctx, privilege)}
}

func (_c *MockPersonRepository_GetSteamIdsAbove_Call) Run(run func(ctx context.Context, privilege domain.Privilege)) *MockPersonRepository_GetSteamIdsAbove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Privilege))
	})
	return _c
}

func (_c *MockPersonRepository_GetSteamIdsAbove_Call) Return(_a0 steamid.Collection, _a1 error) *MockPersonRepository_GetSteamIdsAbove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonRepository_GetSteamIdsAbove_Call) RunAndReturn(run func(context.Context, domain.Privilege) (steamid.Collection, error)) *MockPersonRepository_GetSteamIdsAbove_Call {
	_c.Call.Return(run)
	return _c
}

// GetSteamsAtAddress provides a mock function with given fields: ctx, addr
func (_m *MockPersonRepository) GetSteamsAtAddress(ctx context.Context, addr net.IP) (steamid.Collection, error) {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetSteamsAtAddress")
	}

	var r0 steamid.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, net.IP) (steamid.Collection, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, net.IP) steamid.Collection); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(steamid.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, net.IP) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonRepository_GetSteamsAtAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSteamsAtAddress'
type MockPersonRepository_GetSteamsAtAddress_Call struct {
	*mock.Call
}

// GetSteamsAtAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - addr net.IP
func (_e *MockPersonRepository_Expecter) GetSteamsAtAddress(ctx interface{}, addr interface{}) *MockPersonRepository_GetSteamsAtAddress_Call {
	return &MockPersonRepository_GetSteamsAtAddress_Call{Call: _e.mock.On("GetSteamsAtAddress", ctx, addr)}
}

func (_c *MockPersonRepository_GetSteamsAtAddress_Call) Run(run func(ctx context.Context, addr net.IP)) *MockPersonRepository_GetSteamsAtAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.IP))
	})
	return _c
}

func (_c *MockPersonRepository_GetSteamsAtAddress_Call) Return(_a0 steamid.Collection, _a1 error) *MockPersonRepository_GetSteamsAtAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonRepository_GetSteamsAtAddress_Call) RunAndReturn(run func(context.Context, net.IP) (steamid.Collection, error)) *MockPersonRepository_GetSteamsAtAddress_Call {
	_c.Call.Return(run)
	return _c
}

// SavePerson provides a mock function with given fields: ctx, person
func (_m *MockPersonRepository) SavePerson(ctx context.Context, person *domain.Person) error {
	ret := _m.Called(ctx, person)

	if len(ret) == 0 {
		panic("no return value specified for SavePerson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Person) error); ok {
		r0 = rf(ctx, person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersonRepository_SavePerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePerson'
type MockPersonRepository_SavePerson_Call struct {
	*mock.Call
}

// SavePerson is a helper method to define mock.On call
//   - ctx context.Context
//   - person *domain.Person
func (_e *MockPersonRepository_Expecter) SavePerson(ctx interface{}, person interface{}) *MockPersonRepository_SavePerson_Call {
	return &MockPersonRepository_SavePerson_Call{Call: _e.mock.On("SavePerson", ctx, person)}
}

func (_c *MockPersonRepository_SavePerson_Call) Run(run func(ctx context.Context, person *domain.Person)) *MockPersonRepository_SavePerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Person))
	})
	return _c
}

func (_c *MockPersonRepository_SavePerson_Call) Return(_a0 error) *MockPersonRepository_SavePerson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersonRepository_SavePerson_Call) RunAndReturn(run func(context.Context, *domain.Person) error) *MockPersonRepository_SavePerson_Call {
	_c.Call.Return(run)
	return _c
}

// SavePersonSettings provides a mock function with given fields: ctx, settings
func (_m *MockPersonRepository) SavePersonSettings(ctx context.Context, settings *domain.PersonSettings) error {
	ret := _m.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for SavePersonSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PersonSettings) error); ok {
		r0 = rf(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersonRepository_SavePersonSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePersonSettings'
type MockPersonRepository_SavePersonSettings_Call struct {
	*mock.Call
}

// SavePersonSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - settings *domain.PersonSettings
func (_e *MockPersonRepository_Expecter) SavePersonSettings(ctx interface{}, settings interface{}) *MockPersonRepository_SavePersonSettings_Call {
	return &MockPersonRepository_SavePersonSettings_Call{Call: _e.mock.On("SavePersonSettings", ctx, settings)}
}

func (_c *MockPersonRepository_SavePersonSettings_Call) Run(run func(ctx context.Context, settings *domain.PersonSettings)) *MockPersonRepository_SavePersonSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PersonSettings))
	})
	return _c
}

func (_c *MockPersonRepository_SavePersonSettings_Call) Return(_a0 error) *MockPersonRepository_SavePersonSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersonRepository_SavePersonSettings_Call) RunAndReturn(run func(context.Context, *domain.PersonSettings) error) *MockPersonRepository_SavePersonSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersonRepository creates a new instance of MockPersonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersonRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersonRepository {
	mock := &MockPersonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
