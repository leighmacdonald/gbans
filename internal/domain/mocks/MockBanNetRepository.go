// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	net "net"
)

// MockBanNetRepository is an autogenerated mock type for the BanNetRepository type
type MockBanNetRepository struct {
	mock.Mock
}

type MockBanNetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBanNetRepository) EXPECT() *MockBanNetRepository_Expecter {
	return &MockBanNetRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, banNet
func (_m *MockBanNetRepository) Delete(ctx context.Context, banNet *domain.BanCIDR) error {
	ret := _m.Called(ctx, banNet)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanCIDR) error); ok {
		r0 = rf(ctx, banNet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanNetRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBanNetRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - banNet *domain.BanCIDR
func (_e *MockBanNetRepository_Expecter) Delete(ctx interface{}, banNet interface{}) *MockBanNetRepository_Delete_Call {
	return &MockBanNetRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, banNet)}
}

func (_c *MockBanNetRepository_Delete_Call) Run(run func(ctx context.Context, banNet *domain.BanCIDR)) *MockBanNetRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanCIDR))
	})
	return _c
}

func (_c *MockBanNetRepository_Delete_Call) Return(_a0 error) *MockBanNetRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanNetRepository_Delete_Call) RunAndReturn(run func(context.Context, *domain.BanCIDR) error) *MockBanNetRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Expired provides a mock function with given fields: ctx
func (_m *MockBanNetRepository) Expired(ctx context.Context) ([]domain.BanCIDR, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Expired")
	}

	var r0 []domain.BanCIDR
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.BanCIDR, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.BanCIDR); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BanCIDR)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanNetRepository_Expired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expired'
type MockBanNetRepository_Expired_Call struct {
	*mock.Call
}

// Expired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBanNetRepository_Expecter) Expired(ctx interface{}) *MockBanNetRepository_Expired_Call {
	return &MockBanNetRepository_Expired_Call{Call: _e.mock.On("Expired", ctx)}
}

func (_c *MockBanNetRepository_Expired_Call) Run(run func(ctx context.Context)) *MockBanNetRepository_Expired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBanNetRepository_Expired_Call) Return(_a0 []domain.BanCIDR, _a1 error) *MockBanNetRepository_Expired_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanNetRepository_Expired_Call) RunAndReturn(run func(context.Context) ([]domain.BanCIDR, error)) *MockBanNetRepository_Expired_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, filter
func (_m *MockBanNetRepository) Get(ctx context.Context, filter domain.CIDRBansQueryFilter) ([]domain.BannedCIDRPerson, int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.BannedCIDRPerson
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CIDRBansQueryFilter) ([]domain.BannedCIDRPerson, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.CIDRBansQueryFilter) []domain.BannedCIDRPerson); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BannedCIDRPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.CIDRBansQueryFilter) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.CIDRBansQueryFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBanNetRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBanNetRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.CIDRBansQueryFilter
func (_e *MockBanNetRepository_Expecter) Get(ctx interface{}, filter interface{}) *MockBanNetRepository_Get_Call {
	return &MockBanNetRepository_Get_Call{Call: _e.mock.On("Get", ctx, filter)}
}

func (_c *MockBanNetRepository_Get_Call) Run(run func(ctx context.Context, filter domain.CIDRBansQueryFilter)) *MockBanNetRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CIDRBansQueryFilter))
	})
	return _c
}

func (_c *MockBanNetRepository_Get_Call) Return(_a0 []domain.BannedCIDRPerson, _a1 int64, _a2 error) *MockBanNetRepository_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBanNetRepository_Get_Call) RunAndReturn(run func(context.Context, domain.CIDRBansQueryFilter) ([]domain.BannedCIDRPerson, int64, error)) *MockBanNetRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAddress provides a mock function with given fields: ctx, ipAddr
func (_m *MockBanNetRepository) GetByAddress(ctx context.Context, ipAddr net.IP) ([]domain.BanCIDR, error) {
	ret := _m.Called(ctx, ipAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetByAddress")
	}

	var r0 []domain.BanCIDR
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, net.IP) ([]domain.BanCIDR, error)); ok {
		return rf(ctx, ipAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, net.IP) []domain.BanCIDR); ok {
		r0 = rf(ctx, ipAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BanCIDR)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, net.IP) error); ok {
		r1 = rf(ctx, ipAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanNetRepository_GetByAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAddress'
type MockBanNetRepository_GetByAddress_Call struct {
	*mock.Call
}

// GetByAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - ipAddr net.IP
func (_e *MockBanNetRepository_Expecter) GetByAddress(ctx interface{}, ipAddr interface{}) *MockBanNetRepository_GetByAddress_Call {
	return &MockBanNetRepository_GetByAddress_Call{Call: _e.mock.On("GetByAddress", ctx, ipAddr)}
}

func (_c *MockBanNetRepository_GetByAddress_Call) Run(run func(ctx context.Context, ipAddr net.IP)) *MockBanNetRepository_GetByAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.IP))
	})
	return _c
}

func (_c *MockBanNetRepository_GetByAddress_Call) Return(_a0 []domain.BanCIDR, _a1 error) *MockBanNetRepository_GetByAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanNetRepository_GetByAddress_Call) RunAndReturn(run func(context.Context, net.IP) ([]domain.BanCIDR, error)) *MockBanNetRepository_GetByAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, netID, banNet
func (_m *MockBanNetRepository) GetByID(ctx context.Context, netID int64, banNet *domain.BanCIDR) error {
	ret := _m.Called(ctx, netID, banNet)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.BanCIDR) error); ok {
		r0 = rf(ctx, netID, banNet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanNetRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockBanNetRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - netID int64
//   - banNet *domain.BanCIDR
func (_e *MockBanNetRepository_Expecter) GetByID(ctx interface{}, netID interface{}, banNet interface{}) *MockBanNetRepository_GetByID_Call {
	return &MockBanNetRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, netID, banNet)}
}

func (_c *MockBanNetRepository_GetByID_Call) Run(run func(ctx context.Context, netID int64, banNet *domain.BanCIDR)) *MockBanNetRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.BanCIDR))
	})
	return _c
}

func (_c *MockBanNetRepository_GetByID_Call) Return(_a0 error) *MockBanNetRepository_GetByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanNetRepository_GetByID_Call) RunAndReturn(run func(context.Context, int64, *domain.BanCIDR) error) *MockBanNetRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, banNet
func (_m *MockBanNetRepository) Save(ctx context.Context, banNet *domain.BanCIDR) error {
	ret := _m.Called(ctx, banNet)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanCIDR) error); ok {
		r0 = rf(ctx, banNet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanNetRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBanNetRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - banNet *domain.BanCIDR
func (_e *MockBanNetRepository_Expecter) Save(ctx interface{}, banNet interface{}) *MockBanNetRepository_Save_Call {
	return &MockBanNetRepository_Save_Call{Call: _e.mock.On("Save", ctx, banNet)}
}

func (_c *MockBanNetRepository_Save_Call) Run(run func(ctx context.Context, banNet *domain.BanCIDR)) *MockBanNetRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanCIDR))
	})
	return _c
}

func (_c *MockBanNetRepository_Save_Call) Return(_a0 error) *MockBanNetRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanNetRepository_Save_Call) RunAndReturn(run func(context.Context, *domain.BanCIDR) error) *MockBanNetRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBanNetRepository creates a new instance of MockBanNetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBanNetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBanNetRepository {
	mock := &MockBanNetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
