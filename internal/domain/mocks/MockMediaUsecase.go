// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"

	uuid "github.com/gofrs/uuid/v5"
)

// MockMediaUsecase is an autogenerated mock type for the MediaUsecase type
type MockMediaUsecase struct {
	mock.Mock
}

type MockMediaUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaUsecase) EXPECT() *MockMediaUsecase_Expecter {
	return &MockMediaUsecase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, steamID, name, mimeType, content, mimeTypesAllowed
func (_m *MockMediaUsecase) Create(ctx context.Context, steamID steamid.SteamID, name string, mimeType string, content []byte, mimeTypesAllowed []string) (*domain.Media, error) {
	ret := _m.Called(ctx, steamID, name, mimeType, content, mimeTypesAllowed)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Media
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, string, string, []byte, []string) (*domain.Media, error)); ok {
		return rf(ctx, steamID, name, mimeType, content, mimeTypesAllowed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, string, string, []byte, []string) *domain.Media); ok {
		r0 = rf(ctx, steamID, name, mimeType, content, mimeTypesAllowed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Media)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID, string, string, []byte, []string) error); ok {
		r1 = rf(ctx, steamID, name, mimeType, content, mimeTypesAllowed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMediaUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMediaUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
//   - name string
//   - mimeType string
//   - content []byte
//   - mimeTypesAllowed []string
func (_e *MockMediaUsecase_Expecter) Create(ctx interface{}, steamID interface{}, name interface{}, mimeType interface{}, content interface{}, mimeTypesAllowed interface{}) *MockMediaUsecase_Create_Call {
	return &MockMediaUsecase_Create_Call{Call: _e.mock.On("Create", ctx, steamID, name, mimeType, content, mimeTypesAllowed)}
}

func (_c *MockMediaUsecase_Create_Call) Run(run func(ctx context.Context, steamID steamid.SteamID, name string, mimeType string, content []byte, mimeTypesAllowed []string)) *MockMediaUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID), args[2].(string), args[3].(string), args[4].([]byte), args[5].([]string))
	})
	return _c
}

func (_c *MockMediaUsecase_Create_Call) Return(_a0 *domain.Media, _a1 error) *MockMediaUsecase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMediaUsecase_Create_Call) RunAndReturn(run func(context.Context, steamid.SteamID, string, string, []byte, []string) (*domain.Media, error)) *MockMediaUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaByAssetID provides a mock function with given fields: ctx, _a1, media
func (_m *MockMediaUsecase) GetMediaByAssetID(ctx context.Context, _a1 uuid.UUID, media *domain.Media) error {
	ret := _m.Called(ctx, _a1, media)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaByAssetID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.Media) error); ok {
		r0 = rf(ctx, _a1, media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMediaUsecase_GetMediaByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaByAssetID'
type MockMediaUsecase_GetMediaByAssetID_Call struct {
	*mock.Call
}

// GetMediaByAssetID is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 uuid.UUID
//   - media *domain.Media
func (_e *MockMediaUsecase_Expecter) GetMediaByAssetID(ctx interface{}, _a1 interface{}, media interface{}) *MockMediaUsecase_GetMediaByAssetID_Call {
	return &MockMediaUsecase_GetMediaByAssetID_Call{Call: _e.mock.On("GetMediaByAssetID", ctx, _a1, media)}
}

func (_c *MockMediaUsecase_GetMediaByAssetID_Call) Run(run func(ctx context.Context, _a1 uuid.UUID, media *domain.Media)) *MockMediaUsecase_GetMediaByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*domain.Media))
	})
	return _c
}

func (_c *MockMediaUsecase_GetMediaByAssetID_Call) Return(_a0 error) *MockMediaUsecase_GetMediaByAssetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMediaUsecase_GetMediaByAssetID_Call) RunAndReturn(run func(context.Context, uuid.UUID, *domain.Media) error) *MockMediaUsecase_GetMediaByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaByID provides a mock function with given fields: ctx, mediaID, media
func (_m *MockMediaUsecase) GetMediaByID(ctx context.Context, mediaID int, media *domain.Media) error {
	ret := _m.Called(ctx, mediaID, media)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.Media) error); ok {
		r0 = rf(ctx, mediaID, media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMediaUsecase_GetMediaByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaByID'
type MockMediaUsecase_GetMediaByID_Call struct {
	*mock.Call
}

// GetMediaByID is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaID int
//   - media *domain.Media
func (_e *MockMediaUsecase_Expecter) GetMediaByID(ctx interface{}, mediaID interface{}, media interface{}) *MockMediaUsecase_GetMediaByID_Call {
	return &MockMediaUsecase_GetMediaByID_Call{Call: _e.mock.On("GetMediaByID", ctx, mediaID, media)}
}

func (_c *MockMediaUsecase_GetMediaByID_Call) Run(run func(ctx context.Context, mediaID int, media *domain.Media)) *MockMediaUsecase_GetMediaByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.Media))
	})
	return _c
}

func (_c *MockMediaUsecase_GetMediaByID_Call) Return(_a0 error) *MockMediaUsecase_GetMediaByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMediaUsecase_GetMediaByID_Call) RunAndReturn(run func(context.Context, int, *domain.Media) error) *MockMediaUsecase_GetMediaByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaByName provides a mock function with given fields: ctx, name, media
func (_m *MockMediaUsecase) GetMediaByName(ctx context.Context, name string, media *domain.Media) error {
	ret := _m.Called(ctx, name, media)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Media) error); ok {
		r0 = rf(ctx, name, media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMediaUsecase_GetMediaByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaByName'
type MockMediaUsecase_GetMediaByName_Call struct {
	*mock.Call
}

// GetMediaByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - media *domain.Media
func (_e *MockMediaUsecase_Expecter) GetMediaByName(ctx interface{}, name interface{}, media interface{}) *MockMediaUsecase_GetMediaByName_Call {
	return &MockMediaUsecase_GetMediaByName_Call{Call: _e.mock.On("GetMediaByName", ctx, name, media)}
}

func (_c *MockMediaUsecase_GetMediaByName_Call) Run(run func(ctx context.Context, name string, media *domain.Media)) *MockMediaUsecase_GetMediaByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.Media))
	})
	return _c
}

func (_c *MockMediaUsecase_GetMediaByName_Call) Return(_a0 error) *MockMediaUsecase_GetMediaByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMediaUsecase_GetMediaByName_Call) RunAndReturn(run func(context.Context, string, *domain.Media) error) *MockMediaUsecase_GetMediaByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMediaUsecase creates a new instance of MockMediaUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaUsecase {
	mock := &MockMediaUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
