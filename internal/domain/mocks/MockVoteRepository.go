// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockVoteRepository is an autogenerated mock type for the VoteRepository type
type MockVoteRepository struct {
	mock.Mock
}

type MockVoteRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteRepository) EXPECT() *MockVoteRepository_Expecter {
	return &MockVoteRepository_Expecter{mock: &_m.Mock}
}

// AddResult provides a mock function with given fields: ctx, voteResult
func (_m *MockVoteRepository) AddResult(ctx context.Context, voteResult domain.VoteResult) error {
	ret := _m.Called(ctx, voteResult)

	if len(ret) == 0 {
		panic("no return value specified for AddResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.VoteResult) error); ok {
		r0 = rf(ctx, voteResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVoteRepository_AddResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddResult'
type MockVoteRepository_AddResult_Call struct {
	*mock.Call
}

// AddResult is a helper method to define mock.On call
//   - ctx context.Context
//   - voteResult domain.VoteResult
func (_e *MockVoteRepository_Expecter) AddResult(ctx interface{}, voteResult interface{}) *MockVoteRepository_AddResult_Call {
	return &MockVoteRepository_AddResult_Call{Call: _e.mock.On("AddResult", ctx, voteResult)}
}

func (_c *MockVoteRepository_AddResult_Call) Run(run func(ctx context.Context, voteResult domain.VoteResult)) *MockVoteRepository_AddResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.VoteResult))
	})
	return _c
}

func (_c *MockVoteRepository_AddResult_Call) Return(_a0 error) *MockVoteRepository_AddResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteRepository_AddResult_Call) RunAndReturn(run func(context.Context, domain.VoteResult) error) *MockVoteRepository_AddResult_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, filter
func (_m *MockVoteRepository) Query(ctx context.Context, filter domain.VoteQueryFilter) ([]domain.VoteResult, int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []domain.VoteResult
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.VoteQueryFilter) ([]domain.VoteResult, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.VoteQueryFilter) []domain.VoteResult); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.VoteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.VoteQueryFilter) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.VoteQueryFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVoteRepository_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockVoteRepository_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.VoteQueryFilter
func (_e *MockVoteRepository_Expecter) Query(ctx interface{}, filter interface{}) *MockVoteRepository_Query_Call {
	return &MockVoteRepository_Query_Call{Call: _e.mock.On("Query", ctx, filter)}
}

func (_c *MockVoteRepository_Query_Call) Run(run func(ctx context.Context, filter domain.VoteQueryFilter)) *MockVoteRepository_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.VoteQueryFilter))
	})
	return _c
}

func (_c *MockVoteRepository_Query_Call) Return(_a0 []domain.VoteResult, _a1 int64, _a2 error) *MockVoteRepository_Query_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVoteRepository_Query_Call) RunAndReturn(run func(context.Context, domain.VoteQueryFilter) ([]domain.VoteResult, int64, error)) *MockVoteRepository_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVoteRepository creates a new instance of MockVoteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteRepository {
	mock := &MockVoteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
