// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	netip "net/netip"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"

	time "time"
)

// MockBanSteamRepository is an autogenerated mock type for the BanSteamRepository type
type MockBanSteamRepository struct {
	mock.Mock
}

type MockBanSteamRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBanSteamRepository) EXPECT() *MockBanSteamRepository_Expecter {
	return &MockBanSteamRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, ban, hardDelete
func (_m *MockBanSteamRepository) Delete(ctx context.Context, ban *domain.BanSteam, hardDelete bool) error {
	ret := _m.Called(ctx, ban, hardDelete)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanSteam, bool) error); ok {
		r0 = rf(ctx, ban, hardDelete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanSteamRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBanSteamRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - ban *domain.BanSteam
//   - hardDelete bool
func (_e *MockBanSteamRepository_Expecter) Delete(ctx interface{}, ban interface{}, hardDelete interface{}) *MockBanSteamRepository_Delete_Call {
	return &MockBanSteamRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, ban, hardDelete)}
}

func (_c *MockBanSteamRepository_Delete_Call) Run(run func(ctx context.Context, ban *domain.BanSteam, hardDelete bool)) *MockBanSteamRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanSteam), args[2].(bool))
	})
	return _c
}

func (_c *MockBanSteamRepository_Delete_Call) Return(_a0 error) *MockBanSteamRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanSteamRepository_Delete_Call) RunAndReturn(run func(context.Context, *domain.BanSteam, bool) error) *MockBanSteamRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExpiredBans provides a mock function with given fields: ctx
func (_m *MockBanSteamRepository) ExpiredBans(ctx context.Context) ([]domain.BanSteam, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ExpiredBans")
	}

	var r0 []domain.BanSteam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.BanSteam, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.BanSteam); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BanSteam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanSteamRepository_ExpiredBans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpiredBans'
type MockBanSteamRepository_ExpiredBans_Call struct {
	*mock.Call
}

// ExpiredBans is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBanSteamRepository_Expecter) ExpiredBans(ctx interface{}) *MockBanSteamRepository_ExpiredBans_Call {
	return &MockBanSteamRepository_ExpiredBans_Call{Call: _e.mock.On("ExpiredBans", ctx)}
}

func (_c *MockBanSteamRepository_ExpiredBans_Call) Run(run func(ctx context.Context)) *MockBanSteamRepository_ExpiredBans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBanSteamRepository_ExpiredBans_Call) Return(_a0 []domain.BanSteam, _a1 error) *MockBanSteamRepository_ExpiredBans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanSteamRepository_ExpiredBans_Call) RunAndReturn(run func(context.Context) ([]domain.BanSteam, error)) *MockBanSteamRepository_ExpiredBans_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, filter
func (_m *MockBanSteamRepository) Get(ctx context.Context, filter domain.SteamBansQueryFilter) ([]domain.BannedSteamPerson, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.BannedSteamPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SteamBansQueryFilter) ([]domain.BannedSteamPerson, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SteamBansQueryFilter) []domain.BannedSteamPerson); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BannedSteamPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SteamBansQueryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanSteamRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBanSteamRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.SteamBansQueryFilter
func (_e *MockBanSteamRepository_Expecter) Get(ctx interface{}, filter interface{}) *MockBanSteamRepository_Get_Call {
	return &MockBanSteamRepository_Get_Call{Call: _e.mock.On("Get", ctx, filter)}
}

func (_c *MockBanSteamRepository_Get_Call) Run(run func(ctx context.Context, filter domain.SteamBansQueryFilter)) *MockBanSteamRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SteamBansQueryFilter))
	})
	return _c
}

func (_c *MockBanSteamRepository_Get_Call) Return(_a0 []domain.BannedSteamPerson, _a1 error) *MockBanSteamRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanSteamRepository_Get_Call) RunAndReturn(run func(context.Context, domain.SteamBansQueryFilter) ([]domain.BannedSteamPerson, error)) *MockBanSteamRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByBanID provides a mock function with given fields: ctx, banID, deletedOk, evadeOK
func (_m *MockBanSteamRepository) GetByBanID(ctx context.Context, banID int64, deletedOk bool, evadeOK bool) (domain.BannedSteamPerson, error) {
	ret := _m.Called(ctx, banID, deletedOk, evadeOK)

	if len(ret) == 0 {
		panic("no return value specified for GetByBanID")
	}

	var r0 domain.BannedSteamPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, bool) (domain.BannedSteamPerson, error)); ok {
		return rf(ctx, banID, deletedOk, evadeOK)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, bool) domain.BannedSteamPerson); ok {
		r0 = rf(ctx, banID, deletedOk, evadeOK)
	} else {
		r0 = ret.Get(0).(domain.BannedSteamPerson)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool, bool) error); ok {
		r1 = rf(ctx, banID, deletedOk, evadeOK)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanSteamRepository_GetByBanID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByBanID'
type MockBanSteamRepository_GetByBanID_Call struct {
	*mock.Call
}

// GetByBanID is a helper method to define mock.On call
//   - ctx context.Context
//   - banID int64
//   - deletedOk bool
//   - evadeOK bool
func (_e *MockBanSteamRepository_Expecter) GetByBanID(ctx interface{}, banID interface{}, deletedOk interface{}, evadeOK interface{}) *MockBanSteamRepository_GetByBanID_Call {
	return &MockBanSteamRepository_GetByBanID_Call{Call: _e.mock.On("GetByBanID", ctx, banID, deletedOk, evadeOK)}
}

func (_c *MockBanSteamRepository_GetByBanID_Call) Run(run func(ctx context.Context, banID int64, deletedOk bool, evadeOK bool)) *MockBanSteamRepository_GetByBanID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *MockBanSteamRepository_GetByBanID_Call) Return(_a0 domain.BannedSteamPerson, _a1 error) *MockBanSteamRepository_GetByBanID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanSteamRepository_GetByBanID_Call) RunAndReturn(run func(context.Context, int64, bool, bool) (domain.BannedSteamPerson, error)) *MockBanSteamRepository_GetByBanID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLastIP provides a mock function with given fields: ctx, lastIP, deletedOk, evadeOK
func (_m *MockBanSteamRepository) GetByLastIP(ctx context.Context, lastIP netip.Addr, deletedOk bool, evadeOK bool) (domain.BannedSteamPerson, error) {
	ret := _m.Called(ctx, lastIP, deletedOk, evadeOK)

	if len(ret) == 0 {
		panic("no return value specified for GetByLastIP")
	}

	var r0 domain.BannedSteamPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, netip.Addr, bool, bool) (domain.BannedSteamPerson, error)); ok {
		return rf(ctx, lastIP, deletedOk, evadeOK)
	}
	if rf, ok := ret.Get(0).(func(context.Context, netip.Addr, bool, bool) domain.BannedSteamPerson); ok {
		r0 = rf(ctx, lastIP, deletedOk, evadeOK)
	} else {
		r0 = ret.Get(0).(domain.BannedSteamPerson)
	}

	if rf, ok := ret.Get(1).(func(context.Context, netip.Addr, bool, bool) error); ok {
		r1 = rf(ctx, lastIP, deletedOk, evadeOK)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanSteamRepository_GetByLastIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLastIP'
type MockBanSteamRepository_GetByLastIP_Call struct {
	*mock.Call
}

// GetByLastIP is a helper method to define mock.On call
//   - ctx context.Context
//   - lastIP netip.Addr
//   - deletedOk bool
//   - evadeOK bool
func (_e *MockBanSteamRepository_Expecter) GetByLastIP(ctx interface{}, lastIP interface{}, deletedOk interface{}, evadeOK interface{}) *MockBanSteamRepository_GetByLastIP_Call {
	return &MockBanSteamRepository_GetByLastIP_Call{Call: _e.mock.On("GetByLastIP", ctx, lastIP, deletedOk, evadeOK)}
}

func (_c *MockBanSteamRepository_GetByLastIP_Call) Run(run func(ctx context.Context, lastIP netip.Addr, deletedOk bool, evadeOK bool)) *MockBanSteamRepository_GetByLastIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netip.Addr), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *MockBanSteamRepository_GetByLastIP_Call) Return(_a0 domain.BannedSteamPerson, _a1 error) *MockBanSteamRepository_GetByLastIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanSteamRepository_GetByLastIP_Call) RunAndReturn(run func(context.Context, netip.Addr, bool, bool) (domain.BannedSteamPerson, error)) *MockBanSteamRepository_GetByLastIP_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySteamID provides a mock function with given fields: ctx, sid64, deletedOk, evadeOK
func (_m *MockBanSteamRepository) GetBySteamID(ctx context.Context, sid64 steamid.SteamID, deletedOk bool, evadeOK bool) (domain.BannedSteamPerson, error) {
	ret := _m.Called(ctx, sid64, deletedOk, evadeOK)

	if len(ret) == 0 {
		panic("no return value specified for GetBySteamID")
	}

	var r0 domain.BannedSteamPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, bool, bool) (domain.BannedSteamPerson, error)); ok {
		return rf(ctx, sid64, deletedOk, evadeOK)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, bool, bool) domain.BannedSteamPerson); ok {
		r0 = rf(ctx, sid64, deletedOk, evadeOK)
	} else {
		r0 = ret.Get(0).(domain.BannedSteamPerson)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID, bool, bool) error); ok {
		r1 = rf(ctx, sid64, deletedOk, evadeOK)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanSteamRepository_GetBySteamID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySteamID'
type MockBanSteamRepository_GetBySteamID_Call struct {
	*mock.Call
}

// GetBySteamID is a helper method to define mock.On call
//   - ctx context.Context
//   - sid64 steamid.SteamID
//   - deletedOk bool
//   - evadeOK bool
func (_e *MockBanSteamRepository_Expecter) GetBySteamID(ctx interface{}, sid64 interface{}, deletedOk interface{}, evadeOK interface{}) *MockBanSteamRepository_GetBySteamID_Call {
	return &MockBanSteamRepository_GetBySteamID_Call{Call: _e.mock.On("GetBySteamID", ctx, sid64, deletedOk, evadeOK)}
}

func (_c *MockBanSteamRepository_GetBySteamID_Call) Run(run func(ctx context.Context, sid64 steamid.SteamID, deletedOk bool, evadeOK bool)) *MockBanSteamRepository_GetBySteamID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *MockBanSteamRepository_GetBySteamID_Call) Return(_a0 domain.BannedSteamPerson, _a1 error) *MockBanSteamRepository_GetBySteamID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanSteamRepository_GetBySteamID_Call) RunAndReturn(run func(context.Context, steamid.SteamID, bool, bool) (domain.BannedSteamPerson, error)) *MockBanSteamRepository_GetBySteamID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOlderThan provides a mock function with given fields: ctx, filter, since
func (_m *MockBanSteamRepository) GetOlderThan(ctx context.Context, filter domain.QueryFilter, since time.Time) ([]domain.BanSteam, error) {
	ret := _m.Called(ctx, filter, since)

	if len(ret) == 0 {
		panic("no return value specified for GetOlderThan")
	}

	var r0 []domain.BanSteam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.QueryFilter, time.Time) ([]domain.BanSteam, error)); ok {
		return rf(ctx, filter, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.QueryFilter, time.Time) []domain.BanSteam); ok {
		r0 = rf(ctx, filter, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BanSteam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.QueryFilter, time.Time) error); ok {
		r1 = rf(ctx, filter, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBanSteamRepository_GetOlderThan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOlderThan'
type MockBanSteamRepository_GetOlderThan_Call struct {
	*mock.Call
}

// GetOlderThan is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.QueryFilter
//   - since time.Time
func (_e *MockBanSteamRepository_Expecter) GetOlderThan(ctx interface{}, filter interface{}, since interface{}) *MockBanSteamRepository_GetOlderThan_Call {
	return &MockBanSteamRepository_GetOlderThan_Call{Call: _e.mock.On("GetOlderThan", ctx, filter, since)}
}

func (_c *MockBanSteamRepository_GetOlderThan_Call) Run(run func(ctx context.Context, filter domain.QueryFilter, since time.Time)) *MockBanSteamRepository_GetOlderThan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.QueryFilter), args[2].(time.Time))
	})
	return _c
}

func (_c *MockBanSteamRepository_GetOlderThan_Call) Return(_a0 []domain.BanSteam, _a1 error) *MockBanSteamRepository_GetOlderThan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBanSteamRepository_GetOlderThan_Call) RunAndReturn(run func(context.Context, domain.QueryFilter, time.Time) ([]domain.BanSteam, error)) *MockBanSteamRepository_GetOlderThan_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCache provides a mock function with given fields: ctx, steamID, entries
func (_m *MockBanSteamRepository) InsertCache(ctx context.Context, steamID steamid.SteamID, entries []int64) error {
	ret := _m.Called(ctx, steamID, entries)

	if len(ret) == 0 {
		panic("no return value specified for InsertCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, []int64) error); ok {
		r0 = rf(ctx, steamID, entries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanSteamRepository_InsertCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCache'
type MockBanSteamRepository_InsertCache_Call struct {
	*mock.Call
}

// InsertCache is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
//   - entries []int64
func (_e *MockBanSteamRepository_Expecter) InsertCache(ctx interface{}, steamID interface{}, entries interface{}) *MockBanSteamRepository_InsertCache_Call {
	return &MockBanSteamRepository_InsertCache_Call{Call: _e.mock.On("InsertCache", ctx, steamID, entries)}
}

func (_c *MockBanSteamRepository_InsertCache_Call) Run(run func(ctx context.Context, steamID steamid.SteamID, entries []int64)) *MockBanSteamRepository_InsertCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID), args[2].([]int64))
	})
	return _c
}

func (_c *MockBanSteamRepository_InsertCache_Call) Return(_a0 error) *MockBanSteamRepository_InsertCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanSteamRepository_InsertCache_Call) RunAndReturn(run func(context.Context, steamid.SteamID, []int64) error) *MockBanSteamRepository_InsertCache_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, ban
func (_m *MockBanSteamRepository) Save(ctx context.Context, ban *domain.BanSteam) error {
	ret := _m.Called(ctx, ban)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BanSteam) error); ok {
		r0 = rf(ctx, ban)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanSteamRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBanSteamRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - ban *domain.BanSteam
func (_e *MockBanSteamRepository_Expecter) Save(ctx interface{}, ban interface{}) *MockBanSteamRepository_Save_Call {
	return &MockBanSteamRepository_Save_Call{Call: _e.mock.On("Save", ctx, ban)}
}

func (_c *MockBanSteamRepository_Save_Call) Run(run func(ctx context.Context, ban *domain.BanSteam)) *MockBanSteamRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BanSteam))
	})
	return _c
}

func (_c *MockBanSteamRepository_Save_Call) Return(_a0 error) *MockBanSteamRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanSteamRepository_Save_Call) RunAndReturn(run func(context.Context, *domain.BanSteam) error) *MockBanSteamRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function with given fields: ctx, stats
func (_m *MockBanSteamRepository) Stats(ctx context.Context, stats *domain.Stats) error {
	ret := _m.Called(ctx, stats)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Stats) error); ok {
		r0 = rf(ctx, stats)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanSteamRepository_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockBanSteamRepository_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//   - ctx context.Context
//   - stats *domain.Stats
func (_e *MockBanSteamRepository_Expecter) Stats(ctx interface{}, stats interface{}) *MockBanSteamRepository_Stats_Call {
	return &MockBanSteamRepository_Stats_Call{Call: _e.mock.On("Stats", ctx, stats)}
}

func (_c *MockBanSteamRepository_Stats_Call) Run(run func(ctx context.Context, stats *domain.Stats)) *MockBanSteamRepository_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Stats))
	})
	return _c
}

func (_c *MockBanSteamRepository_Stats_Call) Return(_a0 error) *MockBanSteamRepository_Stats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanSteamRepository_Stats_Call) RunAndReturn(run func(context.Context, *domain.Stats) error) *MockBanSteamRepository_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// TruncateCache provides a mock function with given fields: ctx
func (_m *MockBanSteamRepository) TruncateCache(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TruncateCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBanSteamRepository_TruncateCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TruncateCache'
type MockBanSteamRepository_TruncateCache_Call struct {
	*mock.Call
}

// TruncateCache is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBanSteamRepository_Expecter) TruncateCache(ctx interface{}) *MockBanSteamRepository_TruncateCache_Call {
	return &MockBanSteamRepository_TruncateCache_Call{Call: _e.mock.On("TruncateCache", ctx)}
}

func (_c *MockBanSteamRepository_TruncateCache_Call) Run(run func(ctx context.Context)) *MockBanSteamRepository_TruncateCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBanSteamRepository_TruncateCache_Call) Return(_a0 error) *MockBanSteamRepository_TruncateCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBanSteamRepository_TruncateCache_Call) RunAndReturn(run func(context.Context) error) *MockBanSteamRepository_TruncateCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBanSteamRepository creates a new instance of MockBanSteamRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBanSteamRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBanSteamRepository {
	mock := &MockBanSteamRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
