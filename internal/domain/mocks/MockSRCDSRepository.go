// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	netip "net/netip"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"
)

// MockSRCDSRepository is an autogenerated mock type for the SRCDSRepository type
type MockSRCDSRepository struct {
	mock.Mock
}

type MockSRCDSRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSRCDSRepository) EXPECT() *MockSRCDSRepository_Expecter {
	return &MockSRCDSRepository_Expecter{mock: &_m.Mock}
}

// AddAdmin provides a mock function with given fields: ctx, admin
func (_m *MockSRCDSRepository) AddAdmin(ctx context.Context, admin domain.SMAdmin) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, admin)

	if len(ret) == 0 {
		panic("no return value specified for AddAdmin")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) (domain.SMAdmin, error)); ok {
		return rf(ctx, admin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) domain.SMAdmin); ok {
		r0 = rf(ctx, admin)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMAdmin) error); ok {
		r1 = rf(ctx, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_AddAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAdmin'
type MockSRCDSRepository_AddAdmin_Call struct {
	*mock.Call
}

// AddAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
func (_e *MockSRCDSRepository_Expecter) AddAdmin(ctx interface{}, admin interface{}) *MockSRCDSRepository_AddAdmin_Call {
	return &MockSRCDSRepository_AddAdmin_Call{Call: _e.mock.On("AddAdmin", ctx, admin)}
}

func (_c *MockSRCDSRepository_AddAdmin_Call) Run(run func(ctx context.Context, admin domain.SMAdmin)) *MockSRCDSRepository_AddAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin))
	})
	return _c
}

func (_c *MockSRCDSRepository_AddAdmin_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSRepository_AddAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_AddAdmin_Call) RunAndReturn(run func(context.Context, domain.SMAdmin) (domain.SMAdmin, error)) *MockSRCDSRepository_AddAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroup provides a mock function with given fields: ctx, group
func (_m *MockSRCDSRepository) AddGroup(ctx context.Context, group domain.SMGroups) (domain.SMGroups, error) {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for AddGroup")
	}

	var r0 domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) (domain.SMGroups, error)); ok {
		return rf(ctx, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) domain.SMGroups); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(domain.SMGroups)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMGroups) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_AddGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroup'
type MockSRCDSRepository_AddGroup_Call struct {
	*mock.Call
}

// AddGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - group domain.SMGroups
func (_e *MockSRCDSRepository_Expecter) AddGroup(ctx interface{}, group interface{}) *MockSRCDSRepository_AddGroup_Call {
	return &MockSRCDSRepository_AddGroup_Call{Call: _e.mock.On("AddGroup", ctx, group)}
}

func (_c *MockSRCDSRepository_AddGroup_Call) Run(run func(ctx context.Context, group domain.SMGroups)) *MockSRCDSRepository_AddGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroups))
	})
	return _c
}

func (_c *MockSRCDSRepository_AddGroup_Call) Return(_a0 domain.SMGroups, _a1 error) *MockSRCDSRepository_AddGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_AddGroup_Call) RunAndReturn(run func(context.Context, domain.SMGroups) (domain.SMGroups, error)) *MockSRCDSRepository_AddGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupImmunity provides a mock function with given fields: ctx, group, other
func (_m *MockSRCDSRepository) AddGroupImmunity(ctx context.Context, group domain.SMGroups, other domain.SMGroups) (domain.SMGroupImmunity, error) {
	ret := _m.Called(ctx, group, other)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupImmunity")
	}

	var r0 domain.SMGroupImmunity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups, domain.SMGroups) (domain.SMGroupImmunity, error)); ok {
		return rf(ctx, group, other)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups, domain.SMGroups) domain.SMGroupImmunity); ok {
		r0 = rf(ctx, group, other)
	} else {
		r0 = ret.Get(0).(domain.SMGroupImmunity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMGroups, domain.SMGroups) error); ok {
		r1 = rf(ctx, group, other)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_AddGroupImmunity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupImmunity'
type MockSRCDSRepository_AddGroupImmunity_Call struct {
	*mock.Call
}

// AddGroupImmunity is a helper method to define mock.On call
//   - ctx context.Context
//   - group domain.SMGroups
//   - other domain.SMGroups
func (_e *MockSRCDSRepository_Expecter) AddGroupImmunity(ctx interface{}, group interface{}, other interface{}) *MockSRCDSRepository_AddGroupImmunity_Call {
	return &MockSRCDSRepository_AddGroupImmunity_Call{Call: _e.mock.On("AddGroupImmunity", ctx, group, other)}
}

func (_c *MockSRCDSRepository_AddGroupImmunity_Call) Run(run func(ctx context.Context, group domain.SMGroups, other domain.SMGroups)) *MockSRCDSRepository_AddGroupImmunity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroups), args[2].(domain.SMGroups))
	})
	return _c
}

func (_c *MockSRCDSRepository_AddGroupImmunity_Call) Return(_a0 domain.SMGroupImmunity, _a1 error) *MockSRCDSRepository_AddGroupImmunity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_AddGroupImmunity_Call) RunAndReturn(run func(context.Context, domain.SMGroups, domain.SMGroups) (domain.SMGroupImmunity, error)) *MockSRCDSRepository_AddGroupImmunity_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupOverride provides a mock function with given fields: ctx, override
func (_m *MockSRCDSRepository) AddGroupOverride(ctx context.Context, override domain.SMGroupOverrides) (domain.SMGroupOverrides, error) {
	ret := _m.Called(ctx, override)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupOverride")
	}

	var r0 domain.SMGroupOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroupOverrides) (domain.SMGroupOverrides, error)); ok {
		return rf(ctx, override)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroupOverrides) domain.SMGroupOverrides); ok {
		r0 = rf(ctx, override)
	} else {
		r0 = ret.Get(0).(domain.SMGroupOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMGroupOverrides) error); ok {
		r1 = rf(ctx, override)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_AddGroupOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupOverride'
type MockSRCDSRepository_AddGroupOverride_Call struct {
	*mock.Call
}

// AddGroupOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - override domain.SMGroupOverrides
func (_e *MockSRCDSRepository_Expecter) AddGroupOverride(ctx interface{}, override interface{}) *MockSRCDSRepository_AddGroupOverride_Call {
	return &MockSRCDSRepository_AddGroupOverride_Call{Call: _e.mock.On("AddGroupOverride", ctx, override)}
}

func (_c *MockSRCDSRepository_AddGroupOverride_Call) Run(run func(ctx context.Context, override domain.SMGroupOverrides)) *MockSRCDSRepository_AddGroupOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroupOverrides))
	})
	return _c
}

func (_c *MockSRCDSRepository_AddGroupOverride_Call) Return(_a0 domain.SMGroupOverrides, _a1 error) *MockSRCDSRepository_AddGroupOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_AddGroupOverride_Call) RunAndReturn(run func(context.Context, domain.SMGroupOverrides) (domain.SMGroupOverrides, error)) *MockSRCDSRepository_AddGroupOverride_Call {
	_c.Call.Return(run)
	return _c
}

// AddOverride provides a mock function with given fields: ctx, overrides
func (_m *MockSRCDSRepository) AddOverride(ctx context.Context, overrides domain.SMOverrides) (domain.SMOverrides, error) {
	ret := _m.Called(ctx, overrides)

	if len(ret) == 0 {
		panic("no return value specified for AddOverride")
	}

	var r0 domain.SMOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMOverrides) (domain.SMOverrides, error)); ok {
		return rf(ctx, overrides)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMOverrides) domain.SMOverrides); ok {
		r0 = rf(ctx, overrides)
	} else {
		r0 = ret.Get(0).(domain.SMOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMOverrides) error); ok {
		r1 = rf(ctx, overrides)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_AddOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOverride'
type MockSRCDSRepository_AddOverride_Call struct {
	*mock.Call
}

// AddOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - overrides domain.SMOverrides
func (_e *MockSRCDSRepository_Expecter) AddOverride(ctx interface{}, overrides interface{}) *MockSRCDSRepository_AddOverride_Call {
	return &MockSRCDSRepository_AddOverride_Call{Call: _e.mock.On("AddOverride", ctx, overrides)}
}

func (_c *MockSRCDSRepository_AddOverride_Call) Run(run func(ctx context.Context, overrides domain.SMOverrides)) *MockSRCDSRepository_AddOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMOverrides))
	})
	return _c
}

func (_c *MockSRCDSRepository_AddOverride_Call) Return(_a0 domain.SMOverrides, _a1 error) *MockSRCDSRepository_AddOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_AddOverride_Call) RunAndReturn(run func(context.Context, domain.SMOverrides) (domain.SMOverrides, error)) *MockSRCDSRepository_AddOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Admins provides a mock function with given fields: ctx
func (_m *MockSRCDSRepository) Admins(ctx context.Context) ([]domain.SMAdmin, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Admins")
	}

	var r0 []domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.SMAdmin, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SMAdmin); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMAdmin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_Admins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Admins'
type MockSRCDSRepository_Admins_Call struct {
	*mock.Call
}

// Admins is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSRCDSRepository_Expecter) Admins(ctx interface{}) *MockSRCDSRepository_Admins_Call {
	return &MockSRCDSRepository_Admins_Call{Call: _e.mock.On("Admins", ctx)}
}

func (_c *MockSRCDSRepository_Admins_Call) Run(run func(ctx context.Context)) *MockSRCDSRepository_Admins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSRCDSRepository_Admins_Call) Return(_a0 []domain.SMAdmin, _a1 error) *MockSRCDSRepository_Admins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_Admins_Call) RunAndReturn(run func(context.Context) ([]domain.SMAdmin, error)) *MockSRCDSRepository_Admins_Call {
	_c.Call.Return(run)
	return _c
}

// DelAdmin provides a mock function with given fields: ctx, admin
func (_m *MockSRCDSRepository) DelAdmin(ctx context.Context, admin domain.SMAdmin) error {
	ret := _m.Called(ctx, admin)

	if len(ret) == 0 {
		panic("no return value specified for DelAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) error); ok {
		r0 = rf(ctx, admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSRepository_DelAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelAdmin'
type MockSRCDSRepository_DelAdmin_Call struct {
	*mock.Call
}

// DelAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
func (_e *MockSRCDSRepository_Expecter) DelAdmin(ctx interface{}, admin interface{}) *MockSRCDSRepository_DelAdmin_Call {
	return &MockSRCDSRepository_DelAdmin_Call{Call: _e.mock.On("DelAdmin", ctx, admin)}
}

func (_c *MockSRCDSRepository_DelAdmin_Call) Run(run func(ctx context.Context, admin domain.SMAdmin)) *MockSRCDSRepository_DelAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin))
	})
	return _c
}

func (_c *MockSRCDSRepository_DelAdmin_Call) Return(_a0 error) *MockSRCDSRepository_DelAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSRepository_DelAdmin_Call) RunAndReturn(run func(context.Context, domain.SMAdmin) error) *MockSRCDSRepository_DelAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// DelGroupImmunity provides a mock function with given fields: ctx, groupImmunity
func (_m *MockSRCDSRepository) DelGroupImmunity(ctx context.Context, groupImmunity domain.SMGroupImmunity) error {
	ret := _m.Called(ctx, groupImmunity)

	if len(ret) == 0 {
		panic("no return value specified for DelGroupImmunity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroupImmunity) error); ok {
		r0 = rf(ctx, groupImmunity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSRepository_DelGroupImmunity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelGroupImmunity'
type MockSRCDSRepository_DelGroupImmunity_Call struct {
	*mock.Call
}

// DelGroupImmunity is a helper method to define mock.On call
//   - ctx context.Context
//   - groupImmunity domain.SMGroupImmunity
func (_e *MockSRCDSRepository_Expecter) DelGroupImmunity(ctx interface{}, groupImmunity interface{}) *MockSRCDSRepository_DelGroupImmunity_Call {
	return &MockSRCDSRepository_DelGroupImmunity_Call{Call: _e.mock.On("DelGroupImmunity", ctx, groupImmunity)}
}

func (_c *MockSRCDSRepository_DelGroupImmunity_Call) Run(run func(ctx context.Context, groupImmunity domain.SMGroupImmunity)) *MockSRCDSRepository_DelGroupImmunity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroupImmunity))
	})
	return _c
}

func (_c *MockSRCDSRepository_DelGroupImmunity_Call) Return(_a0 error) *MockSRCDSRepository_DelGroupImmunity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSRepository_DelGroupImmunity_Call) RunAndReturn(run func(context.Context, domain.SMGroupImmunity) error) *MockSRCDSRepository_DelGroupImmunity_Call {
	_c.Call.Return(run)
	return _c
}

// DelGroupOverride provides a mock function with given fields: ctx, override
func (_m *MockSRCDSRepository) DelGroupOverride(ctx context.Context, override domain.SMGroupOverrides) error {
	ret := _m.Called(ctx, override)

	if len(ret) == 0 {
		panic("no return value specified for DelGroupOverride")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroupOverrides) error); ok {
		r0 = rf(ctx, override)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSRepository_DelGroupOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelGroupOverride'
type MockSRCDSRepository_DelGroupOverride_Call struct {
	*mock.Call
}

// DelGroupOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - override domain.SMGroupOverrides
func (_e *MockSRCDSRepository_Expecter) DelGroupOverride(ctx interface{}, override interface{}) *MockSRCDSRepository_DelGroupOverride_Call {
	return &MockSRCDSRepository_DelGroupOverride_Call{Call: _e.mock.On("DelGroupOverride", ctx, override)}
}

func (_c *MockSRCDSRepository_DelGroupOverride_Call) Run(run func(ctx context.Context, override domain.SMGroupOverrides)) *MockSRCDSRepository_DelGroupOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroupOverrides))
	})
	return _c
}

func (_c *MockSRCDSRepository_DelGroupOverride_Call) Return(_a0 error) *MockSRCDSRepository_DelGroupOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSRepository_DelGroupOverride_Call) RunAndReturn(run func(context.Context, domain.SMGroupOverrides) error) *MockSRCDSRepository_DelGroupOverride_Call {
	_c.Call.Return(run)
	return _c
}

// DelOverride provides a mock function with given fields: ctx, override
func (_m *MockSRCDSRepository) DelOverride(ctx context.Context, override domain.SMOverrides) error {
	ret := _m.Called(ctx, override)

	if len(ret) == 0 {
		panic("no return value specified for DelOverride")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMOverrides) error); ok {
		r0 = rf(ctx, override)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSRepository_DelOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelOverride'
type MockSRCDSRepository_DelOverride_Call struct {
	*mock.Call
}

// DelOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - override domain.SMOverrides
func (_e *MockSRCDSRepository_Expecter) DelOverride(ctx interface{}, override interface{}) *MockSRCDSRepository_DelOverride_Call {
	return &MockSRCDSRepository_DelOverride_Call{Call: _e.mock.On("DelOverride", ctx, override)}
}

func (_c *MockSRCDSRepository_DelOverride_Call) Run(run func(ctx context.Context, override domain.SMOverrides)) *MockSRCDSRepository_DelOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMOverrides))
	})
	return _c
}

func (_c *MockSRCDSRepository_DelOverride_Call) Return(_a0 error) *MockSRCDSRepository_DelOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSRepository_DelOverride_Call) RunAndReturn(run func(context.Context, domain.SMOverrides) error) *MockSRCDSRepository_DelOverride_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAdminGroup provides a mock function with given fields: ctx, admin, group
func (_m *MockSRCDSRepository) DeleteAdminGroup(ctx context.Context, admin domain.SMAdmin, group domain.SMGroups) error {
	ret := _m.Called(ctx, admin, group)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdminGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin, domain.SMGroups) error); ok {
		r0 = rf(ctx, admin, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSRepository_DeleteAdminGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAdminGroup'
type MockSRCDSRepository_DeleteAdminGroup_Call struct {
	*mock.Call
}

// DeleteAdminGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
//   - group domain.SMGroups
func (_e *MockSRCDSRepository_Expecter) DeleteAdminGroup(ctx interface{}, admin interface{}, group interface{}) *MockSRCDSRepository_DeleteAdminGroup_Call {
	return &MockSRCDSRepository_DeleteAdminGroup_Call{Call: _e.mock.On("DeleteAdminGroup", ctx, admin, group)}
}

func (_c *MockSRCDSRepository_DeleteAdminGroup_Call) Run(run func(ctx context.Context, admin domain.SMAdmin, group domain.SMGroups)) *MockSRCDSRepository_DeleteAdminGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin), args[2].(domain.SMGroups))
	})
	return _c
}

func (_c *MockSRCDSRepository_DeleteAdminGroup_Call) Return(_a0 error) *MockSRCDSRepository_DeleteAdminGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSRepository_DeleteAdminGroup_Call) RunAndReturn(run func(context.Context, domain.SMAdmin, domain.SMGroups) error) *MockSRCDSRepository_DeleteAdminGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAdminGroups provides a mock function with given fields: ctx, admin
func (_m *MockSRCDSRepository) DeleteAdminGroups(ctx context.Context, admin domain.SMAdmin) error {
	ret := _m.Called(ctx, admin)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdminGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) error); ok {
		r0 = rf(ctx, admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSRepository_DeleteAdminGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAdminGroups'
type MockSRCDSRepository_DeleteAdminGroups_Call struct {
	*mock.Call
}

// DeleteAdminGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
func (_e *MockSRCDSRepository_Expecter) DeleteAdminGroups(ctx interface{}, admin interface{}) *MockSRCDSRepository_DeleteAdminGroups_Call {
	return &MockSRCDSRepository_DeleteAdminGroups_Call{Call: _e.mock.On("DeleteAdminGroups", ctx, admin)}
}

func (_c *MockSRCDSRepository_DeleteAdminGroups_Call) Run(run func(ctx context.Context, admin domain.SMAdmin)) *MockSRCDSRepository_DeleteAdminGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin))
	})
	return _c
}

func (_c *MockSRCDSRepository_DeleteAdminGroups_Call) Return(_a0 error) *MockSRCDSRepository_DeleteAdminGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSRepository_DeleteAdminGroups_Call) RunAndReturn(run func(context.Context, domain.SMAdmin) error) *MockSRCDSRepository_DeleteAdminGroups_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, group
func (_m *MockSRCDSRepository) DeleteGroup(ctx context.Context, group domain.SMGroups) error {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSRepository_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockSRCDSRepository_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - group domain.SMGroups
func (_e *MockSRCDSRepository_Expecter) DeleteGroup(ctx interface{}, group interface{}) *MockSRCDSRepository_DeleteGroup_Call {
	return &MockSRCDSRepository_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, group)}
}

func (_c *MockSRCDSRepository_DeleteGroup_Call) Run(run func(ctx context.Context, group domain.SMGroups)) *MockSRCDSRepository_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroups))
	})
	return _c
}

func (_c *MockSRCDSRepository_DeleteGroup_Call) Return(_a0 error) *MockSRCDSRepository_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSRepository_DeleteGroup_Call) RunAndReturn(run func(context.Context, domain.SMGroups) error) *MockSRCDSRepository_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdminByID provides a mock function with given fields: ctx, adminID
func (_m *MockSRCDSRepository) GetAdminByID(ctx context.Context, adminID int) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, adminID)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminByID")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMAdmin, error)); ok {
		return rf(ctx, adminID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMAdmin); ok {
		r0 = rf(ctx, adminID)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetAdminByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminByID'
type MockSRCDSRepository_GetAdminByID_Call struct {
	*mock.Call
}

// GetAdminByID is a helper method to define mock.On call
//   - ctx context.Context
//   - adminID int
func (_e *MockSRCDSRepository_Expecter) GetAdminByID(ctx interface{}, adminID interface{}) *MockSRCDSRepository_GetAdminByID_Call {
	return &MockSRCDSRepository_GetAdminByID_Call{Call: _e.mock.On("GetAdminByID", ctx, adminID)}
}

func (_c *MockSRCDSRepository_GetAdminByID_Call) Run(run func(ctx context.Context, adminID int)) *MockSRCDSRepository_GetAdminByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetAdminByID_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSRepository_GetAdminByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetAdminByID_Call) RunAndReturn(run func(context.Context, int) (domain.SMAdmin, error)) *MockSRCDSRepository_GetAdminByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdminByIdentity provides a mock function with given fields: ctx, authType, identity
func (_m *MockSRCDSRepository) GetAdminByIdentity(ctx context.Context, authType domain.AuthType, identity string) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, authType, identity)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminByIdentity")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.AuthType, string) (domain.SMAdmin, error)); ok {
		return rf(ctx, authType, identity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.AuthType, string) domain.SMAdmin); ok {
		r0 = rf(ctx, authType, identity)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.AuthType, string) error); ok {
		r1 = rf(ctx, authType, identity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetAdminByIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminByIdentity'
type MockSRCDSRepository_GetAdminByIdentity_Call struct {
	*mock.Call
}

// GetAdminByIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - authType domain.AuthType
//   - identity string
func (_e *MockSRCDSRepository_Expecter) GetAdminByIdentity(ctx interface{}, authType interface{}, identity interface{}) *MockSRCDSRepository_GetAdminByIdentity_Call {
	return &MockSRCDSRepository_GetAdminByIdentity_Call{Call: _e.mock.On("GetAdminByIdentity", ctx, authType, identity)}
}

func (_c *MockSRCDSRepository_GetAdminByIdentity_Call) Run(run func(ctx context.Context, authType domain.AuthType, identity string)) *MockSRCDSRepository_GetAdminByIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.AuthType), args[2].(string))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetAdminByIdentity_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSRepository_GetAdminByIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetAdminByIdentity_Call) RunAndReturn(run func(context.Context, domain.AuthType, string) (domain.SMAdmin, error)) *MockSRCDSRepository_GetAdminByIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdminGroups provides a mock function with given fields: ctx, admin
func (_m *MockSRCDSRepository) GetAdminGroups(ctx context.Context, admin domain.SMAdmin) ([]domain.SMGroups, error) {
	ret := _m.Called(ctx, admin)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminGroups")
	}

	var r0 []domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) ([]domain.SMGroups, error)); ok {
		return rf(ctx, admin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) []domain.SMGroups); ok {
		r0 = rf(ctx, admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMGroups)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMAdmin) error); ok {
		r1 = rf(ctx, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetAdminGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminGroups'
type MockSRCDSRepository_GetAdminGroups_Call struct {
	*mock.Call
}

// GetAdminGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
func (_e *MockSRCDSRepository_Expecter) GetAdminGroups(ctx interface{}, admin interface{}) *MockSRCDSRepository_GetAdminGroups_Call {
	return &MockSRCDSRepository_GetAdminGroups_Call{Call: _e.mock.On("GetAdminGroups", ctx, admin)}
}

func (_c *MockSRCDSRepository_GetAdminGroups_Call) Run(run func(ctx context.Context, admin domain.SMAdmin)) *MockSRCDSRepository_GetAdminGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetAdminGroups_Call) Return(_a0 []domain.SMGroups, _a1 error) *MockSRCDSRepository_GetAdminGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetAdminGroups_Call) RunAndReturn(run func(context.Context, domain.SMAdmin) ([]domain.SMGroups, error)) *MockSRCDSRepository_GetAdminGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByID provides a mock function with given fields: ctx, groupID
func (_m *MockSRCDSRepository) GetGroupByID(ctx context.Context, groupID int) (domain.SMGroups, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByID")
	}

	var r0 domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMGroups, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMGroups); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Get(0).(domain.SMGroups)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetGroupByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByID'
type MockSRCDSRepository_GetGroupByID_Call struct {
	*mock.Call
}

// GetGroupByID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID int
func (_e *MockSRCDSRepository_Expecter) GetGroupByID(ctx interface{}, groupID interface{}) *MockSRCDSRepository_GetGroupByID_Call {
	return &MockSRCDSRepository_GetGroupByID_Call{Call: _e.mock.On("GetGroupByID", ctx, groupID)}
}

func (_c *MockSRCDSRepository_GetGroupByID_Call) Run(run func(ctx context.Context, groupID int)) *MockSRCDSRepository_GetGroupByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetGroupByID_Call) Return(_a0 domain.SMGroups, _a1 error) *MockSRCDSRepository_GetGroupByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetGroupByID_Call) RunAndReturn(run func(context.Context, int) (domain.SMGroups, error)) *MockSRCDSRepository_GetGroupByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByName provides a mock function with given fields: ctx, groupName
func (_m *MockSRCDSRepository) GetGroupByName(ctx context.Context, groupName string) (domain.SMGroups, error) {
	ret := _m.Called(ctx, groupName)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByName")
	}

	var r0 domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.SMGroups, error)); ok {
		return rf(ctx, groupName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.SMGroups); ok {
		r0 = rf(ctx, groupName)
	} else {
		r0 = ret.Get(0).(domain.SMGroups)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetGroupByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByName'
type MockSRCDSRepository_GetGroupByName_Call struct {
	*mock.Call
}

// GetGroupByName is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
func (_e *MockSRCDSRepository_Expecter) GetGroupByName(ctx interface{}, groupName interface{}) *MockSRCDSRepository_GetGroupByName_Call {
	return &MockSRCDSRepository_GetGroupByName_Call{Call: _e.mock.On("GetGroupByName", ctx, groupName)}
}

func (_c *MockSRCDSRepository_GetGroupByName_Call) Run(run func(ctx context.Context, groupName string)) *MockSRCDSRepository_GetGroupByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetGroupByName_Call) Return(_a0 domain.SMGroups, _a1 error) *MockSRCDSRepository_GetGroupByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetGroupByName_Call) RunAndReturn(run func(context.Context, string) (domain.SMGroups, error)) *MockSRCDSRepository_GetGroupByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupImmunities provides a mock function with given fields: ctx
func (_m *MockSRCDSRepository) GetGroupImmunities(ctx context.Context) ([]domain.SMGroupImmunity, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupImmunities")
	}

	var r0 []domain.SMGroupImmunity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.SMGroupImmunity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SMGroupImmunity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMGroupImmunity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetGroupImmunities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupImmunities'
type MockSRCDSRepository_GetGroupImmunities_Call struct {
	*mock.Call
}

// GetGroupImmunities is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSRCDSRepository_Expecter) GetGroupImmunities(ctx interface{}) *MockSRCDSRepository_GetGroupImmunities_Call {
	return &MockSRCDSRepository_GetGroupImmunities_Call{Call: _e.mock.On("GetGroupImmunities", ctx)}
}

func (_c *MockSRCDSRepository_GetGroupImmunities_Call) Run(run func(ctx context.Context)) *MockSRCDSRepository_GetGroupImmunities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetGroupImmunities_Call) Return(_a0 []domain.SMGroupImmunity, _a1 error) *MockSRCDSRepository_GetGroupImmunities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetGroupImmunities_Call) RunAndReturn(run func(context.Context) ([]domain.SMGroupImmunity, error)) *MockSRCDSRepository_GetGroupImmunities_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupImmunityByID provides a mock function with given fields: ctx, groupImmunityID
func (_m *MockSRCDSRepository) GetGroupImmunityByID(ctx context.Context, groupImmunityID int) (domain.SMGroupImmunity, error) {
	ret := _m.Called(ctx, groupImmunityID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupImmunityByID")
	}

	var r0 domain.SMGroupImmunity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMGroupImmunity, error)); ok {
		return rf(ctx, groupImmunityID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMGroupImmunity); ok {
		r0 = rf(ctx, groupImmunityID)
	} else {
		r0 = ret.Get(0).(domain.SMGroupImmunity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupImmunityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetGroupImmunityByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupImmunityByID'
type MockSRCDSRepository_GetGroupImmunityByID_Call struct {
	*mock.Call
}

// GetGroupImmunityByID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupImmunityID int
func (_e *MockSRCDSRepository_Expecter) GetGroupImmunityByID(ctx interface{}, groupImmunityID interface{}) *MockSRCDSRepository_GetGroupImmunityByID_Call {
	return &MockSRCDSRepository_GetGroupImmunityByID_Call{Call: _e.mock.On("GetGroupImmunityByID", ctx, groupImmunityID)}
}

func (_c *MockSRCDSRepository_GetGroupImmunityByID_Call) Run(run func(ctx context.Context, groupImmunityID int)) *MockSRCDSRepository_GetGroupImmunityByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetGroupImmunityByID_Call) Return(_a0 domain.SMGroupImmunity, _a1 error) *MockSRCDSRepository_GetGroupImmunityByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetGroupImmunityByID_Call) RunAndReturn(run func(context.Context, int) (domain.SMGroupImmunity, error)) *MockSRCDSRepository_GetGroupImmunityByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupOverride provides a mock function with given fields: ctx, overrideID
func (_m *MockSRCDSRepository) GetGroupOverride(ctx context.Context, overrideID int) (domain.SMGroupOverrides, error) {
	ret := _m.Called(ctx, overrideID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupOverride")
	}

	var r0 domain.SMGroupOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMGroupOverrides, error)); ok {
		return rf(ctx, overrideID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMGroupOverrides); ok {
		r0 = rf(ctx, overrideID)
	} else {
		r0 = ret.Get(0).(domain.SMGroupOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, overrideID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetGroupOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupOverride'
type MockSRCDSRepository_GetGroupOverride_Call struct {
	*mock.Call
}

// GetGroupOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - overrideID int
func (_e *MockSRCDSRepository_Expecter) GetGroupOverride(ctx interface{}, overrideID interface{}) *MockSRCDSRepository_GetGroupOverride_Call {
	return &MockSRCDSRepository_GetGroupOverride_Call{Call: _e.mock.On("GetGroupOverride", ctx, overrideID)}
}

func (_c *MockSRCDSRepository_GetGroupOverride_Call) Run(run func(ctx context.Context, overrideID int)) *MockSRCDSRepository_GetGroupOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetGroupOverride_Call) Return(_a0 domain.SMGroupOverrides, _a1 error) *MockSRCDSRepository_GetGroupOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetGroupOverride_Call) RunAndReturn(run func(context.Context, int) (domain.SMGroupOverrides, error)) *MockSRCDSRepository_GetGroupOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GetOverride provides a mock function with given fields: ctx, overrideID
func (_m *MockSRCDSRepository) GetOverride(ctx context.Context, overrideID int) (domain.SMOverrides, error) {
	ret := _m.Called(ctx, overrideID)

	if len(ret) == 0 {
		panic("no return value specified for GetOverride")
	}

	var r0 domain.SMOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMOverrides, error)); ok {
		return rf(ctx, overrideID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMOverrides); ok {
		r0 = rf(ctx, overrideID)
	} else {
		r0 = ret.Get(0).(domain.SMOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, overrideID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GetOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOverride'
type MockSRCDSRepository_GetOverride_Call struct {
	*mock.Call
}

// GetOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - overrideID int
func (_e *MockSRCDSRepository_Expecter) GetOverride(ctx interface{}, overrideID interface{}) *MockSRCDSRepository_GetOverride_Call {
	return &MockSRCDSRepository_GetOverride_Call{Call: _e.mock.On("GetOverride", ctx, overrideID)}
}

func (_c *MockSRCDSRepository_GetOverride_Call) Run(run func(ctx context.Context, overrideID int)) *MockSRCDSRepository_GetOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSRepository_GetOverride_Call) Return(_a0 domain.SMOverrides, _a1 error) *MockSRCDSRepository_GetOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GetOverride_Call) RunAndReturn(run func(context.Context, int) (domain.SMOverrides, error)) *MockSRCDSRepository_GetOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GroupOverrides provides a mock function with given fields: ctx, group
func (_m *MockSRCDSRepository) GroupOverrides(ctx context.Context, group domain.SMGroups) ([]domain.SMGroupOverrides, error) {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for GroupOverrides")
	}

	var r0 []domain.SMGroupOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) ([]domain.SMGroupOverrides, error)); ok {
		return rf(ctx, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) []domain.SMGroupOverrides); ok {
		r0 = rf(ctx, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMGroupOverrides)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMGroups) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_GroupOverrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupOverrides'
type MockSRCDSRepository_GroupOverrides_Call struct {
	*mock.Call
}

// GroupOverrides is a helper method to define mock.On call
//   - ctx context.Context
//   - group domain.SMGroups
func (_e *MockSRCDSRepository_Expecter) GroupOverrides(ctx interface{}, group interface{}) *MockSRCDSRepository_GroupOverrides_Call {
	return &MockSRCDSRepository_GroupOverrides_Call{Call: _e.mock.On("GroupOverrides", ctx, group)}
}

func (_c *MockSRCDSRepository_GroupOverrides_Call) Run(run func(ctx context.Context, group domain.SMGroups)) *MockSRCDSRepository_GroupOverrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroups))
	})
	return _c
}

func (_c *MockSRCDSRepository_GroupOverrides_Call) Return(_a0 []domain.SMGroupOverrides, _a1 error) *MockSRCDSRepository_GroupOverrides_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_GroupOverrides_Call) RunAndReturn(run func(context.Context, domain.SMGroups) ([]domain.SMGroupOverrides, error)) *MockSRCDSRepository_GroupOverrides_Call {
	_c.Call.Return(run)
	return _c
}

// Groups provides a mock function with given fields: ctx
func (_m *MockSRCDSRepository) Groups(ctx context.Context) ([]domain.SMGroups, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Groups")
	}

	var r0 []domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.SMGroups, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SMGroups); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMGroups)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_Groups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Groups'
type MockSRCDSRepository_Groups_Call struct {
	*mock.Call
}

// Groups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSRCDSRepository_Expecter) Groups(ctx interface{}) *MockSRCDSRepository_Groups_Call {
	return &MockSRCDSRepository_Groups_Call{Call: _e.mock.On("Groups", ctx)}
}

func (_c *MockSRCDSRepository_Groups_Call) Run(run func(ctx context.Context)) *MockSRCDSRepository_Groups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSRCDSRepository_Groups_Call) Return(_a0 []domain.SMGroups, _a1 error) *MockSRCDSRepository_Groups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_Groups_Call) RunAndReturn(run func(context.Context) ([]domain.SMGroups, error)) *MockSRCDSRepository_Groups_Call {
	_c.Call.Return(run)
	return _c
}

// InsertAdminGroup provides a mock function with given fields: ctx, admin, group, inheritOrder
func (_m *MockSRCDSRepository) InsertAdminGroup(ctx context.Context, admin domain.SMAdmin, group domain.SMGroups, inheritOrder int) error {
	ret := _m.Called(ctx, admin, group, inheritOrder)

	if len(ret) == 0 {
		panic("no return value specified for InsertAdminGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin, domain.SMGroups, int) error); ok {
		r0 = rf(ctx, admin, group, inheritOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSRepository_InsertAdminGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAdminGroup'
type MockSRCDSRepository_InsertAdminGroup_Call struct {
	*mock.Call
}

// InsertAdminGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
//   - group domain.SMGroups
//   - inheritOrder int
func (_e *MockSRCDSRepository_Expecter) InsertAdminGroup(ctx interface{}, admin interface{}, group interface{}, inheritOrder interface{}) *MockSRCDSRepository_InsertAdminGroup_Call {
	return &MockSRCDSRepository_InsertAdminGroup_Call{Call: _e.mock.On("InsertAdminGroup", ctx, admin, group, inheritOrder)}
}

func (_c *MockSRCDSRepository_InsertAdminGroup_Call) Run(run func(ctx context.Context, admin domain.SMAdmin, group domain.SMGroups, inheritOrder int)) *MockSRCDSRepository_InsertAdminGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin), args[2].(domain.SMGroups), args[3].(int))
	})
	return _c
}

func (_c *MockSRCDSRepository_InsertAdminGroup_Call) Return(_a0 error) *MockSRCDSRepository_InsertAdminGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSRepository_InsertAdminGroup_Call) RunAndReturn(run func(context.Context, domain.SMAdmin, domain.SMGroups, int) error) *MockSRCDSRepository_InsertAdminGroup_Call {
	_c.Call.Return(run)
	return _c
}

// Overrides provides a mock function with given fields: ctx
func (_m *MockSRCDSRepository) Overrides(ctx context.Context) ([]domain.SMOverrides, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Overrides")
	}

	var r0 []domain.SMOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.SMOverrides, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SMOverrides); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMOverrides)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_Overrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Overrides'
type MockSRCDSRepository_Overrides_Call struct {
	*mock.Call
}

// Overrides is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSRCDSRepository_Expecter) Overrides(ctx interface{}) *MockSRCDSRepository_Overrides_Call {
	return &MockSRCDSRepository_Overrides_Call{Call: _e.mock.On("Overrides", ctx)}
}

func (_c *MockSRCDSRepository_Overrides_Call) Run(run func(ctx context.Context)) *MockSRCDSRepository_Overrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSRCDSRepository_Overrides_Call) Return(_a0 []domain.SMOverrides, _a1 error) *MockSRCDSRepository_Overrides_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_Overrides_Call) RunAndReturn(run func(context.Context) ([]domain.SMOverrides, error)) *MockSRCDSRepository_Overrides_Call {
	_c.Call.Return(run)
	return _c
}

// QueryBanState provides a mock function with given fields: ctx, steamID, ipAddr
func (_m *MockSRCDSRepository) QueryBanState(ctx context.Context, steamID steamid.SteamID, ipAddr netip.Addr) (domain.PlayerBanState, error) {
	ret := _m.Called(ctx, steamID, ipAddr)

	if len(ret) == 0 {
		panic("no return value specified for QueryBanState")
	}

	var r0 domain.PlayerBanState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, netip.Addr) (domain.PlayerBanState, error)); ok {
		return rf(ctx, steamID, ipAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, netip.Addr) domain.PlayerBanState); ok {
		r0 = rf(ctx, steamID, ipAddr)
	} else {
		r0 = ret.Get(0).(domain.PlayerBanState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID, netip.Addr) error); ok {
		r1 = rf(ctx, steamID, ipAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_QueryBanState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryBanState'
type MockSRCDSRepository_QueryBanState_Call struct {
	*mock.Call
}

// QueryBanState is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
//   - ipAddr netip.Addr
func (_e *MockSRCDSRepository_Expecter) QueryBanState(ctx interface{}, steamID interface{}, ipAddr interface{}) *MockSRCDSRepository_QueryBanState_Call {
	return &MockSRCDSRepository_QueryBanState_Call{Call: _e.mock.On("QueryBanState", ctx, steamID, ipAddr)}
}

func (_c *MockSRCDSRepository_QueryBanState_Call) Run(run func(ctx context.Context, steamID steamid.SteamID, ipAddr netip.Addr)) *MockSRCDSRepository_QueryBanState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID), args[2].(netip.Addr))
	})
	return _c
}

func (_c *MockSRCDSRepository_QueryBanState_Call) Return(_a0 domain.PlayerBanState, _a1 error) *MockSRCDSRepository_QueryBanState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_QueryBanState_Call) RunAndReturn(run func(context.Context, steamid.SteamID, netip.Addr) (domain.PlayerBanState, error)) *MockSRCDSRepository_QueryBanState_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAdmin provides a mock function with given fields: ctx, admin
func (_m *MockSRCDSRepository) SaveAdmin(ctx context.Context, admin domain.SMAdmin) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, admin)

	if len(ret) == 0 {
		panic("no return value specified for SaveAdmin")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) (domain.SMAdmin, error)); ok {
		return rf(ctx, admin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) domain.SMAdmin); ok {
		r0 = rf(ctx, admin)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMAdmin) error); ok {
		r1 = rf(ctx, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_SaveAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAdmin'
type MockSRCDSRepository_SaveAdmin_Call struct {
	*mock.Call
}

// SaveAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
func (_e *MockSRCDSRepository_Expecter) SaveAdmin(ctx interface{}, admin interface{}) *MockSRCDSRepository_SaveAdmin_Call {
	return &MockSRCDSRepository_SaveAdmin_Call{Call: _e.mock.On("SaveAdmin", ctx, admin)}
}

func (_c *MockSRCDSRepository_SaveAdmin_Call) Run(run func(ctx context.Context, admin domain.SMAdmin)) *MockSRCDSRepository_SaveAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin))
	})
	return _c
}

func (_c *MockSRCDSRepository_SaveAdmin_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSRepository_SaveAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_SaveAdmin_Call) RunAndReturn(run func(context.Context, domain.SMAdmin) (domain.SMAdmin, error)) *MockSRCDSRepository_SaveAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// SaveGroup provides a mock function with given fields: ctx, group
func (_m *MockSRCDSRepository) SaveGroup(ctx context.Context, group domain.SMGroups) (domain.SMGroups, error) {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for SaveGroup")
	}

	var r0 domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) (domain.SMGroups, error)); ok {
		return rf(ctx, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) domain.SMGroups); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(domain.SMGroups)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMGroups) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_SaveGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveGroup'
type MockSRCDSRepository_SaveGroup_Call struct {
	*mock.Call
}

// SaveGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - group domain.SMGroups
func (_e *MockSRCDSRepository_Expecter) SaveGroup(ctx interface{}, group interface{}) *MockSRCDSRepository_SaveGroup_Call {
	return &MockSRCDSRepository_SaveGroup_Call{Call: _e.mock.On("SaveGroup", ctx, group)}
}

func (_c *MockSRCDSRepository_SaveGroup_Call) Run(run func(ctx context.Context, group domain.SMGroups)) *MockSRCDSRepository_SaveGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroups))
	})
	return _c
}

func (_c *MockSRCDSRepository_SaveGroup_Call) Return(_a0 domain.SMGroups, _a1 error) *MockSRCDSRepository_SaveGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_SaveGroup_Call) RunAndReturn(run func(context.Context, domain.SMGroups) (domain.SMGroups, error)) *MockSRCDSRepository_SaveGroup_Call {
	_c.Call.Return(run)
	return _c
}

// SaveGroupOverride provides a mock function with given fields: ctx, override
func (_m *MockSRCDSRepository) SaveGroupOverride(ctx context.Context, override domain.SMGroupOverrides) (domain.SMGroupOverrides, error) {
	ret := _m.Called(ctx, override)

	if len(ret) == 0 {
		panic("no return value specified for SaveGroupOverride")
	}

	var r0 domain.SMGroupOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroupOverrides) (domain.SMGroupOverrides, error)); ok {
		return rf(ctx, override)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroupOverrides) domain.SMGroupOverrides); ok {
		r0 = rf(ctx, override)
	} else {
		r0 = ret.Get(0).(domain.SMGroupOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMGroupOverrides) error); ok {
		r1 = rf(ctx, override)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_SaveGroupOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveGroupOverride'
type MockSRCDSRepository_SaveGroupOverride_Call struct {
	*mock.Call
}

// SaveGroupOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - override domain.SMGroupOverrides
func (_e *MockSRCDSRepository_Expecter) SaveGroupOverride(ctx interface{}, override interface{}) *MockSRCDSRepository_SaveGroupOverride_Call {
	return &MockSRCDSRepository_SaveGroupOverride_Call{Call: _e.mock.On("SaveGroupOverride", ctx, override)}
}

func (_c *MockSRCDSRepository_SaveGroupOverride_Call) Run(run func(ctx context.Context, override domain.SMGroupOverrides)) *MockSRCDSRepository_SaveGroupOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroupOverrides))
	})
	return _c
}

func (_c *MockSRCDSRepository_SaveGroupOverride_Call) Return(_a0 domain.SMGroupOverrides, _a1 error) *MockSRCDSRepository_SaveGroupOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_SaveGroupOverride_Call) RunAndReturn(run func(context.Context, domain.SMGroupOverrides) (domain.SMGroupOverrides, error)) *MockSRCDSRepository_SaveGroupOverride_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOverride provides a mock function with given fields: ctx, override
func (_m *MockSRCDSRepository) SaveOverride(ctx context.Context, override domain.SMOverrides) (domain.SMOverrides, error) {
	ret := _m.Called(ctx, override)

	if len(ret) == 0 {
		panic("no return value specified for SaveOverride")
	}

	var r0 domain.SMOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMOverrides) (domain.SMOverrides, error)); ok {
		return rf(ctx, override)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMOverrides) domain.SMOverrides); ok {
		r0 = rf(ctx, override)
	} else {
		r0 = ret.Get(0).(domain.SMOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMOverrides) error); ok {
		r1 = rf(ctx, override)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSRepository_SaveOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOverride'
type MockSRCDSRepository_SaveOverride_Call struct {
	*mock.Call
}

// SaveOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - override domain.SMOverrides
func (_e *MockSRCDSRepository_Expecter) SaveOverride(ctx interface{}, override interface{}) *MockSRCDSRepository_SaveOverride_Call {
	return &MockSRCDSRepository_SaveOverride_Call{Call: _e.mock.On("SaveOverride", ctx, override)}
}

func (_c *MockSRCDSRepository_SaveOverride_Call) Run(run func(ctx context.Context, override domain.SMOverrides)) *MockSRCDSRepository_SaveOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMOverrides))
	})
	return _c
}

func (_c *MockSRCDSRepository_SaveOverride_Call) Return(_a0 domain.SMOverrides, _a1 error) *MockSRCDSRepository_SaveOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSRepository_SaveOverride_Call) RunAndReturn(run func(context.Context, domain.SMOverrides) (domain.SMOverrides, error)) *MockSRCDSRepository_SaveOverride_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSRCDSRepository creates a new instance of MockSRCDSRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSRCDSRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSRCDSRepository {
	mock := &MockSRCDSRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
