// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	netip "net/netip"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"
)

// MockSRCDSUsecase is an autogenerated mock type for the SRCDSUsecase type
type MockSRCDSUsecase struct {
	mock.Mock
}

type MockSRCDSUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSRCDSUsecase) EXPECT() *MockSRCDSUsecase_Expecter {
	return &MockSRCDSUsecase_Expecter{mock: &_m.Mock}
}

// AddAdmin provides a mock function with given fields: ctx, alias, authType, identity, flags, immunity, password
func (_m *MockSRCDSUsecase) AddAdmin(ctx context.Context, alias string, authType domain.AuthType, identity string, flags string, immunity int, password string) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, alias, authType, identity, flags, immunity, password)

	if len(ret) == 0 {
		panic("no return value specified for AddAdmin")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.AuthType, string, string, int, string) (domain.SMAdmin, error)); ok {
		return rf(ctx, alias, authType, identity, flags, immunity, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.AuthType, string, string, int, string) domain.SMAdmin); ok {
		r0 = rf(ctx, alias, authType, identity, flags, immunity, password)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.AuthType, string, string, int, string) error); ok {
		r1 = rf(ctx, alias, authType, identity, flags, immunity, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_AddAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAdmin'
type MockSRCDSUsecase_AddAdmin_Call struct {
	*mock.Call
}

// AddAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - alias string
//   - authType domain.AuthType
//   - identity string
//   - flags string
//   - immunity int
//   - password string
func (_e *MockSRCDSUsecase_Expecter) AddAdmin(ctx interface{}, alias interface{}, authType interface{}, identity interface{}, flags interface{}, immunity interface{}, password interface{}) *MockSRCDSUsecase_AddAdmin_Call {
	return &MockSRCDSUsecase_AddAdmin_Call{Call: _e.mock.On("AddAdmin", ctx, alias, authType, identity, flags, immunity, password)}
}

func (_c *MockSRCDSUsecase_AddAdmin_Call) Run(run func(ctx context.Context, alias string, authType domain.AuthType, identity string, flags string, immunity int, password string)) *MockSRCDSUsecase_AddAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.AuthType), args[3].(string), args[4].(string), args[5].(int), args[6].(string))
	})
	return _c
}

func (_c *MockSRCDSUsecase_AddAdmin_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSUsecase_AddAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_AddAdmin_Call) RunAndReturn(run func(context.Context, string, domain.AuthType, string, string, int, string) (domain.SMAdmin, error)) *MockSRCDSUsecase_AddAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// AddAdminGroup provides a mock function with given fields: ctx, adminID, groupID
func (_m *MockSRCDSUsecase) AddAdminGroup(ctx context.Context, adminID int, groupID int) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, adminID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for AddAdminGroup")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (domain.SMAdmin, error)); ok {
		return rf(ctx, adminID, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) domain.SMAdmin); ok {
		r0 = rf(ctx, adminID, groupID)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, adminID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_AddAdminGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAdminGroup'
type MockSRCDSUsecase_AddAdminGroup_Call struct {
	*mock.Call
}

// AddAdminGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - adminID int
//   - groupID int
func (_e *MockSRCDSUsecase_Expecter) AddAdminGroup(ctx interface{}, adminID interface{}, groupID interface{}) *MockSRCDSUsecase_AddAdminGroup_Call {
	return &MockSRCDSUsecase_AddAdminGroup_Call{Call: _e.mock.On("AddAdminGroup", ctx, adminID, groupID)}
}

func (_c *MockSRCDSUsecase_AddAdminGroup_Call) Run(run func(ctx context.Context, adminID int, groupID int)) *MockSRCDSUsecase_AddAdminGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_AddAdminGroup_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSUsecase_AddAdminGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_AddAdminGroup_Call) RunAndReturn(run func(context.Context, int, int) (domain.SMAdmin, error)) *MockSRCDSUsecase_AddAdminGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroup provides a mock function with given fields: ctx, name, flags, immunityLevel
func (_m *MockSRCDSUsecase) AddGroup(ctx context.Context, name string, flags string, immunityLevel int) (domain.SMGroups, error) {
	ret := _m.Called(ctx, name, flags, immunityLevel)

	if len(ret) == 0 {
		panic("no return value specified for AddGroup")
	}

	var r0 domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) (domain.SMGroups, error)); ok {
		return rf(ctx, name, flags, immunityLevel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) domain.SMGroups); ok {
		r0 = rf(ctx, name, flags, immunityLevel)
	} else {
		r0 = ret.Get(0).(domain.SMGroups)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, name, flags, immunityLevel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_AddGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroup'
type MockSRCDSUsecase_AddGroup_Call struct {
	*mock.Call
}

// AddGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - flags string
//   - immunityLevel int
func (_e *MockSRCDSUsecase_Expecter) AddGroup(ctx interface{}, name interface{}, flags interface{}, immunityLevel interface{}) *MockSRCDSUsecase_AddGroup_Call {
	return &MockSRCDSUsecase_AddGroup_Call{Call: _e.mock.On("AddGroup", ctx, name, flags, immunityLevel)}
}

func (_c *MockSRCDSUsecase_AddGroup_Call) Run(run func(ctx context.Context, name string, flags string, immunityLevel int)) *MockSRCDSUsecase_AddGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_AddGroup_Call) Return(_a0 domain.SMGroups, _a1 error) *MockSRCDSUsecase_AddGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_AddGroup_Call) RunAndReturn(run func(context.Context, string, string, int) (domain.SMGroups, error)) *MockSRCDSUsecase_AddGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupImmunity provides a mock function with given fields: ctx, groupID, otherID
func (_m *MockSRCDSUsecase) AddGroupImmunity(ctx context.Context, groupID int, otherID int) (domain.SMGroupImmunity, error) {
	ret := _m.Called(ctx, groupID, otherID)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupImmunity")
	}

	var r0 domain.SMGroupImmunity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (domain.SMGroupImmunity, error)); ok {
		return rf(ctx, groupID, otherID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) domain.SMGroupImmunity); ok {
		r0 = rf(ctx, groupID, otherID)
	} else {
		r0 = ret.Get(0).(domain.SMGroupImmunity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, groupID, otherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_AddGroupImmunity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupImmunity'
type MockSRCDSUsecase_AddGroupImmunity_Call struct {
	*mock.Call
}

// AddGroupImmunity is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID int
//   - otherID int
func (_e *MockSRCDSUsecase_Expecter) AddGroupImmunity(ctx interface{}, groupID interface{}, otherID interface{}) *MockSRCDSUsecase_AddGroupImmunity_Call {
	return &MockSRCDSUsecase_AddGroupImmunity_Call{Call: _e.mock.On("AddGroupImmunity", ctx, groupID, otherID)}
}

func (_c *MockSRCDSUsecase_AddGroupImmunity_Call) Run(run func(ctx context.Context, groupID int, otherID int)) *MockSRCDSUsecase_AddGroupImmunity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_AddGroupImmunity_Call) Return(_a0 domain.SMGroupImmunity, _a1 error) *MockSRCDSUsecase_AddGroupImmunity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_AddGroupImmunity_Call) RunAndReturn(run func(context.Context, int, int) (domain.SMGroupImmunity, error)) *MockSRCDSUsecase_AddGroupImmunity_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupOverride provides a mock function with given fields: ctx, groupID, name, overrideType, access
func (_m *MockSRCDSUsecase) AddGroupOverride(ctx context.Context, groupID int, name string, overrideType domain.OverrideType, access domain.OverrideAccess) (domain.SMGroupOverrides, error) {
	ret := _m.Called(ctx, groupID, name, overrideType, access)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupOverride")
	}

	var r0 domain.SMGroupOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, domain.OverrideType, domain.OverrideAccess) (domain.SMGroupOverrides, error)); ok {
		return rf(ctx, groupID, name, overrideType, access)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, domain.OverrideType, domain.OverrideAccess) domain.SMGroupOverrides); ok {
		r0 = rf(ctx, groupID, name, overrideType, access)
	} else {
		r0 = ret.Get(0).(domain.SMGroupOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, domain.OverrideType, domain.OverrideAccess) error); ok {
		r1 = rf(ctx, groupID, name, overrideType, access)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_AddGroupOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupOverride'
type MockSRCDSUsecase_AddGroupOverride_Call struct {
	*mock.Call
}

// AddGroupOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID int
//   - name string
//   - overrideType domain.OverrideType
//   - access domain.OverrideAccess
func (_e *MockSRCDSUsecase_Expecter) AddGroupOverride(ctx interface{}, groupID interface{}, name interface{}, overrideType interface{}, access interface{}) *MockSRCDSUsecase_AddGroupOverride_Call {
	return &MockSRCDSUsecase_AddGroupOverride_Call{Call: _e.mock.On("AddGroupOverride", ctx, groupID, name, overrideType, access)}
}

func (_c *MockSRCDSUsecase_AddGroupOverride_Call) Run(run func(ctx context.Context, groupID int, name string, overrideType domain.OverrideType, access domain.OverrideAccess)) *MockSRCDSUsecase_AddGroupOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(domain.OverrideType), args[4].(domain.OverrideAccess))
	})
	return _c
}

func (_c *MockSRCDSUsecase_AddGroupOverride_Call) Return(_a0 domain.SMGroupOverrides, _a1 error) *MockSRCDSUsecase_AddGroupOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_AddGroupOverride_Call) RunAndReturn(run func(context.Context, int, string, domain.OverrideType, domain.OverrideAccess) (domain.SMGroupOverrides, error)) *MockSRCDSUsecase_AddGroupOverride_Call {
	_c.Call.Return(run)
	return _c
}

// AddOverride provides a mock function with given fields: ctx, name, overrideType, flags
func (_m *MockSRCDSUsecase) AddOverride(ctx context.Context, name string, overrideType domain.OverrideType, flags string) (domain.SMOverrides, error) {
	ret := _m.Called(ctx, name, overrideType, flags)

	if len(ret) == 0 {
		panic("no return value specified for AddOverride")
	}

	var r0 domain.SMOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.OverrideType, string) (domain.SMOverrides, error)); ok {
		return rf(ctx, name, overrideType, flags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.OverrideType, string) domain.SMOverrides); ok {
		r0 = rf(ctx, name, overrideType, flags)
	} else {
		r0 = ret.Get(0).(domain.SMOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.OverrideType, string) error); ok {
		r1 = rf(ctx, name, overrideType, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_AddOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOverride'
type MockSRCDSUsecase_AddOverride_Call struct {
	*mock.Call
}

// AddOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - overrideType domain.OverrideType
//   - flags string
func (_e *MockSRCDSUsecase_Expecter) AddOverride(ctx interface{}, name interface{}, overrideType interface{}, flags interface{}) *MockSRCDSUsecase_AddOverride_Call {
	return &MockSRCDSUsecase_AddOverride_Call{Call: _e.mock.On("AddOverride", ctx, name, overrideType, flags)}
}

func (_c *MockSRCDSUsecase_AddOverride_Call) Run(run func(ctx context.Context, name string, overrideType domain.OverrideType, flags string)) *MockSRCDSUsecase_AddOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.OverrideType), args[3].(string))
	})
	return _c
}

func (_c *MockSRCDSUsecase_AddOverride_Call) Return(_a0 domain.SMOverrides, _a1 error) *MockSRCDSUsecase_AddOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_AddOverride_Call) RunAndReturn(run func(context.Context, string, domain.OverrideType, string) (domain.SMOverrides, error)) *MockSRCDSUsecase_AddOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Admins provides a mock function with given fields: ctx
func (_m *MockSRCDSUsecase) Admins(ctx context.Context) ([]domain.SMAdmin, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Admins")
	}

	var r0 []domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.SMAdmin, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SMAdmin); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMAdmin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_Admins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Admins'
type MockSRCDSUsecase_Admins_Call struct {
	*mock.Call
}

// Admins is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSRCDSUsecase_Expecter) Admins(ctx interface{}) *MockSRCDSUsecase_Admins_Call {
	return &MockSRCDSUsecase_Admins_Call{Call: _e.mock.On("Admins", ctx)}
}

func (_c *MockSRCDSUsecase_Admins_Call) Run(run func(ctx context.Context)) *MockSRCDSUsecase_Admins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSRCDSUsecase_Admins_Call) Return(_a0 []domain.SMAdmin, _a1 error) *MockSRCDSUsecase_Admins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_Admins_Call) RunAndReturn(run func(context.Context) ([]domain.SMAdmin, error)) *MockSRCDSUsecase_Admins_Call {
	_c.Call.Return(run)
	return _c
}

// DelAdmin provides a mock function with given fields: ctx, adminID
func (_m *MockSRCDSUsecase) DelAdmin(ctx context.Context, adminID int) error {
	ret := _m.Called(ctx, adminID)

	if len(ret) == 0 {
		panic("no return value specified for DelAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, adminID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSUsecase_DelAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelAdmin'
type MockSRCDSUsecase_DelAdmin_Call struct {
	*mock.Call
}

// DelAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - adminID int
func (_e *MockSRCDSUsecase_Expecter) DelAdmin(ctx interface{}, adminID interface{}) *MockSRCDSUsecase_DelAdmin_Call {
	return &MockSRCDSUsecase_DelAdmin_Call{Call: _e.mock.On("DelAdmin", ctx, adminID)}
}

func (_c *MockSRCDSUsecase_DelAdmin_Call) Run(run func(ctx context.Context, adminID int)) *MockSRCDSUsecase_DelAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_DelAdmin_Call) Return(_a0 error) *MockSRCDSUsecase_DelAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSUsecase_DelAdmin_Call) RunAndReturn(run func(context.Context, int) error) *MockSRCDSUsecase_DelAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// DelAdminGroup provides a mock function with given fields: ctx, adminID, groupID
func (_m *MockSRCDSUsecase) DelAdminGroup(ctx context.Context, adminID int, groupID int) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, adminID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for DelAdminGroup")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (domain.SMAdmin, error)); ok {
		return rf(ctx, adminID, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) domain.SMAdmin); ok {
		r0 = rf(ctx, adminID, groupID)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, adminID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_DelAdminGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelAdminGroup'
type MockSRCDSUsecase_DelAdminGroup_Call struct {
	*mock.Call
}

// DelAdminGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - adminID int
//   - groupID int
func (_e *MockSRCDSUsecase_Expecter) DelAdminGroup(ctx interface{}, adminID interface{}, groupID interface{}) *MockSRCDSUsecase_DelAdminGroup_Call {
	return &MockSRCDSUsecase_DelAdminGroup_Call{Call: _e.mock.On("DelAdminGroup", ctx, adminID, groupID)}
}

func (_c *MockSRCDSUsecase_DelAdminGroup_Call) Run(run func(ctx context.Context, adminID int, groupID int)) *MockSRCDSUsecase_DelAdminGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_DelAdminGroup_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSUsecase_DelAdminGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_DelAdminGroup_Call) RunAndReturn(run func(context.Context, int, int) (domain.SMAdmin, error)) *MockSRCDSUsecase_DelAdminGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DelGroup provides a mock function with given fields: ctx, groupID
func (_m *MockSRCDSUsecase) DelGroup(ctx context.Context, groupID int) error {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for DelGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSUsecase_DelGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelGroup'
type MockSRCDSUsecase_DelGroup_Call struct {
	*mock.Call
}

// DelGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID int
func (_e *MockSRCDSUsecase_Expecter) DelGroup(ctx interface{}, groupID interface{}) *MockSRCDSUsecase_DelGroup_Call {
	return &MockSRCDSUsecase_DelGroup_Call{Call: _e.mock.On("DelGroup", ctx, groupID)}
}

func (_c *MockSRCDSUsecase_DelGroup_Call) Run(run func(ctx context.Context, groupID int)) *MockSRCDSUsecase_DelGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_DelGroup_Call) Return(_a0 error) *MockSRCDSUsecase_DelGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSUsecase_DelGroup_Call) RunAndReturn(run func(context.Context, int) error) *MockSRCDSUsecase_DelGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DelGroupImmunity provides a mock function with given fields: ctx, groupImmunityID
func (_m *MockSRCDSUsecase) DelGroupImmunity(ctx context.Context, groupImmunityID int) error {
	ret := _m.Called(ctx, groupImmunityID)

	if len(ret) == 0 {
		panic("no return value specified for DelGroupImmunity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, groupImmunityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSUsecase_DelGroupImmunity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelGroupImmunity'
type MockSRCDSUsecase_DelGroupImmunity_Call struct {
	*mock.Call
}

// DelGroupImmunity is a helper method to define mock.On call
//   - ctx context.Context
//   - groupImmunityID int
func (_e *MockSRCDSUsecase_Expecter) DelGroupImmunity(ctx interface{}, groupImmunityID interface{}) *MockSRCDSUsecase_DelGroupImmunity_Call {
	return &MockSRCDSUsecase_DelGroupImmunity_Call{Call: _e.mock.On("DelGroupImmunity", ctx, groupImmunityID)}
}

func (_c *MockSRCDSUsecase_DelGroupImmunity_Call) Run(run func(ctx context.Context, groupImmunityID int)) *MockSRCDSUsecase_DelGroupImmunity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_DelGroupImmunity_Call) Return(_a0 error) *MockSRCDSUsecase_DelGroupImmunity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSUsecase_DelGroupImmunity_Call) RunAndReturn(run func(context.Context, int) error) *MockSRCDSUsecase_DelGroupImmunity_Call {
	_c.Call.Return(run)
	return _c
}

// DelGroupOverride provides a mock function with given fields: ctx, groupOverrideID
func (_m *MockSRCDSUsecase) DelGroupOverride(ctx context.Context, groupOverrideID int) error {
	ret := _m.Called(ctx, groupOverrideID)

	if len(ret) == 0 {
		panic("no return value specified for DelGroupOverride")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, groupOverrideID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSUsecase_DelGroupOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelGroupOverride'
type MockSRCDSUsecase_DelGroupOverride_Call struct {
	*mock.Call
}

// DelGroupOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - groupOverrideID int
func (_e *MockSRCDSUsecase_Expecter) DelGroupOverride(ctx interface{}, groupOverrideID interface{}) *MockSRCDSUsecase_DelGroupOverride_Call {
	return &MockSRCDSUsecase_DelGroupOverride_Call{Call: _e.mock.On("DelGroupOverride", ctx, groupOverrideID)}
}

func (_c *MockSRCDSUsecase_DelGroupOverride_Call) Run(run func(ctx context.Context, groupOverrideID int)) *MockSRCDSUsecase_DelGroupOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_DelGroupOverride_Call) Return(_a0 error) *MockSRCDSUsecase_DelGroupOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSUsecase_DelGroupOverride_Call) RunAndReturn(run func(context.Context, int) error) *MockSRCDSUsecase_DelGroupOverride_Call {
	_c.Call.Return(run)
	return _c
}

// DelOverride provides a mock function with given fields: ctx, overrideID
func (_m *MockSRCDSUsecase) DelOverride(ctx context.Context, overrideID int) error {
	ret := _m.Called(ctx, overrideID)

	if len(ret) == 0 {
		panic("no return value specified for DelOverride")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, overrideID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSUsecase_DelOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelOverride'
type MockSRCDSUsecase_DelOverride_Call struct {
	*mock.Call
}

// DelOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - overrideID int
func (_e *MockSRCDSUsecase_Expecter) DelOverride(ctx interface{}, overrideID interface{}) *MockSRCDSUsecase_DelOverride_Call {
	return &MockSRCDSUsecase_DelOverride_Call{Call: _e.mock.On("DelOverride", ctx, overrideID)}
}

func (_c *MockSRCDSUsecase_DelOverride_Call) Run(run func(ctx context.Context, overrideID int)) *MockSRCDSUsecase_DelOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_DelOverride_Call) Return(_a0 error) *MockSRCDSUsecase_DelOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSUsecase_DelOverride_Call) RunAndReturn(run func(context.Context, int) error) *MockSRCDSUsecase_DelOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdminByID provides a mock function with given fields: ctx, adminID
func (_m *MockSRCDSUsecase) GetAdminByID(ctx context.Context, adminID int) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, adminID)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminByID")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMAdmin, error)); ok {
		return rf(ctx, adminID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMAdmin); ok {
		r0 = rf(ctx, adminID)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_GetAdminByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminByID'
type MockSRCDSUsecase_GetAdminByID_Call struct {
	*mock.Call
}

// GetAdminByID is a helper method to define mock.On call
//   - ctx context.Context
//   - adminID int
func (_e *MockSRCDSUsecase_Expecter) GetAdminByID(ctx interface{}, adminID interface{}) *MockSRCDSUsecase_GetAdminByID_Call {
	return &MockSRCDSUsecase_GetAdminByID_Call{Call: _e.mock.On("GetAdminByID", ctx, adminID)}
}

func (_c *MockSRCDSUsecase_GetAdminByID_Call) Run(run func(ctx context.Context, adminID int)) *MockSRCDSUsecase_GetAdminByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GetAdminByID_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSUsecase_GetAdminByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_GetAdminByID_Call) RunAndReturn(run func(context.Context, int) (domain.SMAdmin, error)) *MockSRCDSUsecase_GetAdminByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdminGroups provides a mock function with given fields: ctx, admin
func (_m *MockSRCDSUsecase) GetAdminGroups(ctx context.Context, admin domain.SMAdmin) ([]domain.SMGroups, error) {
	ret := _m.Called(ctx, admin)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminGroups")
	}

	var r0 []domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) ([]domain.SMGroups, error)); ok {
		return rf(ctx, admin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) []domain.SMGroups); ok {
		r0 = rf(ctx, admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMGroups)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMAdmin) error); ok {
		r1 = rf(ctx, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_GetAdminGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminGroups'
type MockSRCDSUsecase_GetAdminGroups_Call struct {
	*mock.Call
}

// GetAdminGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
func (_e *MockSRCDSUsecase_Expecter) GetAdminGroups(ctx interface{}, admin interface{}) *MockSRCDSUsecase_GetAdminGroups_Call {
	return &MockSRCDSUsecase_GetAdminGroups_Call{Call: _e.mock.On("GetAdminGroups", ctx, admin)}
}

func (_c *MockSRCDSUsecase_GetAdminGroups_Call) Run(run func(ctx context.Context, admin domain.SMAdmin)) *MockSRCDSUsecase_GetAdminGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GetAdminGroups_Call) Return(_a0 []domain.SMGroups, _a1 error) *MockSRCDSUsecase_GetAdminGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_GetAdminGroups_Call) RunAndReturn(run func(context.Context, domain.SMAdmin) ([]domain.SMGroups, error)) *MockSRCDSUsecase_GetAdminGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetBanState provides a mock function with given fields: ctx, steamID, ip
func (_m *MockSRCDSUsecase) GetBanState(ctx context.Context, steamID steamid.SteamID, ip netip.Addr) (domain.PlayerBanState, string, error) {
	ret := _m.Called(ctx, steamID, ip)

	if len(ret) == 0 {
		panic("no return value specified for GetBanState")
	}

	var r0 domain.PlayerBanState
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, netip.Addr) (domain.PlayerBanState, string, error)); ok {
		return rf(ctx, steamID, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID, netip.Addr) domain.PlayerBanState); ok {
		r0 = rf(ctx, steamID, ip)
	} else {
		r0 = ret.Get(0).(domain.PlayerBanState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID, netip.Addr) string); ok {
		r1 = rf(ctx, steamID, ip)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, steamid.SteamID, netip.Addr) error); ok {
		r2 = rf(ctx, steamID, ip)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSRCDSUsecase_GetBanState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBanState'
type MockSRCDSUsecase_GetBanState_Call struct {
	*mock.Call
}

// GetBanState is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
//   - ip netip.Addr
func (_e *MockSRCDSUsecase_Expecter) GetBanState(ctx interface{}, steamID interface{}, ip interface{}) *MockSRCDSUsecase_GetBanState_Call {
	return &MockSRCDSUsecase_GetBanState_Call{Call: _e.mock.On("GetBanState", ctx, steamID, ip)}
}

func (_c *MockSRCDSUsecase_GetBanState_Call) Run(run func(ctx context.Context, steamID steamid.SteamID, ip netip.Addr)) *MockSRCDSUsecase_GetBanState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID), args[2].(netip.Addr))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GetBanState_Call) Return(_a0 domain.PlayerBanState, _a1 string, _a2 error) *MockSRCDSUsecase_GetBanState_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSRCDSUsecase_GetBanState_Call) RunAndReturn(run func(context.Context, steamid.SteamID, netip.Addr) (domain.PlayerBanState, string, error)) *MockSRCDSUsecase_GetBanState_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupByID provides a mock function with given fields: ctx, groupID
func (_m *MockSRCDSUsecase) GetGroupByID(ctx context.Context, groupID int) (domain.SMGroups, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByID")
	}

	var r0 domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMGroups, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMGroups); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Get(0).(domain.SMGroups)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_GetGroupByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByID'
type MockSRCDSUsecase_GetGroupByID_Call struct {
	*mock.Call
}

// GetGroupByID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID int
func (_e *MockSRCDSUsecase_Expecter) GetGroupByID(ctx interface{}, groupID interface{}) *MockSRCDSUsecase_GetGroupByID_Call {
	return &MockSRCDSUsecase_GetGroupByID_Call{Call: _e.mock.On("GetGroupByID", ctx, groupID)}
}

func (_c *MockSRCDSUsecase_GetGroupByID_Call) Run(run func(ctx context.Context, groupID int)) *MockSRCDSUsecase_GetGroupByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GetGroupByID_Call) Return(_a0 domain.SMGroups, _a1 error) *MockSRCDSUsecase_GetGroupByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_GetGroupByID_Call) RunAndReturn(run func(context.Context, int) (domain.SMGroups, error)) *MockSRCDSUsecase_GetGroupByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupImmunities provides a mock function with given fields: ctx
func (_m *MockSRCDSUsecase) GetGroupImmunities(ctx context.Context) ([]domain.SMGroupImmunity, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupImmunities")
	}

	var r0 []domain.SMGroupImmunity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.SMGroupImmunity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SMGroupImmunity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMGroupImmunity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_GetGroupImmunities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupImmunities'
type MockSRCDSUsecase_GetGroupImmunities_Call struct {
	*mock.Call
}

// GetGroupImmunities is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSRCDSUsecase_Expecter) GetGroupImmunities(ctx interface{}) *MockSRCDSUsecase_GetGroupImmunities_Call {
	return &MockSRCDSUsecase_GetGroupImmunities_Call{Call: _e.mock.On("GetGroupImmunities", ctx)}
}

func (_c *MockSRCDSUsecase_GetGroupImmunities_Call) Run(run func(ctx context.Context)) *MockSRCDSUsecase_GetGroupImmunities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GetGroupImmunities_Call) Return(_a0 []domain.SMGroupImmunity, _a1 error) *MockSRCDSUsecase_GetGroupImmunities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_GetGroupImmunities_Call) RunAndReturn(run func(context.Context) ([]domain.SMGroupImmunity, error)) *MockSRCDSUsecase_GetGroupImmunities_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupImmunityByID provides a mock function with given fields: ctx, groupImmunityID
func (_m *MockSRCDSUsecase) GetGroupImmunityByID(ctx context.Context, groupImmunityID int) (domain.SMGroupImmunity, error) {
	ret := _m.Called(ctx, groupImmunityID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupImmunityByID")
	}

	var r0 domain.SMGroupImmunity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMGroupImmunity, error)); ok {
		return rf(ctx, groupImmunityID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMGroupImmunity); ok {
		r0 = rf(ctx, groupImmunityID)
	} else {
		r0 = ret.Get(0).(domain.SMGroupImmunity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupImmunityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_GetGroupImmunityByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupImmunityByID'
type MockSRCDSUsecase_GetGroupImmunityByID_Call struct {
	*mock.Call
}

// GetGroupImmunityByID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupImmunityID int
func (_e *MockSRCDSUsecase_Expecter) GetGroupImmunityByID(ctx interface{}, groupImmunityID interface{}) *MockSRCDSUsecase_GetGroupImmunityByID_Call {
	return &MockSRCDSUsecase_GetGroupImmunityByID_Call{Call: _e.mock.On("GetGroupImmunityByID", ctx, groupImmunityID)}
}

func (_c *MockSRCDSUsecase_GetGroupImmunityByID_Call) Run(run func(ctx context.Context, groupImmunityID int)) *MockSRCDSUsecase_GetGroupImmunityByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GetGroupImmunityByID_Call) Return(_a0 domain.SMGroupImmunity, _a1 error) *MockSRCDSUsecase_GetGroupImmunityByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_GetGroupImmunityByID_Call) RunAndReturn(run func(context.Context, int) (domain.SMGroupImmunity, error)) *MockSRCDSUsecase_GetGroupImmunityByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupOverride provides a mock function with given fields: ctx, groupOverrideID
func (_m *MockSRCDSUsecase) GetGroupOverride(ctx context.Context, groupOverrideID int) (domain.SMGroupOverrides, error) {
	ret := _m.Called(ctx, groupOverrideID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupOverride")
	}

	var r0 domain.SMGroupOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMGroupOverrides, error)); ok {
		return rf(ctx, groupOverrideID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMGroupOverrides); ok {
		r0 = rf(ctx, groupOverrideID)
	} else {
		r0 = ret.Get(0).(domain.SMGroupOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupOverrideID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_GetGroupOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupOverride'
type MockSRCDSUsecase_GetGroupOverride_Call struct {
	*mock.Call
}

// GetGroupOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - groupOverrideID int
func (_e *MockSRCDSUsecase_Expecter) GetGroupOverride(ctx interface{}, groupOverrideID interface{}) *MockSRCDSUsecase_GetGroupOverride_Call {
	return &MockSRCDSUsecase_GetGroupOverride_Call{Call: _e.mock.On("GetGroupOverride", ctx, groupOverrideID)}
}

func (_c *MockSRCDSUsecase_GetGroupOverride_Call) Run(run func(ctx context.Context, groupOverrideID int)) *MockSRCDSUsecase_GetGroupOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GetGroupOverride_Call) Return(_a0 domain.SMGroupOverrides, _a1 error) *MockSRCDSUsecase_GetGroupOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_GetGroupOverride_Call) RunAndReturn(run func(context.Context, int) (domain.SMGroupOverrides, error)) *MockSRCDSUsecase_GetGroupOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GetOverride provides a mock function with given fields: ctx, overrideID
func (_m *MockSRCDSUsecase) GetOverride(ctx context.Context, overrideID int) (domain.SMOverrides, error) {
	ret := _m.Called(ctx, overrideID)

	if len(ret) == 0 {
		panic("no return value specified for GetOverride")
	}

	var r0 domain.SMOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.SMOverrides, error)); ok {
		return rf(ctx, overrideID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.SMOverrides); ok {
		r0 = rf(ctx, overrideID)
	} else {
		r0 = ret.Get(0).(domain.SMOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, overrideID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_GetOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOverride'
type MockSRCDSUsecase_GetOverride_Call struct {
	*mock.Call
}

// GetOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - overrideID int
func (_e *MockSRCDSUsecase_Expecter) GetOverride(ctx interface{}, overrideID interface{}) *MockSRCDSUsecase_GetOverride_Call {
	return &MockSRCDSUsecase_GetOverride_Call{Call: _e.mock.On("GetOverride", ctx, overrideID)}
}

func (_c *MockSRCDSUsecase_GetOverride_Call) Run(run func(ctx context.Context, overrideID int)) *MockSRCDSUsecase_GetOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GetOverride_Call) Return(_a0 domain.SMOverrides, _a1 error) *MockSRCDSUsecase_GetOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_GetOverride_Call) RunAndReturn(run func(context.Context, int) (domain.SMOverrides, error)) *MockSRCDSUsecase_GetOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GroupOverrides provides a mock function with given fields: ctx, groupID
func (_m *MockSRCDSUsecase) GroupOverrides(ctx context.Context, groupID int) ([]domain.SMGroupOverrides, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GroupOverrides")
	}

	var r0 []domain.SMGroupOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.SMGroupOverrides, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.SMGroupOverrides); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMGroupOverrides)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_GroupOverrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupOverrides'
type MockSRCDSUsecase_GroupOverrides_Call struct {
	*mock.Call
}

// GroupOverrides is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID int
func (_e *MockSRCDSUsecase_Expecter) GroupOverrides(ctx interface{}, groupID interface{}) *MockSRCDSUsecase_GroupOverrides_Call {
	return &MockSRCDSUsecase_GroupOverrides_Call{Call: _e.mock.On("GroupOverrides", ctx, groupID)}
}

func (_c *MockSRCDSUsecase_GroupOverrides_Call) Run(run func(ctx context.Context, groupID int)) *MockSRCDSUsecase_GroupOverrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSRCDSUsecase_GroupOverrides_Call) Return(_a0 []domain.SMGroupOverrides, _a1 error) *MockSRCDSUsecase_GroupOverrides_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_GroupOverrides_Call) RunAndReturn(run func(context.Context, int) ([]domain.SMGroupOverrides, error)) *MockSRCDSUsecase_GroupOverrides_Call {
	_c.Call.Return(run)
	return _c
}

// Groups provides a mock function with given fields: ctx
func (_m *MockSRCDSUsecase) Groups(ctx context.Context) ([]domain.SMGroups, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Groups")
	}

	var r0 []domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.SMGroups, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SMGroups); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMGroups)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_Groups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Groups'
type MockSRCDSUsecase_Groups_Call struct {
	*mock.Call
}

// Groups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSRCDSUsecase_Expecter) Groups(ctx interface{}) *MockSRCDSUsecase_Groups_Call {
	return &MockSRCDSUsecase_Groups_Call{Call: _e.mock.On("Groups", ctx)}
}

func (_c *MockSRCDSUsecase_Groups_Call) Run(run func(ctx context.Context)) *MockSRCDSUsecase_Groups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSRCDSUsecase_Groups_Call) Return(_a0 []domain.SMGroups, _a1 error) *MockSRCDSUsecase_Groups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_Groups_Call) RunAndReturn(run func(context.Context) ([]domain.SMGroups, error)) *MockSRCDSUsecase_Groups_Call {
	_c.Call.Return(run)
	return _c
}

// Overrides provides a mock function with given fields: ctx
func (_m *MockSRCDSUsecase) Overrides(ctx context.Context) ([]domain.SMOverrides, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Overrides")
	}

	var r0 []domain.SMOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.SMOverrides, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SMOverrides); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SMOverrides)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_Overrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Overrides'
type MockSRCDSUsecase_Overrides_Call struct {
	*mock.Call
}

// Overrides is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSRCDSUsecase_Expecter) Overrides(ctx interface{}) *MockSRCDSUsecase_Overrides_Call {
	return &MockSRCDSUsecase_Overrides_Call{Call: _e.mock.On("Overrides", ctx)}
}

func (_c *MockSRCDSUsecase_Overrides_Call) Run(run func(ctx context.Context)) *MockSRCDSUsecase_Overrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSRCDSUsecase_Overrides_Call) Return(_a0 []domain.SMOverrides, _a1 error) *MockSRCDSUsecase_Overrides_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_Overrides_Call) RunAndReturn(run func(context.Context) ([]domain.SMOverrides, error)) *MockSRCDSUsecase_Overrides_Call {
	_c.Call.Return(run)
	return _c
}

// Report provides a mock function with given fields: ctx, currentUser, req
func (_m *MockSRCDSUsecase) Report(ctx context.Context, currentUser domain.UserProfile, req domain.CreateReportReq) (*domain.Report, error) {
	ret := _m.Called(ctx, currentUser, req)

	if len(ret) == 0 {
		panic("no return value specified for Report")
	}

	var r0 *domain.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserProfile, domain.CreateReportReq) (*domain.Report, error)); ok {
		return rf(ctx, currentUser, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserProfile, domain.CreateReportReq) *domain.Report); ok {
		r0 = rf(ctx, currentUser, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserProfile, domain.CreateReportReq) error); ok {
		r1 = rf(ctx, currentUser, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type MockSRCDSUsecase_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser domain.UserProfile
//   - req domain.CreateReportReq
func (_e *MockSRCDSUsecase_Expecter) Report(ctx interface{}, currentUser interface{}, req interface{}) *MockSRCDSUsecase_Report_Call {
	return &MockSRCDSUsecase_Report_Call{Call: _e.mock.On("Report", ctx, currentUser, req)}
}

func (_c *MockSRCDSUsecase_Report_Call) Run(run func(ctx context.Context, currentUser domain.UserProfile, req domain.CreateReportReq)) *MockSRCDSUsecase_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserProfile), args[2].(domain.CreateReportReq))
	})
	return _c
}

func (_c *MockSRCDSUsecase_Report_Call) Return(_a0 *domain.Report, _a1 error) *MockSRCDSUsecase_Report_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_Report_Call) RunAndReturn(run func(context.Context, domain.UserProfile, domain.CreateReportReq) (*domain.Report, error)) *MockSRCDSUsecase_Report_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAdmin provides a mock function with given fields: ctx, admin
func (_m *MockSRCDSUsecase) SaveAdmin(ctx context.Context, admin domain.SMAdmin) (domain.SMAdmin, error) {
	ret := _m.Called(ctx, admin)

	if len(ret) == 0 {
		panic("no return value specified for SaveAdmin")
	}

	var r0 domain.SMAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) (domain.SMAdmin, error)); ok {
		return rf(ctx, admin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMAdmin) domain.SMAdmin); ok {
		r0 = rf(ctx, admin)
	} else {
		r0 = ret.Get(0).(domain.SMAdmin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMAdmin) error); ok {
		r1 = rf(ctx, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_SaveAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAdmin'
type MockSRCDSUsecase_SaveAdmin_Call struct {
	*mock.Call
}

// SaveAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - admin domain.SMAdmin
func (_e *MockSRCDSUsecase_Expecter) SaveAdmin(ctx interface{}, admin interface{}) *MockSRCDSUsecase_SaveAdmin_Call {
	return &MockSRCDSUsecase_SaveAdmin_Call{Call: _e.mock.On("SaveAdmin", ctx, admin)}
}

func (_c *MockSRCDSUsecase_SaveAdmin_Call) Run(run func(ctx context.Context, admin domain.SMAdmin)) *MockSRCDSUsecase_SaveAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMAdmin))
	})
	return _c
}

func (_c *MockSRCDSUsecase_SaveAdmin_Call) Return(_a0 domain.SMAdmin, _a1 error) *MockSRCDSUsecase_SaveAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_SaveAdmin_Call) RunAndReturn(run func(context.Context, domain.SMAdmin) (domain.SMAdmin, error)) *MockSRCDSUsecase_SaveAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// SaveGroup provides a mock function with given fields: ctx, group
func (_m *MockSRCDSUsecase) SaveGroup(ctx context.Context, group domain.SMGroups) (domain.SMGroups, error) {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for SaveGroup")
	}

	var r0 domain.SMGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) (domain.SMGroups, error)); ok {
		return rf(ctx, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroups) domain.SMGroups); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(domain.SMGroups)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMGroups) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_SaveGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveGroup'
type MockSRCDSUsecase_SaveGroup_Call struct {
	*mock.Call
}

// SaveGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - group domain.SMGroups
func (_e *MockSRCDSUsecase_Expecter) SaveGroup(ctx interface{}, group interface{}) *MockSRCDSUsecase_SaveGroup_Call {
	return &MockSRCDSUsecase_SaveGroup_Call{Call: _e.mock.On("SaveGroup", ctx, group)}
}

func (_c *MockSRCDSUsecase_SaveGroup_Call) Run(run func(ctx context.Context, group domain.SMGroups)) *MockSRCDSUsecase_SaveGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroups))
	})
	return _c
}

func (_c *MockSRCDSUsecase_SaveGroup_Call) Return(_a0 domain.SMGroups, _a1 error) *MockSRCDSUsecase_SaveGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_SaveGroup_Call) RunAndReturn(run func(context.Context, domain.SMGroups) (domain.SMGroups, error)) *MockSRCDSUsecase_SaveGroup_Call {
	_c.Call.Return(run)
	return _c
}

// SaveGroupOverride provides a mock function with given fields: ctx, override
func (_m *MockSRCDSUsecase) SaveGroupOverride(ctx context.Context, override domain.SMGroupOverrides) (domain.SMGroupOverrides, error) {
	ret := _m.Called(ctx, override)

	if len(ret) == 0 {
		panic("no return value specified for SaveGroupOverride")
	}

	var r0 domain.SMGroupOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroupOverrides) (domain.SMGroupOverrides, error)); ok {
		return rf(ctx, override)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMGroupOverrides) domain.SMGroupOverrides); ok {
		r0 = rf(ctx, override)
	} else {
		r0 = ret.Get(0).(domain.SMGroupOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMGroupOverrides) error); ok {
		r1 = rf(ctx, override)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_SaveGroupOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveGroupOverride'
type MockSRCDSUsecase_SaveGroupOverride_Call struct {
	*mock.Call
}

// SaveGroupOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - override domain.SMGroupOverrides
func (_e *MockSRCDSUsecase_Expecter) SaveGroupOverride(ctx interface{}, override interface{}) *MockSRCDSUsecase_SaveGroupOverride_Call {
	return &MockSRCDSUsecase_SaveGroupOverride_Call{Call: _e.mock.On("SaveGroupOverride", ctx, override)}
}

func (_c *MockSRCDSUsecase_SaveGroupOverride_Call) Run(run func(ctx context.Context, override domain.SMGroupOverrides)) *MockSRCDSUsecase_SaveGroupOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMGroupOverrides))
	})
	return _c
}

func (_c *MockSRCDSUsecase_SaveGroupOverride_Call) Return(_a0 domain.SMGroupOverrides, _a1 error) *MockSRCDSUsecase_SaveGroupOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_SaveGroupOverride_Call) RunAndReturn(run func(context.Context, domain.SMGroupOverrides) (domain.SMGroupOverrides, error)) *MockSRCDSUsecase_SaveGroupOverride_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOverride provides a mock function with given fields: ctx, override
func (_m *MockSRCDSUsecase) SaveOverride(ctx context.Context, override domain.SMOverrides) (domain.SMOverrides, error) {
	ret := _m.Called(ctx, override)

	if len(ret) == 0 {
		panic("no return value specified for SaveOverride")
	}

	var r0 domain.SMOverrides
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMOverrides) (domain.SMOverrides, error)); ok {
		return rf(ctx, override)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SMOverrides) domain.SMOverrides); ok {
		r0 = rf(ctx, override)
	} else {
		r0 = ret.Get(0).(domain.SMOverrides)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SMOverrides) error); ok {
		r1 = rf(ctx, override)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSRCDSUsecase_SaveOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOverride'
type MockSRCDSUsecase_SaveOverride_Call struct {
	*mock.Call
}

// SaveOverride is a helper method to define mock.On call
//   - ctx context.Context
//   - override domain.SMOverrides
func (_e *MockSRCDSUsecase_Expecter) SaveOverride(ctx interface{}, override interface{}) *MockSRCDSUsecase_SaveOverride_Call {
	return &MockSRCDSUsecase_SaveOverride_Call{Call: _e.mock.On("SaveOverride", ctx, override)}
}

func (_c *MockSRCDSUsecase_SaveOverride_Call) Run(run func(ctx context.Context, override domain.SMOverrides)) *MockSRCDSUsecase_SaveOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SMOverrides))
	})
	return _c
}

func (_c *MockSRCDSUsecase_SaveOverride_Call) Return(_a0 domain.SMOverrides, _a1 error) *MockSRCDSUsecase_SaveOverride_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSRCDSUsecase_SaveOverride_Call) RunAndReturn(run func(context.Context, domain.SMOverrides) (domain.SMOverrides, error)) *MockSRCDSUsecase_SaveOverride_Call {
	_c.Call.Return(run)
	return _c
}

// SetAdminGroups provides a mock function with given fields: ctx, authType, identity, groups
func (_m *MockSRCDSUsecase) SetAdminGroups(ctx context.Context, authType domain.AuthType, identity string, groups ...domain.SMGroups) error {
	_va := make([]interface{}, len(groups))
	for _i := range groups {
		_va[_i] = groups[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, authType, identity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetAdminGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.AuthType, string, ...domain.SMGroups) error); ok {
		r0 = rf(ctx, authType, identity, groups...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSRCDSUsecase_SetAdminGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAdminGroups'
type MockSRCDSUsecase_SetAdminGroups_Call struct {
	*mock.Call
}

// SetAdminGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - authType domain.AuthType
//   - identity string
//   - groups ...domain.SMGroups
func (_e *MockSRCDSUsecase_Expecter) SetAdminGroups(ctx interface{}, authType interface{}, identity interface{}, groups ...interface{}) *MockSRCDSUsecase_SetAdminGroups_Call {
	return &MockSRCDSUsecase_SetAdminGroups_Call{Call: _e.mock.On("SetAdminGroups",
		append([]interface{}{ctx, authType, identity}, groups...)...)}
}

func (_c *MockSRCDSUsecase_SetAdminGroups_Call) Run(run func(ctx context.Context, authType domain.AuthType, identity string, groups ...domain.SMGroups)) *MockSRCDSUsecase_SetAdminGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]domain.SMGroups, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(domain.SMGroups)
			}
		}
		run(args[0].(context.Context), args[1].(domain.AuthType), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSRCDSUsecase_SetAdminGroups_Call) Return(_a0 error) *MockSRCDSUsecase_SetAdminGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSRCDSUsecase_SetAdminGroups_Call) RunAndReturn(run func(context.Context, domain.AuthType, string, ...domain.SMGroups) error) *MockSRCDSUsecase_SetAdminGroups_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSRCDSUsecase creates a new instance of MockSRCDSUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSRCDSUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSRCDSUsecase {
	mock := &MockSRCDSUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
