// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockDemoRepository is an autogenerated mock type for the DemoRepository type
type MockDemoRepository struct {
	mock.Mock
}

type MockDemoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDemoRepository) EXPECT() *MockDemoRepository_Expecter {
	return &MockDemoRepository_Expecter{mock: &_m.Mock}
}

// DropDemo provides a mock function with given fields: ctx, demoFile
func (_m *MockDemoRepository) DropDemo(ctx context.Context, demoFile *domain.DemoFile) error {
	ret := _m.Called(ctx, demoFile)

	if len(ret) == 0 {
		panic("no return value specified for DropDemo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DemoFile) error); ok {
		r0 = rf(ctx, demoFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDemoRepository_DropDemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDemo'
type MockDemoRepository_DropDemo_Call struct {
	*mock.Call
}

// DropDemo is a helper method to define mock.On call
//   - ctx context.Context
//   - demoFile *domain.DemoFile
func (_e *MockDemoRepository_Expecter) DropDemo(ctx interface{}, demoFile interface{}) *MockDemoRepository_DropDemo_Call {
	return &MockDemoRepository_DropDemo_Call{Call: _e.mock.On("DropDemo", ctx, demoFile)}
}

func (_c *MockDemoRepository_DropDemo_Call) Run(run func(ctx context.Context, demoFile *domain.DemoFile)) *MockDemoRepository_DropDemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.DemoFile))
	})
	return _c
}

func (_c *MockDemoRepository_DropDemo_Call) Return(_a0 error) *MockDemoRepository_DropDemo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDemoRepository_DropDemo_Call) RunAndReturn(run func(context.Context, *domain.DemoFile) error) *MockDemoRepository_DropDemo_Call {
	_c.Call.Return(run)
	return _c
}

// ExpiredDemos provides a mock function with given fields: ctx, limit
func (_m *MockDemoRepository) ExpiredDemos(ctx context.Context, limit uint64) ([]domain.DemoInfo, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for ExpiredDemos")
	}

	var r0 []domain.DemoInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]domain.DemoInfo, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []domain.DemoInfo); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DemoInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDemoRepository_ExpiredDemos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpiredDemos'
type MockDemoRepository_ExpiredDemos_Call struct {
	*mock.Call
}

// ExpiredDemos is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint64
func (_e *MockDemoRepository_Expecter) ExpiredDemos(ctx interface{}, limit interface{}) *MockDemoRepository_ExpiredDemos_Call {
	return &MockDemoRepository_ExpiredDemos_Call{Call: _e.mock.On("ExpiredDemos", ctx, limit)}
}

func (_c *MockDemoRepository_ExpiredDemos_Call) Run(run func(ctx context.Context, limit uint64)) *MockDemoRepository_ExpiredDemos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockDemoRepository_ExpiredDemos_Call) Return(_a0 []domain.DemoInfo, _a1 error) *MockDemoRepository_ExpiredDemos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDemoRepository_ExpiredDemos_Call) RunAndReturn(run func(context.Context, uint64) ([]domain.DemoInfo, error)) *MockDemoRepository_ExpiredDemos_Call {
	_c.Call.Return(run)
	return _c
}

// GetDemoByID provides a mock function with given fields: ctx, demoID, demoFile
func (_m *MockDemoRepository) GetDemoByID(ctx context.Context, demoID int64, demoFile *domain.DemoFile) error {
	ret := _m.Called(ctx, demoID, demoFile)

	if len(ret) == 0 {
		panic("no return value specified for GetDemoByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.DemoFile) error); ok {
		r0 = rf(ctx, demoID, demoFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDemoRepository_GetDemoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDemoByID'
type MockDemoRepository_GetDemoByID_Call struct {
	*mock.Call
}

// GetDemoByID is a helper method to define mock.On call
//   - ctx context.Context
//   - demoID int64
//   - demoFile *domain.DemoFile
func (_e *MockDemoRepository_Expecter) GetDemoByID(ctx interface{}, demoID interface{}, demoFile interface{}) *MockDemoRepository_GetDemoByID_Call {
	return &MockDemoRepository_GetDemoByID_Call{Call: _e.mock.On("GetDemoByID", ctx, demoID, demoFile)}
}

func (_c *MockDemoRepository_GetDemoByID_Call) Run(run func(ctx context.Context, demoID int64, demoFile *domain.DemoFile)) *MockDemoRepository_GetDemoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.DemoFile))
	})
	return _c
}

func (_c *MockDemoRepository_GetDemoByID_Call) Return(_a0 error) *MockDemoRepository_GetDemoByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDemoRepository_GetDemoByID_Call) RunAndReturn(run func(context.Context, int64, *domain.DemoFile) error) *MockDemoRepository_GetDemoByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDemoByName provides a mock function with given fields: ctx, demoName, demoFile
func (_m *MockDemoRepository) GetDemoByName(ctx context.Context, demoName string, demoFile *domain.DemoFile) error {
	ret := _m.Called(ctx, demoName, demoFile)

	if len(ret) == 0 {
		panic("no return value specified for GetDemoByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DemoFile) error); ok {
		r0 = rf(ctx, demoName, demoFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDemoRepository_GetDemoByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDemoByName'
type MockDemoRepository_GetDemoByName_Call struct {
	*mock.Call
}

// GetDemoByName is a helper method to define mock.On call
//   - ctx context.Context
//   - demoName string
//   - demoFile *domain.DemoFile
func (_e *MockDemoRepository_Expecter) GetDemoByName(ctx interface{}, demoName interface{}, demoFile interface{}) *MockDemoRepository_GetDemoByName_Call {
	return &MockDemoRepository_GetDemoByName_Call{Call: _e.mock.On("GetDemoByName", ctx, demoName, demoFile)}
}

func (_c *MockDemoRepository_GetDemoByName_Call) Run(run func(ctx context.Context, demoName string, demoFile *domain.DemoFile)) *MockDemoRepository_GetDemoByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DemoFile))
	})
	return _c
}

func (_c *MockDemoRepository_GetDemoByName_Call) Return(_a0 error) *MockDemoRepository_GetDemoByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDemoRepository_GetDemoByName_Call) RunAndReturn(run func(context.Context, string, *domain.DemoFile) error) *MockDemoRepository_GetDemoByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDemos provides a mock function with given fields: ctx
func (_m *MockDemoRepository) GetDemos(ctx context.Context) ([]domain.DemoFile, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDemos")
	}

	var r0 []domain.DemoFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.DemoFile, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.DemoFile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DemoFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDemoRepository_GetDemos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDemos'
type MockDemoRepository_GetDemos_Call struct {
	*mock.Call
}

// GetDemos is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDemoRepository_Expecter) GetDemos(ctx interface{}) *MockDemoRepository_GetDemos_Call {
	return &MockDemoRepository_GetDemos_Call{Call: _e.mock.On("GetDemos", ctx)}
}

func (_c *MockDemoRepository_GetDemos_Call) Run(run func(ctx context.Context)) *MockDemoRepository_GetDemos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDemoRepository_GetDemos_Call) Return(_a0 []domain.DemoFile, _a1 error) *MockDemoRepository_GetDemos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDemoRepository_GetDemos_Call) RunAndReturn(run func(context.Context) ([]domain.DemoFile, error)) *MockDemoRepository_GetDemos_Call {
	_c.Call.Return(run)
	return _c
}

// SaveDemo provides a mock function with given fields: ctx, demoFile
func (_m *MockDemoRepository) SaveDemo(ctx context.Context, demoFile *domain.DemoFile) error {
	ret := _m.Called(ctx, demoFile)

	if len(ret) == 0 {
		panic("no return value specified for SaveDemo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DemoFile) error); ok {
		r0 = rf(ctx, demoFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDemoRepository_SaveDemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveDemo'
type MockDemoRepository_SaveDemo_Call struct {
	*mock.Call
}

// SaveDemo is a helper method to define mock.On call
//   - ctx context.Context
//   - demoFile *domain.DemoFile
func (_e *MockDemoRepository_Expecter) SaveDemo(ctx interface{}, demoFile interface{}) *MockDemoRepository_SaveDemo_Call {
	return &MockDemoRepository_SaveDemo_Call{Call: _e.mock.On("SaveDemo", ctx, demoFile)}
}

func (_c *MockDemoRepository_SaveDemo_Call) Run(run func(ctx context.Context, demoFile *domain.DemoFile)) *MockDemoRepository_SaveDemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.DemoFile))
	})
	return _c
}

func (_c *MockDemoRepository_SaveDemo_Call) Return(_a0 error) *MockDemoRepository_SaveDemo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDemoRepository_SaveDemo_Call) RunAndReturn(run func(context.Context, *domain.DemoFile) error) *MockDemoRepository_SaveDemo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDemoRepository creates a new instance of MockDemoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDemoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDemoRepository {
	mock := &MockDemoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
