// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v4/steamid"
)

// MockBlocklistRepository is an autogenerated mock type for the BlocklistRepository type
type MockBlocklistRepository struct {
	mock.Mock
}

type MockBlocklistRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlocklistRepository) EXPECT() *MockBlocklistRepository_Expecter {
	return &MockBlocklistRepository_Expecter{mock: &_m.Mock}
}

// CreateSteamBlockWhitelists provides a mock function with given fields: ctx, steamID
func (_m *MockBlocklistRepository) CreateSteamBlockWhitelists(ctx context.Context, steamID steamid.SteamID) (domain.WhitelistSteam, error) {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSteamBlockWhitelists")
	}

	var r0 domain.WhitelistSteam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) (domain.WhitelistSteam, error)); ok {
		return rf(ctx, steamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) domain.WhitelistSteam); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Get(0).(domain.WhitelistSteam)
	}

	if rf, ok := ret.Get(1).(func(context.Context, steamid.SteamID) error); ok {
		r1 = rf(ctx, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistRepository_CreateSteamBlockWhitelists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSteamBlockWhitelists'
type MockBlocklistRepository_CreateSteamBlockWhitelists_Call struct {
	*mock.Call
}

// CreateSteamBlockWhitelists is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockBlocklistRepository_Expecter) CreateSteamBlockWhitelists(ctx interface{}, steamID interface{}) *MockBlocklistRepository_CreateSteamBlockWhitelists_Call {
	return &MockBlocklistRepository_CreateSteamBlockWhitelists_Call{Call: _e.mock.On("CreateSteamBlockWhitelists", ctx, steamID)}
}

func (_c *MockBlocklistRepository_CreateSteamBlockWhitelists_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockBlocklistRepository_CreateSteamBlockWhitelists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockBlocklistRepository_CreateSteamBlockWhitelists_Call) Return(_a0 domain.WhitelistSteam, _a1 error) *MockBlocklistRepository_CreateSteamBlockWhitelists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistRepository_CreateSteamBlockWhitelists_Call) RunAndReturn(run func(context.Context, steamid.SteamID) (domain.WhitelistSteam, error)) *MockBlocklistRepository_CreateSteamBlockWhitelists_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCIDRBlockSources provides a mock function with given fields: ctx, blockSourceID
func (_m *MockBlocklistRepository) DeleteCIDRBlockSources(ctx context.Context, blockSourceID int) error {
	ret := _m.Called(ctx, blockSourceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCIDRBlockSources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, blockSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistRepository_DeleteCIDRBlockSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCIDRBlockSources'
type MockBlocklistRepository_DeleteCIDRBlockSources_Call struct {
	*mock.Call
}

// DeleteCIDRBlockSources is a helper method to define mock.On call
//   - ctx context.Context
//   - blockSourceID int
func (_e *MockBlocklistRepository_Expecter) DeleteCIDRBlockSources(ctx interface{}, blockSourceID interface{}) *MockBlocklistRepository_DeleteCIDRBlockSources_Call {
	return &MockBlocklistRepository_DeleteCIDRBlockSources_Call{Call: _e.mock.On("DeleteCIDRBlockSources", ctx, blockSourceID)}
}

func (_c *MockBlocklistRepository_DeleteCIDRBlockSources_Call) Run(run func(ctx context.Context, blockSourceID int)) *MockBlocklistRepository_DeleteCIDRBlockSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBlocklistRepository_DeleteCIDRBlockSources_Call) Return(_a0 error) *MockBlocklistRepository_DeleteCIDRBlockSources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistRepository_DeleteCIDRBlockSources_Call) RunAndReturn(run func(context.Context, int) error) *MockBlocklistRepository_DeleteCIDRBlockSources_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCIDRBlockWhitelist provides a mock function with given fields: ctx, whitelistID
func (_m *MockBlocklistRepository) DeleteCIDRBlockWhitelist(ctx context.Context, whitelistID int) error {
	ret := _m.Called(ctx, whitelistID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCIDRBlockWhitelist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, whitelistID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCIDRBlockWhitelist'
type MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call struct {
	*mock.Call
}

// DeleteCIDRBlockWhitelist is a helper method to define mock.On call
//   - ctx context.Context
//   - whitelistID int
func (_e *MockBlocklistRepository_Expecter) DeleteCIDRBlockWhitelist(ctx interface{}, whitelistID interface{}) *MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call {
	return &MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call{Call: _e.mock.On("DeleteCIDRBlockWhitelist", ctx, whitelistID)}
}

func (_c *MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call) Run(run func(ctx context.Context, whitelistID int)) *MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call) Return(_a0 error) *MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call) RunAndReturn(run func(context.Context, int) error) *MockBlocklistRepository_DeleteCIDRBlockWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSteamBlockWhitelists provides a mock function with given fields: ctx, steamID
func (_m *MockBlocklistRepository) DeleteSteamBlockWhitelists(ctx context.Context, steamID steamid.SteamID) error {
	ret := _m.Called(ctx, steamID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSteamBlockWhitelists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, steamid.SteamID) error); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistRepository_DeleteSteamBlockWhitelists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSteamBlockWhitelists'
type MockBlocklistRepository_DeleteSteamBlockWhitelists_Call struct {
	*mock.Call
}

// DeleteSteamBlockWhitelists is a helper method to define mock.On call
//   - ctx context.Context
//   - steamID steamid.SteamID
func (_e *MockBlocklistRepository_Expecter) DeleteSteamBlockWhitelists(ctx interface{}, steamID interface{}) *MockBlocklistRepository_DeleteSteamBlockWhitelists_Call {
	return &MockBlocklistRepository_DeleteSteamBlockWhitelists_Call{Call: _e.mock.On("DeleteSteamBlockWhitelists", ctx, steamID)}
}

func (_c *MockBlocklistRepository_DeleteSteamBlockWhitelists_Call) Run(run func(ctx context.Context, steamID steamid.SteamID)) *MockBlocklistRepository_DeleteSteamBlockWhitelists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(steamid.SteamID))
	})
	return _c
}

func (_c *MockBlocklistRepository_DeleteSteamBlockWhitelists_Call) Return(_a0 error) *MockBlocklistRepository_DeleteSteamBlockWhitelists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistRepository_DeleteSteamBlockWhitelists_Call) RunAndReturn(run func(context.Context, steamid.SteamID) error) *MockBlocklistRepository_DeleteSteamBlockWhitelists_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIDRBlockSource provides a mock function with given fields: ctx, sourceID, block
func (_m *MockBlocklistRepository) GetCIDRBlockSource(ctx context.Context, sourceID int, block *domain.CIDRBlockSource) error {
	ret := _m.Called(ctx, sourceID, block)

	if len(ret) == 0 {
		panic("no return value specified for GetCIDRBlockSource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.CIDRBlockSource) error); ok {
		r0 = rf(ctx, sourceID, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistRepository_GetCIDRBlockSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRBlockSource'
type MockBlocklistRepository_GetCIDRBlockSource_Call struct {
	*mock.Call
}

// GetCIDRBlockSource is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceID int
//   - block *domain.CIDRBlockSource
func (_e *MockBlocklistRepository_Expecter) GetCIDRBlockSource(ctx interface{}, sourceID interface{}, block interface{}) *MockBlocklistRepository_GetCIDRBlockSource_Call {
	return &MockBlocklistRepository_GetCIDRBlockSource_Call{Call: _e.mock.On("GetCIDRBlockSource", ctx, sourceID, block)}
}

func (_c *MockBlocklistRepository_GetCIDRBlockSource_Call) Run(run func(ctx context.Context, sourceID int, block *domain.CIDRBlockSource)) *MockBlocklistRepository_GetCIDRBlockSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.CIDRBlockSource))
	})
	return _c
}

func (_c *MockBlocklistRepository_GetCIDRBlockSource_Call) Return(_a0 error) *MockBlocklistRepository_GetCIDRBlockSource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistRepository_GetCIDRBlockSource_Call) RunAndReturn(run func(context.Context, int, *domain.CIDRBlockSource) error) *MockBlocklistRepository_GetCIDRBlockSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIDRBlockSources provides a mock function with given fields: ctx
func (_m *MockBlocklistRepository) GetCIDRBlockSources(ctx context.Context) ([]domain.CIDRBlockSource, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCIDRBlockSources")
	}

	var r0 []domain.CIDRBlockSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.CIDRBlockSource, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.CIDRBlockSource); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CIDRBlockSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistRepository_GetCIDRBlockSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRBlockSources'
type MockBlocklistRepository_GetCIDRBlockSources_Call struct {
	*mock.Call
}

// GetCIDRBlockSources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlocklistRepository_Expecter) GetCIDRBlockSources(ctx interface{}) *MockBlocklistRepository_GetCIDRBlockSources_Call {
	return &MockBlocklistRepository_GetCIDRBlockSources_Call{Call: _e.mock.On("GetCIDRBlockSources", ctx)}
}

func (_c *MockBlocklistRepository_GetCIDRBlockSources_Call) Run(run func(ctx context.Context)) *MockBlocklistRepository_GetCIDRBlockSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlocklistRepository_GetCIDRBlockSources_Call) Return(_a0 []domain.CIDRBlockSource, _a1 error) *MockBlocklistRepository_GetCIDRBlockSources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistRepository_GetCIDRBlockSources_Call) RunAndReturn(run func(context.Context) ([]domain.CIDRBlockSource, error)) *MockBlocklistRepository_GetCIDRBlockSources_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIDRBlockWhitelist provides a mock function with given fields: ctx, whitelistID, whitelist
func (_m *MockBlocklistRepository) GetCIDRBlockWhitelist(ctx context.Context, whitelistID int, whitelist *domain.WhitelistIP) error {
	ret := _m.Called(ctx, whitelistID, whitelist)

	if len(ret) == 0 {
		panic("no return value specified for GetCIDRBlockWhitelist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.WhitelistIP) error); ok {
		r0 = rf(ctx, whitelistID, whitelist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistRepository_GetCIDRBlockWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRBlockWhitelist'
type MockBlocklistRepository_GetCIDRBlockWhitelist_Call struct {
	*mock.Call
}

// GetCIDRBlockWhitelist is a helper method to define mock.On call
//   - ctx context.Context
//   - whitelistID int
//   - whitelist *domain.WhitelistIP
func (_e *MockBlocklistRepository_Expecter) GetCIDRBlockWhitelist(ctx interface{}, whitelistID interface{}, whitelist interface{}) *MockBlocklistRepository_GetCIDRBlockWhitelist_Call {
	return &MockBlocklistRepository_GetCIDRBlockWhitelist_Call{Call: _e.mock.On("GetCIDRBlockWhitelist", ctx, whitelistID, whitelist)}
}

func (_c *MockBlocklistRepository_GetCIDRBlockWhitelist_Call) Run(run func(ctx context.Context, whitelistID int, whitelist *domain.WhitelistIP)) *MockBlocklistRepository_GetCIDRBlockWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.WhitelistIP))
	})
	return _c
}

func (_c *MockBlocklistRepository_GetCIDRBlockWhitelist_Call) Return(_a0 error) *MockBlocklistRepository_GetCIDRBlockWhitelist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistRepository_GetCIDRBlockWhitelist_Call) RunAndReturn(run func(context.Context, int, *domain.WhitelistIP) error) *MockBlocklistRepository_GetCIDRBlockWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// GetCIDRBlockWhitelists provides a mock function with given fields: ctx
func (_m *MockBlocklistRepository) GetCIDRBlockWhitelists(ctx context.Context) ([]domain.WhitelistIP, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCIDRBlockWhitelists")
	}

	var r0 []domain.WhitelistIP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.WhitelistIP, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.WhitelistIP); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.WhitelistIP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistRepository_GetCIDRBlockWhitelists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRBlockWhitelists'
type MockBlocklistRepository_GetCIDRBlockWhitelists_Call struct {
	*mock.Call
}

// GetCIDRBlockWhitelists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlocklistRepository_Expecter) GetCIDRBlockWhitelists(ctx interface{}) *MockBlocklistRepository_GetCIDRBlockWhitelists_Call {
	return &MockBlocklistRepository_GetCIDRBlockWhitelists_Call{Call: _e.mock.On("GetCIDRBlockWhitelists", ctx)}
}

func (_c *MockBlocklistRepository_GetCIDRBlockWhitelists_Call) Run(run func(ctx context.Context)) *MockBlocklistRepository_GetCIDRBlockWhitelists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlocklistRepository_GetCIDRBlockWhitelists_Call) Return(_a0 []domain.WhitelistIP, _a1 error) *MockBlocklistRepository_GetCIDRBlockWhitelists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistRepository_GetCIDRBlockWhitelists_Call) RunAndReturn(run func(context.Context) ([]domain.WhitelistIP, error)) *MockBlocklistRepository_GetCIDRBlockWhitelists_Call {
	_c.Call.Return(run)
	return _c
}

// GetSteamBlockWhitelists provides a mock function with given fields: ctx
func (_m *MockBlocklistRepository) GetSteamBlockWhitelists(ctx context.Context) ([]domain.WhitelistSteam, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSteamBlockWhitelists")
	}

	var r0 []domain.WhitelistSteam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.WhitelistSteam, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.WhitelistSteam); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.WhitelistSteam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocklistRepository_GetSteamBlockWhitelists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSteamBlockWhitelists'
type MockBlocklistRepository_GetSteamBlockWhitelists_Call struct {
	*mock.Call
}

// GetSteamBlockWhitelists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlocklistRepository_Expecter) GetSteamBlockWhitelists(ctx interface{}) *MockBlocklistRepository_GetSteamBlockWhitelists_Call {
	return &MockBlocklistRepository_GetSteamBlockWhitelists_Call{Call: _e.mock.On("GetSteamBlockWhitelists", ctx)}
}

func (_c *MockBlocklistRepository_GetSteamBlockWhitelists_Call) Run(run func(ctx context.Context)) *MockBlocklistRepository_GetSteamBlockWhitelists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlocklistRepository_GetSteamBlockWhitelists_Call) Return(_a0 []domain.WhitelistSteam, _a1 error) *MockBlocklistRepository_GetSteamBlockWhitelists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocklistRepository_GetSteamBlockWhitelists_Call) RunAndReturn(run func(context.Context) ([]domain.WhitelistSteam, error)) *MockBlocklistRepository_GetSteamBlockWhitelists_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCIDRBlockSources provides a mock function with given fields: ctx, block
func (_m *MockBlocklistRepository) SaveCIDRBlockSources(ctx context.Context, block *domain.CIDRBlockSource) error {
	ret := _m.Called(ctx, block)

	if len(ret) == 0 {
		panic("no return value specified for SaveCIDRBlockSources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CIDRBlockSource) error); ok {
		r0 = rf(ctx, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistRepository_SaveCIDRBlockSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCIDRBlockSources'
type MockBlocklistRepository_SaveCIDRBlockSources_Call struct {
	*mock.Call
}

// SaveCIDRBlockSources is a helper method to define mock.On call
//   - ctx context.Context
//   - block *domain.CIDRBlockSource
func (_e *MockBlocklistRepository_Expecter) SaveCIDRBlockSources(ctx interface{}, block interface{}) *MockBlocklistRepository_SaveCIDRBlockSources_Call {
	return &MockBlocklistRepository_SaveCIDRBlockSources_Call{Call: _e.mock.On("SaveCIDRBlockSources", ctx, block)}
}

func (_c *MockBlocklistRepository_SaveCIDRBlockSources_Call) Run(run func(ctx context.Context, block *domain.CIDRBlockSource)) *MockBlocklistRepository_SaveCIDRBlockSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.CIDRBlockSource))
	})
	return _c
}

func (_c *MockBlocklistRepository_SaveCIDRBlockSources_Call) Return(_a0 error) *MockBlocklistRepository_SaveCIDRBlockSources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistRepository_SaveCIDRBlockSources_Call) RunAndReturn(run func(context.Context, *domain.CIDRBlockSource) error) *MockBlocklistRepository_SaveCIDRBlockSources_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCIDRBlockWhitelist provides a mock function with given fields: ctx, whitelist
func (_m *MockBlocklistRepository) SaveCIDRBlockWhitelist(ctx context.Context, whitelist *domain.WhitelistIP) error {
	ret := _m.Called(ctx, whitelist)

	if len(ret) == 0 {
		panic("no return value specified for SaveCIDRBlockWhitelist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.WhitelistIP) error); ok {
		r0 = rf(ctx, whitelist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocklistRepository_SaveCIDRBlockWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCIDRBlockWhitelist'
type MockBlocklistRepository_SaveCIDRBlockWhitelist_Call struct {
	*mock.Call
}

// SaveCIDRBlockWhitelist is a helper method to define mock.On call
//   - ctx context.Context
//   - whitelist *domain.WhitelistIP
func (_e *MockBlocklistRepository_Expecter) SaveCIDRBlockWhitelist(ctx interface{}, whitelist interface{}) *MockBlocklistRepository_SaveCIDRBlockWhitelist_Call {
	return &MockBlocklistRepository_SaveCIDRBlockWhitelist_Call{Call: _e.mock.On("SaveCIDRBlockWhitelist", ctx, whitelist)}
}

func (_c *MockBlocklistRepository_SaveCIDRBlockWhitelist_Call) Run(run func(ctx context.Context, whitelist *domain.WhitelistIP)) *MockBlocklistRepository_SaveCIDRBlockWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.WhitelistIP))
	})
	return _c
}

func (_c *MockBlocklistRepository_SaveCIDRBlockWhitelist_Call) Return(_a0 error) *MockBlocklistRepository_SaveCIDRBlockWhitelist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocklistRepository_SaveCIDRBlockWhitelist_Call) RunAndReturn(run func(context.Context, *domain.WhitelistIP) error) *MockBlocklistRepository_SaveCIDRBlockWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlocklistRepository creates a new instance of MockBlocklistRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlocklistRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlocklistRepository {
	mock := &MockBlocklistRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
