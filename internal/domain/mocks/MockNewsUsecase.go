// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockNewsUsecase is an autogenerated mock type for the NewsUsecase type
type MockNewsUsecase struct {
	mock.Mock
}

type MockNewsUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNewsUsecase) EXPECT() *MockNewsUsecase_Expecter {
	return &MockNewsUsecase_Expecter{mock: &_m.Mock}
}

// DropNewsArticle provides a mock function with given fields: ctx, newsID
func (_m *MockNewsUsecase) DropNewsArticle(ctx context.Context, newsID int) error {
	ret := _m.Called(ctx, newsID)

	if len(ret) == 0 {
		panic("no return value specified for DropNewsArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, newsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNewsUsecase_DropNewsArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropNewsArticle'
type MockNewsUsecase_DropNewsArticle_Call struct {
	*mock.Call
}

// DropNewsArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - newsID int
func (_e *MockNewsUsecase_Expecter) DropNewsArticle(ctx interface{}, newsID interface{}) *MockNewsUsecase_DropNewsArticle_Call {
	return &MockNewsUsecase_DropNewsArticle_Call{Call: _e.mock.On("DropNewsArticle", ctx, newsID)}
}

func (_c *MockNewsUsecase_DropNewsArticle_Call) Run(run func(ctx context.Context, newsID int)) *MockNewsUsecase_DropNewsArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockNewsUsecase_DropNewsArticle_Call) Return(_a0 error) *MockNewsUsecase_DropNewsArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNewsUsecase_DropNewsArticle_Call) RunAndReturn(run func(context.Context, int) error) *MockNewsUsecase_DropNewsArticle_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewsByID provides a mock function with given fields: ctx, newsID, entry
func (_m *MockNewsUsecase) GetNewsByID(ctx context.Context, newsID int, entry *domain.NewsEntry) error {
	ret := _m.Called(ctx, newsID, entry)

	if len(ret) == 0 {
		panic("no return value specified for GetNewsByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.NewsEntry) error); ok {
		r0 = rf(ctx, newsID, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNewsUsecase_GetNewsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewsByID'
type MockNewsUsecase_GetNewsByID_Call struct {
	*mock.Call
}

// GetNewsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - newsID int
//   - entry *domain.NewsEntry
func (_e *MockNewsUsecase_Expecter) GetNewsByID(ctx interface{}, newsID interface{}, entry interface{}) *MockNewsUsecase_GetNewsByID_Call {
	return &MockNewsUsecase_GetNewsByID_Call{Call: _e.mock.On("GetNewsByID", ctx, newsID, entry)}
}

func (_c *MockNewsUsecase_GetNewsByID_Call) Run(run func(ctx context.Context, newsID int, entry *domain.NewsEntry)) *MockNewsUsecase_GetNewsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.NewsEntry))
	})
	return _c
}

func (_c *MockNewsUsecase_GetNewsByID_Call) Return(_a0 error) *MockNewsUsecase_GetNewsByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNewsUsecase_GetNewsByID_Call) RunAndReturn(run func(context.Context, int, *domain.NewsEntry) error) *MockNewsUsecase_GetNewsByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewsLatest provides a mock function with given fields: ctx, limit, includeUnpublished
func (_m *MockNewsUsecase) GetNewsLatest(ctx context.Context, limit int, includeUnpublished bool) ([]domain.NewsEntry, error) {
	ret := _m.Called(ctx, limit, includeUnpublished)

	if len(ret) == 0 {
		panic("no return value specified for GetNewsLatest")
	}

	var r0 []domain.NewsEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) ([]domain.NewsEntry, error)); ok {
		return rf(ctx, limit, includeUnpublished)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) []domain.NewsEntry); ok {
		r0 = rf(ctx, limit, includeUnpublished)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NewsEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, bool) error); ok {
		r1 = rf(ctx, limit, includeUnpublished)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNewsUsecase_GetNewsLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewsLatest'
type MockNewsUsecase_GetNewsLatest_Call struct {
	*mock.Call
}

// GetNewsLatest is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - includeUnpublished bool
func (_e *MockNewsUsecase_Expecter) GetNewsLatest(ctx interface{}, limit interface{}, includeUnpublished interface{}) *MockNewsUsecase_GetNewsLatest_Call {
	return &MockNewsUsecase_GetNewsLatest_Call{Call: _e.mock.On("GetNewsLatest", ctx, limit, includeUnpublished)}
}

func (_c *MockNewsUsecase_GetNewsLatest_Call) Run(run func(ctx context.Context, limit int, includeUnpublished bool)) *MockNewsUsecase_GetNewsLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(bool))
	})
	return _c
}

func (_c *MockNewsUsecase_GetNewsLatest_Call) Return(_a0 []domain.NewsEntry, _a1 error) *MockNewsUsecase_GetNewsLatest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewsUsecase_GetNewsLatest_Call) RunAndReturn(run func(context.Context, int, bool) ([]domain.NewsEntry, error)) *MockNewsUsecase_GetNewsLatest_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewsLatestArticle provides a mock function with given fields: ctx, includeUnpublished, entry
func (_m *MockNewsUsecase) GetNewsLatestArticle(ctx context.Context, includeUnpublished bool, entry *domain.NewsEntry) error {
	ret := _m.Called(ctx, includeUnpublished, entry)

	if len(ret) == 0 {
		panic("no return value specified for GetNewsLatestArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, *domain.NewsEntry) error); ok {
		r0 = rf(ctx, includeUnpublished, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNewsUsecase_GetNewsLatestArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewsLatestArticle'
type MockNewsUsecase_GetNewsLatestArticle_Call struct {
	*mock.Call
}

// GetNewsLatestArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - includeUnpublished bool
//   - entry *domain.NewsEntry
func (_e *MockNewsUsecase_Expecter) GetNewsLatestArticle(ctx interface{}, includeUnpublished interface{}, entry interface{}) *MockNewsUsecase_GetNewsLatestArticle_Call {
	return &MockNewsUsecase_GetNewsLatestArticle_Call{Call: _e.mock.On("GetNewsLatestArticle", ctx, includeUnpublished, entry)}
}

func (_c *MockNewsUsecase_GetNewsLatestArticle_Call) Run(run func(ctx context.Context, includeUnpublished bool, entry *domain.NewsEntry)) *MockNewsUsecase_GetNewsLatestArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(*domain.NewsEntry))
	})
	return _c
}

func (_c *MockNewsUsecase_GetNewsLatestArticle_Call) Return(_a0 error) *MockNewsUsecase_GetNewsLatestArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNewsUsecase_GetNewsLatestArticle_Call) RunAndReturn(run func(context.Context, bool, *domain.NewsEntry) error) *MockNewsUsecase_GetNewsLatestArticle_Call {
	_c.Call.Return(run)
	return _c
}

// SaveNewsArticle provides a mock function with given fields: ctx, entry
func (_m *MockNewsUsecase) SaveNewsArticle(ctx context.Context, entry *domain.NewsEntry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for SaveNewsArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.NewsEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNewsUsecase_SaveNewsArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNewsArticle'
type MockNewsUsecase_SaveNewsArticle_Call struct {
	*mock.Call
}

// SaveNewsArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - entry *domain.NewsEntry
func (_e *MockNewsUsecase_Expecter) SaveNewsArticle(ctx interface{}, entry interface{}) *MockNewsUsecase_SaveNewsArticle_Call {
	return &MockNewsUsecase_SaveNewsArticle_Call{Call: _e.mock.On("SaveNewsArticle", ctx, entry)}
}

func (_c *MockNewsUsecase_SaveNewsArticle_Call) Run(run func(ctx context.Context, entry *domain.NewsEntry)) *MockNewsUsecase_SaveNewsArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.NewsEntry))
	})
	return _c
}

func (_c *MockNewsUsecase_SaveNewsArticle_Call) Return(_a0 error) *MockNewsUsecase_SaveNewsArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNewsUsecase_SaveNewsArticle_Call) RunAndReturn(run func(context.Context, *domain.NewsEntry) error) *MockNewsUsecase_SaveNewsArticle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNewsUsecase creates a new instance of MockNewsUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNewsUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNewsUsecase {
	mock := &MockNewsUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
