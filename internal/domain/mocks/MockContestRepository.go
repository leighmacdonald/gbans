// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leighmacdonald/gbans/internal/domain"
	mock "github.com/stretchr/testify/mock"

	steamid "github.com/leighmacdonald/steamid/v3/steamid"

	uuid "github.com/gofrs/uuid/v5"
)

// MockContestRepository is an autogenerated mock type for the ContestRepository type
type MockContestRepository struct {
	mock.Mock
}

type MockContestRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContestRepository) EXPECT() *MockContestRepository_Expecter {
	return &MockContestRepository_Expecter{mock: &_m.Mock}
}

// ContestByID provides a mock function with given fields: ctx, contestID, contest
func (_m *MockContestRepository) ContestByID(ctx context.Context, contestID uuid.UUID, contest *domain.Contest) error {
	ret := _m.Called(ctx, contestID, contest)

	if len(ret) == 0 {
		panic("no return value specified for ContestByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.Contest) error); ok {
		r0 = rf(ctx, contestID, contest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestByID'
type MockContestRepository_ContestByID_Call struct {
	*mock.Call
}

// ContestByID is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
//   - contest *domain.Contest
func (_e *MockContestRepository_Expecter) ContestByID(ctx interface{}, contestID interface{}, contest interface{}) *MockContestRepository_ContestByID_Call {
	return &MockContestRepository_ContestByID_Call{Call: _e.mock.On("ContestByID", ctx, contestID, contest)}
}

func (_c *MockContestRepository_ContestByID_Call) Run(run func(ctx context.Context, contestID uuid.UUID, contest *domain.Contest)) *MockContestRepository_ContestByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*domain.Contest))
	})
	return _c
}

func (_c *MockContestRepository_ContestByID_Call) Return(_a0 error) *MockContestRepository_ContestByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestByID_Call) RunAndReturn(run func(context.Context, uuid.UUID, *domain.Contest) error) *MockContestRepository_ContestByID_Call {
	_c.Call.Return(run)
	return _c
}

// ContestDelete provides a mock function with given fields: ctx, contestID
func (_m *MockContestRepository) ContestDelete(ctx context.Context, contestID uuid.UUID) error {
	ret := _m.Called(ctx, contestID)

	if len(ret) == 0 {
		panic("no return value specified for ContestDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, contestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestDelete'
type MockContestRepository_ContestDelete_Call struct {
	*mock.Call
}

// ContestDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
func (_e *MockContestRepository_Expecter) ContestDelete(ctx interface{}, contestID interface{}) *MockContestRepository_ContestDelete_Call {
	return &MockContestRepository_ContestDelete_Call{Call: _e.mock.On("ContestDelete", ctx, contestID)}
}

func (_c *MockContestRepository_ContestDelete_Call) Run(run func(ctx context.Context, contestID uuid.UUID)) *MockContestRepository_ContestDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockContestRepository_ContestDelete_Call) Return(_a0 error) *MockContestRepository_ContestDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestDelete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockContestRepository_ContestDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntries provides a mock function with given fields: ctx, contestID
func (_m *MockContestRepository) ContestEntries(ctx context.Context, contestID uuid.UUID) ([]*domain.ContestEntry, error) {
	ret := _m.Called(ctx, contestID)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntries")
	}

	var r0 []*domain.ContestEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.ContestEntry, error)); ok {
		return rf(ctx, contestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.ContestEntry); ok {
		r0 = rf(ctx, contestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ContestEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, contestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContestRepository_ContestEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntries'
type MockContestRepository_ContestEntries_Call struct {
	*mock.Call
}

// ContestEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
func (_e *MockContestRepository_Expecter) ContestEntries(ctx interface{}, contestID interface{}) *MockContestRepository_ContestEntries_Call {
	return &MockContestRepository_ContestEntries_Call{Call: _e.mock.On("ContestEntries", ctx, contestID)}
}

func (_c *MockContestRepository_ContestEntries_Call) Run(run func(ctx context.Context, contestID uuid.UUID)) *MockContestRepository_ContestEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockContestRepository_ContestEntries_Call) Return(_a0 []*domain.ContestEntry, _a1 error) *MockContestRepository_ContestEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContestRepository_ContestEntries_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*domain.ContestEntry, error)) *MockContestRepository_ContestEntries_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntry provides a mock function with given fields: ctx, contestID, entry
func (_m *MockContestRepository) ContestEntry(ctx context.Context, contestID uuid.UUID, entry *domain.ContestEntry) error {
	ret := _m.Called(ctx, contestID, entry)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.ContestEntry) error); ok {
		r0 = rf(ctx, contestID, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntry'
type MockContestRepository_ContestEntry_Call struct {
	*mock.Call
}

// ContestEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - contestID uuid.UUID
//   - entry *domain.ContestEntry
func (_e *MockContestRepository_Expecter) ContestEntry(ctx interface{}, contestID interface{}, entry interface{}) *MockContestRepository_ContestEntry_Call {
	return &MockContestRepository_ContestEntry_Call{Call: _e.mock.On("ContestEntry", ctx, contestID, entry)}
}

func (_c *MockContestRepository_ContestEntry_Call) Run(run func(ctx context.Context, contestID uuid.UUID, entry *domain.ContestEntry)) *MockContestRepository_ContestEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*domain.ContestEntry))
	})
	return _c
}

func (_c *MockContestRepository_ContestEntry_Call) Return(_a0 error) *MockContestRepository_ContestEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestEntry_Call) RunAndReturn(run func(context.Context, uuid.UUID, *domain.ContestEntry) error) *MockContestRepository_ContestEntry_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryDelete provides a mock function with given fields: ctx, contestEntryID
func (_m *MockContestRepository) ContestEntryDelete(ctx context.Context, contestEntryID uuid.UUID) error {
	ret := _m.Called(ctx, contestEntryID)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, contestEntryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestEntryDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryDelete'
type MockContestRepository_ContestEntryDelete_Call struct {
	*mock.Call
}

// ContestEntryDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryID uuid.UUID
func (_e *MockContestRepository_Expecter) ContestEntryDelete(ctx interface{}, contestEntryID interface{}) *MockContestRepository_ContestEntryDelete_Call {
	return &MockContestRepository_ContestEntryDelete_Call{Call: _e.mock.On("ContestEntryDelete", ctx, contestEntryID)}
}

func (_c *MockContestRepository_ContestEntryDelete_Call) Run(run func(ctx context.Context, contestEntryID uuid.UUID)) *MockContestRepository_ContestEntryDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockContestRepository_ContestEntryDelete_Call) Return(_a0 error) *MockContestRepository_ContestEntryDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestEntryDelete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockContestRepository_ContestEntryDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntrySave provides a mock function with given fields: ctx, entry
func (_m *MockContestRepository) ContestEntrySave(ctx context.Context, entry domain.ContestEntry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntrySave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ContestEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestEntrySave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntrySave'
type MockContestRepository_ContestEntrySave_Call struct {
	*mock.Call
}

// ContestEntrySave is a helper method to define mock.On call
//   - ctx context.Context
//   - entry domain.ContestEntry
func (_e *MockContestRepository_Expecter) ContestEntrySave(ctx interface{}, entry interface{}) *MockContestRepository_ContestEntrySave_Call {
	return &MockContestRepository_ContestEntrySave_Call{Call: _e.mock.On("ContestEntrySave", ctx, entry)}
}

func (_c *MockContestRepository_ContestEntrySave_Call) Run(run func(ctx context.Context, entry domain.ContestEntry)) *MockContestRepository_ContestEntrySave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ContestEntry))
	})
	return _c
}

func (_c *MockContestRepository_ContestEntrySave_Call) Return(_a0 error) *MockContestRepository_ContestEntrySave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestEntrySave_Call) RunAndReturn(run func(context.Context, domain.ContestEntry) error) *MockContestRepository_ContestEntrySave_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryVote provides a mock function with given fields: ctx, contestEntryID, steamID, vote
func (_m *MockContestRepository) ContestEntryVote(ctx context.Context, contestEntryID uuid.UUID, steamID steamid.SID64, vote bool) error {
	ret := _m.Called(ctx, contestEntryID, steamID, vote)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, steamid.SID64, bool) error); ok {
		r0 = rf(ctx, contestEntryID, steamID, vote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestEntryVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryVote'
type MockContestRepository_ContestEntryVote_Call struct {
	*mock.Call
}

// ContestEntryVote is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryID uuid.UUID
//   - steamID steamid.SID64
//   - vote bool
func (_e *MockContestRepository_Expecter) ContestEntryVote(ctx interface{}, contestEntryID interface{}, steamID interface{}, vote interface{}) *MockContestRepository_ContestEntryVote_Call {
	return &MockContestRepository_ContestEntryVote_Call{Call: _e.mock.On("ContestEntryVote", ctx, contestEntryID, steamID, vote)}
}

func (_c *MockContestRepository_ContestEntryVote_Call) Run(run func(ctx context.Context, contestEntryID uuid.UUID, steamID steamid.SID64, vote bool)) *MockContestRepository_ContestEntryVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(steamid.SID64), args[3].(bool))
	})
	return _c
}

func (_c *MockContestRepository_ContestEntryVote_Call) Return(_a0 error) *MockContestRepository_ContestEntryVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestEntryVote_Call) RunAndReturn(run func(context.Context, uuid.UUID, steamid.SID64, bool) error) *MockContestRepository_ContestEntryVote_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryVoteDelete provides a mock function with given fields: ctx, contestEntryVoteID
func (_m *MockContestRepository) ContestEntryVoteDelete(ctx context.Context, contestEntryVoteID int64) error {
	ret := _m.Called(ctx, contestEntryVoteID)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryVoteDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, contestEntryVoteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestEntryVoteDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryVoteDelete'
type MockContestRepository_ContestEntryVoteDelete_Call struct {
	*mock.Call
}

// ContestEntryVoteDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryVoteID int64
func (_e *MockContestRepository_Expecter) ContestEntryVoteDelete(ctx interface{}, contestEntryVoteID interface{}) *MockContestRepository_ContestEntryVoteDelete_Call {
	return &MockContestRepository_ContestEntryVoteDelete_Call{Call: _e.mock.On("ContestEntryVoteDelete", ctx, contestEntryVoteID)}
}

func (_c *MockContestRepository_ContestEntryVoteDelete_Call) Run(run func(ctx context.Context, contestEntryVoteID int64)) *MockContestRepository_ContestEntryVoteDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockContestRepository_ContestEntryVoteDelete_Call) Return(_a0 error) *MockContestRepository_ContestEntryVoteDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestEntryVoteDelete_Call) RunAndReturn(run func(context.Context, int64) error) *MockContestRepository_ContestEntryVoteDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryVoteGet provides a mock function with given fields: ctx, contestEntryID, steamID, record
func (_m *MockContestRepository) ContestEntryVoteGet(ctx context.Context, contestEntryID uuid.UUID, steamID steamid.SID64, record *domain.ContentVoteRecord) error {
	ret := _m.Called(ctx, contestEntryID, steamID, record)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryVoteGet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, steamid.SID64, *domain.ContentVoteRecord) error); ok {
		r0 = rf(ctx, contestEntryID, steamID, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestEntryVoteGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryVoteGet'
type MockContestRepository_ContestEntryVoteGet_Call struct {
	*mock.Call
}

// ContestEntryVoteGet is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryID uuid.UUID
//   - steamID steamid.SID64
//   - record *domain.ContentVoteRecord
func (_e *MockContestRepository_Expecter) ContestEntryVoteGet(ctx interface{}, contestEntryID interface{}, steamID interface{}, record interface{}) *MockContestRepository_ContestEntryVoteGet_Call {
	return &MockContestRepository_ContestEntryVoteGet_Call{Call: _e.mock.On("ContestEntryVoteGet", ctx, contestEntryID, steamID, record)}
}

func (_c *MockContestRepository_ContestEntryVoteGet_Call) Run(run func(ctx context.Context, contestEntryID uuid.UUID, steamID steamid.SID64, record *domain.ContentVoteRecord)) *MockContestRepository_ContestEntryVoteGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(steamid.SID64), args[3].(*domain.ContentVoteRecord))
	})
	return _c
}

func (_c *MockContestRepository_ContestEntryVoteGet_Call) Return(_a0 error) *MockContestRepository_ContestEntryVoteGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestEntryVoteGet_Call) RunAndReturn(run func(context.Context, uuid.UUID, steamid.SID64, *domain.ContentVoteRecord) error) *MockContestRepository_ContestEntryVoteGet_Call {
	_c.Call.Return(run)
	return _c
}

// ContestEntryVoteUpdate provides a mock function with given fields: ctx, contestEntryVoteID, newVote
func (_m *MockContestRepository) ContestEntryVoteUpdate(ctx context.Context, contestEntryVoteID int64, newVote bool) error {
	ret := _m.Called(ctx, contestEntryVoteID, newVote)

	if len(ret) == 0 {
		panic("no return value specified for ContestEntryVoteUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) error); ok {
		r0 = rf(ctx, contestEntryVoteID, newVote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestEntryVoteUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestEntryVoteUpdate'
type MockContestRepository_ContestEntryVoteUpdate_Call struct {
	*mock.Call
}

// ContestEntryVoteUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - contestEntryVoteID int64
//   - newVote bool
func (_e *MockContestRepository_Expecter) ContestEntryVoteUpdate(ctx interface{}, contestEntryVoteID interface{}, newVote interface{}) *MockContestRepository_ContestEntryVoteUpdate_Call {
	return &MockContestRepository_ContestEntryVoteUpdate_Call{Call: _e.mock.On("ContestEntryVoteUpdate", ctx, contestEntryVoteID, newVote)}
}

func (_c *MockContestRepository_ContestEntryVoteUpdate_Call) Run(run func(ctx context.Context, contestEntryVoteID int64, newVote bool)) *MockContestRepository_ContestEntryVoteUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockContestRepository_ContestEntryVoteUpdate_Call) Return(_a0 error) *MockContestRepository_ContestEntryVoteUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestEntryVoteUpdate_Call) RunAndReturn(run func(context.Context, int64, bool) error) *MockContestRepository_ContestEntryVoteUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ContestSave provides a mock function with given fields: ctx, contest
func (_m *MockContestRepository) ContestSave(ctx context.Context, contest *domain.Contest) error {
	ret := _m.Called(ctx, contest)

	if len(ret) == 0 {
		panic("no return value specified for ContestSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Contest) error); ok {
		r0 = rf(ctx, contest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContestRepository_ContestSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContestSave'
type MockContestRepository_ContestSave_Call struct {
	*mock.Call
}

// ContestSave is a helper method to define mock.On call
//   - ctx context.Context
//   - contest *domain.Contest
func (_e *MockContestRepository_Expecter) ContestSave(ctx interface{}, contest interface{}) *MockContestRepository_ContestSave_Call {
	return &MockContestRepository_ContestSave_Call{Call: _e.mock.On("ContestSave", ctx, contest)}
}

func (_c *MockContestRepository_ContestSave_Call) Run(run func(ctx context.Context, contest *domain.Contest)) *MockContestRepository_ContestSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Contest))
	})
	return _c
}

func (_c *MockContestRepository_ContestSave_Call) Return(_a0 error) *MockContestRepository_ContestSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContestRepository_ContestSave_Call) RunAndReturn(run func(context.Context, *domain.Contest) error) *MockContestRepository_ContestSave_Call {
	_c.Call.Return(run)
	return _c
}

// Contests provides a mock function with given fields: ctx, publicOnly
func (_m *MockContestRepository) Contests(ctx context.Context, publicOnly bool) ([]domain.Contest, error) {
	ret := _m.Called(ctx, publicOnly)

	if len(ret) == 0 {
		panic("no return value specified for Contests")
	}

	var r0 []domain.Contest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) ([]domain.Contest, error)); ok {
		return rf(ctx, publicOnly)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) []domain.Contest); ok {
		r0 = rf(ctx, publicOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Contest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, publicOnly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContestRepository_Contests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Contests'
type MockContestRepository_Contests_Call struct {
	*mock.Call
}

// Contests is a helper method to define mock.On call
//   - ctx context.Context
//   - publicOnly bool
func (_e *MockContestRepository_Expecter) Contests(ctx interface{}, publicOnly interface{}) *MockContestRepository_Contests_Call {
	return &MockContestRepository_Contests_Call{Call: _e.mock.On("Contests", ctx, publicOnly)}
}

func (_c *MockContestRepository_Contests_Call) Run(run func(ctx context.Context, publicOnly bool)) *MockContestRepository_Contests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockContestRepository_Contests_Call) Return(_a0 []domain.Contest, _a1 error) *MockContestRepository_Contests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContestRepository_Contests_Call) RunAndReturn(run func(context.Context, bool) ([]domain.Contest, error)) *MockContestRepository_Contests_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContestRepository creates a new instance of MockContestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContestRepository {
	mock := &MockContestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
