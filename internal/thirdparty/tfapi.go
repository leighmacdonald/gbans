//go:generate go tool oapi-codegen -config .openapi.yaml https://tf-api.roto.lol/openapi-3.0.yaml
package thirdparty

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/leighmacdonald/steamid/v4/steamid"
)

var ErrNoResult = errors.New("no reuslts")

// TFAPI provides a trivial interface around the autogenerated tf-api client just to
// make any future api changes a bit easier as its still a bit of a moving target.
type TFAPI struct {
	Client *ClientWithResponses
}

func NewTFAPI(host string, client *http.Client) (*TFAPI, error) {
	tfapiClient, errClient := NewClientWithResponses(host, WithHTTPClient(client))
	if errClient != nil {
		return nil, errClient
	}

	return &TFAPI{Client: tfapiClient}, nil
}

func (c TFAPI) SteamGroup(ctx context.Context, groupID steamid.SteamID) (SteamGroup, error) {
	steamGroupResp, errResp := c.Client.SteamGroupWithResponse(ctx, &SteamGroupParams{
		Groupid: groupID.String(),
	})

	if errResp != nil || steamGroupResp.JSON200 == nil {
		return SteamGroup{}, errResp
	}

	return *steamGroupResp.JSON200, nil
}

func (c TFAPI) LogsTFSummary(ctx context.Context, steamID steamid.SteamID) (LogsTFPlayerSummary, error) {
	summaryResp, errSummary := c.Client.LogstfPlayerSummaryWithResponse(ctx, &LogstfPlayerSummaryParams{
		Steamid: steamID.String(),
	})

	if errSummary != nil || summaryResp.JSON200 == nil {
		return LogsTFPlayerSummary{}, errSummary
	}

	return *summaryResp.JSON200, nil
}

func (c TFAPI) MetaProfile(ctx context.Context, steamIDs steamid.Collection) ([]MetaProfile, error) {
	resp, errResp := c.Client.MetaProfileWithResponse(ctx, &MetaProfileParams{
		Steamids: strings.Join(steamIDs.ToStringSlice(), ","),
	})
	if errResp != nil {
		return nil, errResp
	}

	if resp.JSON200 == nil {
		return nil, ErrNoResult
	}

	return *resp.JSON200, nil
}

func (c TFAPI) Summaries(ctx context.Context, steamIDs steamid.Collection) ([]PlayerSummaryResponse, error) {
	resp, errResp := c.Client.SteamSummariesWithResponse(ctx, &SteamSummariesParams{
		Steamids: strings.Join(steamIDs.ToStringSlice(), ","),
	})
	if errResp != nil {
		return nil, errResp
	}

	if resp.JSON200 == nil {
		return nil, ErrNoResult
	}

	return *resp.JSON200, nil
}

func (c TFAPI) Friends(ctx context.Context, steamID steamid.SteamID) ([]SteamFriend, error) {
	resp, errResp := c.Client.SteamFriendsWithResponse(ctx, &SteamFriendsParams{Steamid: steamID.String()})
	if errResp != nil {
		return nil, errResp
	}

	if resp.JSON200 == nil {
		return nil, ErrNoResult
	}

	return *resp.JSON200, nil
}
